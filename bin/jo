#!/usr/bin/env iojs --harmony --es_staging
"use strict";
var _$JOROOT=require("path").dirname(__dirname);
try{require(_$JOROOT+"/node_modules/source-map-support/source-map-support.js").install();}catch(_){}
/**
 * core-js 1.0.0
 * https://github.com/zloirock/core-js
 * License: http://rock.mit-license.org
 * Â© 2015 Denis Pushkarev
 */
!function(b,c,a){"use strict";!function(c){function a(d){if(b[d])return b[d].exports;var e=b[d]={exports:{},id:d,loaded:!1};return c[d].call(e.exports,e,e.exports,a),e.loaded=!0,e.exports}var b={};return a.m=c,a.c=b,a.p="",a(0)}([function(b,c,a){a(1),a(32),a(37),a(39),a(41),a(43),a(44),a(45),a(46),a(47),a(48),a(49),a(50),a(52),a(53),a(54),a(55),a(56),a(57),a(58),a(59),a(60),a(61),a(63),a(64),a(65),a(67),a(68),a(69),a(70),a(71),a(72),a(73),a(74),a(75),a(76),a(77),a(78),a(79),a(85),a(86),a(87),a(88),a(90),a(91),a(96),a(97),a(100),a(102),a(103),a(104),a(105),a(106),a(108),a(109),a(111),a(112),a(113),a(114),a(119),a(122),a(123),a(125),a(126),a(127),a(128),a(129),a(130),a(131),a(132),a(133),a(134),a(135),a(136),a(138),a(139),a(140),a(141),a(142),a(143),a(145),a(146),a(147),a(148),a(150),a(151),a(153),a(154),a(155),a(156),a(159),a(94),a(161),a(160),a(162),a(163),a(164),a(165),a(166),a(168),a(169),a(170),a(171),a(172),a(173)},function(_,$,d){function z(a,b){return function(g){var c,e=p(g),f=0,d=[];for(c in e)c!=k&&j(e,c)&&d.push(c);for(;b>f;)j(e,c=a[f++])&&(~E(d,c)||d.push(c));return d}}function q(){}function W(d,a,e){if(!(a in u)){for(var c=[],b=0;a>b;b++)c[b]="a["+b+"]";u[a]=Function("F,a","return new F("+c.join(",")+")")}return u[a](d,e)}function H(a){return function(g,d){K(g);var c=p(this),e=h(c.length),b=a?e-1:0,f=a?-1:1;if(arguments.length<2)for(;;){if(b in c){d=c[b],b+=f;break}if(b+=f,a?0>b:b>=e)throw TypeError("Reduce of empty array with no initial value")}for(;a?b>=0:e>b;b+=f)b in c&&(d=g(d,c[b],b,this));return d}}function e(a){return a>9?a:"0"+a}var c=d(2),F=d(3),L=d(4),r=d(5),w=d(7),j=d(9),f=d(10),b=d(15),Y=d(19),g=d(20),k=d(14)("__proto__"),S=d(23),i=d(8),C=d(18),o=d(26),K=d(22),p=d(27),V=d(25),D=d(28),h=d(24),x=Object.prototype,y=[],m=y.slice,U=y.join,A=f.classof,B=c.setDesc,X=c.getDesc,s=c.setDescs,t=!1,E=d(29)(!1),N=g(0),O=g(1),P=g(2),Q=g(3),R=g(4),u={},T=d(30)(/^\s*([\s\S]*\S)?\s*$/,"$1");if(!F){try{t=8==B(w("div"),"x",{get:function(){return 8}}).x}catch(Z){}c.setDesc=function(b,c,a){if(t)try{return B(b,c,a)}catch(d){}if("get"in a||"set"in a)throw TypeError("Accessors not supported!");return"value"in a&&(o(b)[c]=a.value),b},c.getDesc=function(b,c){if(t)try{return X(b,c)}catch(d){}return j(b,c)?L(!x.propertyIsEnumerable.call(b,c),b[c]):a},c.setDescs=s=function(a,b){o(a);for(var d,e=c.getKeys(b),g=e.length,f=0;g>f;)c.setDesc(a,d=e[f++],b[d]);return a}}b(b.S+b.F*!F,"Object",{getOwnPropertyDescriptor:c.getDesc,defineProperty:c.setDesc,defineProperties:s});var n="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),I=n.concat("length","prototype"),J=n.length,l=function(){var a,b=w("iframe"),c=J,d=">";for(b.style.display="none",r.appendChild(b),b.src="javascript:",a=b.contentWindow.document,a.open(),a.write("<script>document.F=Object</script"+d),a.close(),l=a.F;c--;)delete l.prototype[n[c]];return l()};b(b.S,"Object",{getPrototypeOf:c.getProto=c.getProto||function(a){return a=Object(S(a)),j(a,k)?a[k]:C(a.constructor)&&a instanceof a.constructor?a.constructor.prototype:a instanceof Object?x:null},getOwnPropertyNames:c.getNames=c.getNames||z(I,I.length,!0),create:c.create=c.create||function(c,d){var b;return null!==c?(q.prototype=o(c),b=new q,q.prototype=null,b[k]=c):b=l(),d===a?b:s(b,d)},keys:c.getKeys=c.getKeys||z(n,J,!1),seal:function(a){return a},freeze:function(a){return a},preventExtensions:function(a){return a},isSealed:function(a){return!i(a)},isFrozen:function(a){return!i(a)},isExtensible:function(a){return i(a)}}),b(b.P,"Function",{bind:function(c){function b(){var e=d.concat(m.call(arguments));return this instanceof b?W(a,e.length,e):Y(a,e,c)}var a=K(this),d=m.call(arguments,1);return i(a.prototype)&&(b.prototype=a.prototype),b}}),0 in Object("z")&&"z"=="z"[0]||(c.ES5Object=function(a){return"String"==f(a)?a.split(""):Object(a)});var G=!0;try{r&&m.call(r),G=!1}catch(Z){}b(b.P+b.F*G,"Array",{slice:function(g,b){var d=h(this.length),i=f(this);if(b=b===a?d:b,"Array"==i)return m.call(this,g,b);for(var e=D(g,d),l=D(b,d),j=h(l-e),k=Array(j),c=0;j>c;c++)k[c]="String"==i?this.charAt(e+c):this[e+c];return k}}),b(b.P+b.F*(c.ES5Object!=Object),"Array",{join:function(){return U.apply(c.ES5Object(this),arguments)}}),b(b.S,"Array",{isArray:function(a){return"Array"==f(a)}}),b(b.P,"Array",{forEach:c.each=c.each||function(a){return N(this,a,arguments[1])},map:function(a){return O(this,a,arguments[1])},filter:function(a){return P(this,a,arguments[1])},some:function(a){return Q(this,a,arguments[1])},every:function(a){return R(this,a,arguments[1])},reduce:H(!1),reduceRight:H(!0),indexOf:function(a){return E(this,a,arguments[1])},lastIndexOf:function(d,e){var b=p(this),c=h(b.length),a=c-1;for(arguments.length>1&&(a=Math.min(a,V(e))),0>a&&(a=h(c+a));a>=0;a--)if(a in b&&b[a]===d)return a;return-1}}),b(b.P,"String",{trim:function(){return T(this)}}),b(b.S,"Date",{now:function(){return+new Date}});var v=new Date(-5e13-1),M=!(v.toISOString&&"0385-07-25T07:06:39.999Z"==v.toISOString()&&d(31)(function(){new Date(NaN).toISOString()}));b(b.P+b.F*M,"Date",{toISOString:function(){if(!isFinite(this))throw RangeError("Invalid time value");var a=this,b=a.getUTCFullYear(),c=a.getUTCMilliseconds(),d=0>b?"-":b>9999?"+":"";return d+("00000"+Math.abs(b)).slice(d?-6:-4)+"-"+e(a.getUTCMonth()+1)+"-"+e(a.getUTCDate())+"T"+e(a.getUTCHours())+":"+e(a.getUTCMinutes())+":"+e(a.getUTCSeconds())+"."+(c>99?c:"0"+e(c))+"Z"}}),"Object"==A(function(){return arguments}())&&(f.classof=function(a){var b=A(a);return"Object"==b&&C(a.callee)?"Arguments":b})},function(b){var a=Object;b.exports={create:a.create,getProto:a.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:a.getOwnPropertyDescriptor,setDesc:a.defineProperty,setDescs:a.defineProperties,getKeys:a.keys,getNames:a.getOwnPropertyNames,getSymbols:a.getOwnPropertySymbols,ES5Object:a,each:[].forEach}},function(a){a.exports=!!function(){try{return 2==Object.defineProperty({},"a",{get:function(){return 2}}).a}catch(a){}}()},function(a){a.exports=function(a,b){return{enumerable:!(1&a),configurable:!(2&a),writable:!(4&a),value:b}}},function(a,c,b){a.exports=b(6).document&&document.documentElement},function(b){var a="undefined"!=typeof self&&self.Math==Math?self:Function("return this")();b.exports=a,"number"==typeof c&&(c=a)},function(d,f,b){var c=b(8),a=b(6).document,e=c(a)&&c(a.createElement);d.exports=function(b){return e?a.createElement(b):{}}},function(a){a.exports=function(a){return null!==a&&("object"==typeof a||"function"==typeof a)}},function(a){var b={}.hasOwnProperty;a.exports=function(a,c){return b.call(a,c)}},function(e,i,c){function b(a){return h.call(a).slice(8,-1)}var f=c(9),g=c(11),d=c(12)("toStringTag"),h={}.toString;b.classof=function(c){var e,f;return c==a?c===a?"Undefined":"Null":"string"==typeof(f=(e=Object(c))[d])?f:b(e)},b.set=function(a,b,c){a&&!f(a=c?a:a.prototype,d)&&g(a,d,b)},e.exports=b},function(b,e,a){var c=a(2),d=a(4);b.exports=a(3)?function(a,b,e){return c.setDesc(a,b,d(1,e))}:function(a,b,c){return a[b]=c,a}},function(d,e,a){var c=a(13)("wks"),b=a(6).Symbol;d.exports=function(d){return c[d]||(c[d]=b&&b[d]||(b||a(14))("Symbol."+d))}},function(d,f,e){var a=e(6),b="__core-js_shared__",c=a[b]||(a[b]={});d.exports=function(a){return c[a]||(c[a]={})}},function(b){var c=0;b.exports=function(b){return"Symbol(".concat(b===a?"":b,")_",(++c+Math.random()).toString(36))}},function(j,k,c){function f(a,b){return function(){return a.apply(b,arguments)}}function a(l,k,q){var j,n,c,r,p=l&a.G,s=l&a.P,m=p?b:l&a.S?b[k]||(b[k]={}):(b[k]||{})[e],o=p?d:d[k]||(d[k]={});p&&(q=k);for(j in q)n=!(l&a.F)&&m&&j in m,c=(n?m:q)[j],r=l&a.B&&n?f(c,b):s&&i(c)?f(Function.call,c):c,m&&!n&&h(m,j,c),o[j]!=c&&g(o,j,r),s&&((o[e]||(o[e]={}))[j]=c)}var b=c(6),d=c(16),g=c(11),h=c(17),i=c(18),e="prototype";b.core=d,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,j.exports=a},function(c){var a={};c.exports=a,"number"==typeof b&&(b=a)},function(f,k,a){function d(d,a,c,j){if(h(c)){var f=d[a];e(c,b,f?f+"":i.replace(/hasOwnProperty/,a+"")),"name"in c||(c.name=a)}d===g?d[a]=c:(j||delete d[a],e(d,a,c))}var g=a(6),j=a(9),e=a(11),h=a(18),i={}.hasOwnProperty+"",b=a(14)("src"),c=Function.toString;d(Function.prototype,"toString",function(){return j(this,b)?this[b]:c.call(this)}),a(16).inspectSource=function(a){return c.call(a)},f.exports=d},function(a){a.exports=function(a){return"function"==typeof a}},function(b){b.exports=function(c,b,d){var e=d===a;switch(b.length){case 0:return e?c():c.call(d);case 1:return e?c(b[0]):c.call(d,b[0]);case 2:return e?c(b[0],b[1]):c.call(d,b[0],b[1]);case 3:return e?c(b[0],b[1],b[2]):c.call(d,b[0],b[1],b[2]);case 4:return e?c(b[0],b[1],b[2],b[3]):c.call(d,b[0],b[1],b[2],b[3]);case 5:return e?c(b[0],b[1],b[2],b[3],b[4]):c.call(d,b[0],b[1],b[2],b[3],b[4])}return c.apply(d,b)}},function(c,h,b){var d=b(2),e=b(21),f=b(23),g=b(24);c.exports=function(b){var h=1==b,j=2==b,k=3==b,c=4==b,i=6==b,l=5==b||i;return function(w,u,v){for(var n,p,s=Object(f(w)),q=d.ES5Object(s),t=e(u,v,3),r=g(q.length),m=0,o=h?Array(r):j?[]:a;r>m;m++)if((l||m in q)&&(n=q[m],p=t(n,m,s),b))if(h)o[m]=p;else if(p)switch(b){case 3:return!0;case 5:return n;case 6:return m;case 2:o.push(n)}else if(c)return!1;return i?-1:k||c?c:o}}},function(b,e,c){var d=c(22);b.exports=function(b,c,e){if(d(b),~e&&c===a)return b;switch(e){case 1:return function(a){return b.call(c,a)};case 2:return function(a,d){return b.call(c,a,d)};case 3:return function(a,d,e){return b.call(c,a,d,e)}}return function(){return b.apply(c,arguments)}}},function(a){a.exports=function(a){if("function"!=typeof a)throw TypeError(a+" is not a function!");return a}},function(b){b.exports=function(b){if(b==a)throw TypeError("Can't call method on  "+b);return b}},function(a,e,b){var c=b(25),d=Math.min;a.exports=function(a){return a>0?d(c(a),9007199254740991):0}},function(a){var b=Math.ceil,c=Math.floor;a.exports=function(a){return isNaN(a=+a)?0:(a>0?c:b)(a)}},function(a,d,b){var c=b(8);a.exports=function(a){if(!c(a))throw TypeError(a+" is not an object!");return a}},function(b,e,a){var c=a(2),d=a(23);b.exports=function(a){return c.ES5Object(d(a))}},function(a,f,b){var c=b(25),d=Math.max,e=Math.min;a.exports=function(a,b){return a=c(a),0>a?d(a+b,0):e(a,b)}},function(b,f,a){var c=a(27),d=a(24),e=a(28);b.exports=function(a){return function(j,g,k){var h,f=c(j),i=d(f.length),b=e(k,i);if(a&&g!=g){for(;i>b;)if(h=f[b++],h!=h)return!0}else for(;i>b;b++)if((a||b in f)&&f[b]===g)return a||b;return!a&&-1}}},function(a){a.exports=function(b,a){var c=a===Object(a)?function(b){return a[b]}:a;return function(a){return(a+"").replace(b,c)}}},function(a){a.exports=function(a){try{return a(),!1}catch(b){return!0}}},function(P,O,c){function z(a){var c=i[a]=k(f.prototype);return c._k=a,s&&n&&u(j,a,{configurable:!0,set:function(c){d(this,b)&&d(this[b],a)&&(this[b][a]=!1),u(this,a,o(1,c))}}),c}function t(a,c,e){return e&&d(i,c)?(e.enumerable?(d(a,b)&&a[b][c]&&(a[b][c]=!1),e=k(e,{enumerable:o(0,!1)})):(d(a,b)||g(a,b,o(1,{})),a[b][c]=!0),u(a,c,e)):g(a,c,e)}function r(a,b){K(a);for(var c,d=L(b=m(b)),e=0,f=d.length;f>e;)t(a,c=d[e++],b[c]);return a}function A(b,c){return c===a?k(b):r(k(b),c)}function B(a){var c=J.call(this,a);return c||!d(this,a)||!d(i,a)||d(this,b)&&this[b][a]?c:!0}function G(a,c){var e=C(a=m(a),c);return!e||!d(i,c)||d(a,b)&&a[b][c]||(e.enumerable=!0),e}function H(g){for(var a,c=F(m(g)),e=[],f=0;c.length>f;)d(i,a=c[f++])||a==b||e.push(a);return e}function I(f){for(var a,b=F(m(f)),c=[],e=0;b.length>e;)d(i,a=b[e++])&&c.push(i[a]);return c}var e=c(2),y=c(6),d=c(9),s=c(3),h=c(15),D=c(17),E=c(13),q=c(10).set,N=c(14),v=c(12),M=c(33),x=c(34),L=c(35),K=c(26),m=c(27),o=c(4),C=e.getDesc,g=e.setDesc,k=e.create,F=x.get,f=y.Symbol,n=!1,b=v("_hidden"),J=e.isEnum,l=E("symbol-registry"),i=E("symbols"),p=c(18)(f),j=Object.prototype,u=s?function(){try{return k(g({},b,{get:function(){return g(this,b,{value:!1})[b]}}))[b]||g}catch(a){return function(c,a,d){var b=C(j,a);b&&delete j[a],g(c,a,d),b&&c!==j&&g(j,a,b)}}}():g;p||(f=function(){if(this instanceof f)throw TypeError("Symbol is not a constructor");return z(N(arguments[0]))},D(f.prototype,"toString",function(){return this._k}),e.create=A,e.isEnum=B,e.getDesc=G,e.setDesc=t,e.setDescs=r,e.getNames=x.get=H,e.getSymbols=I,s&&!c(36)&&D(j,"propertyIsEnumerable",B,!0));var w={"for":function(a){return d(l,a+="")?l[a]:l[a]=f(a)},keyFor:function(a){return M(l,a)},useSetter:function(){n=!0},useSimple:function(){n=!1}};e.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(a){var b=v(a);w[a]=p?b:z(b)}),n=!0,h(h.G+h.W,{Symbol:f}),h(h.S,"Symbol",w),h(h.S+h.F*!p,"Object",{create:A,defineProperty:t,defineProperties:r,getOwnPropertyDescriptor:G,getOwnPropertyNames:H,getOwnPropertySymbols:I}),q(f,"Symbol"),q(Math,"Math",!0),q(y.JSON,"JSON",!0)},function(b,e,a){var c=a(2),d=a(27);b.exports=function(g,h){for(var a,b=d(g),e=c.getKeys(b),i=e.length,f=0;i>f;)if(b[a=e[f++]]===h)return a}},function(d,h,a){function e(a){try{return b(a)}catch(d){return c.slice()}}var f={}.toString,g=a(27),b=a(2).getNames,c="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];d.exports.get=function(a){return c&&"[object Window]"==f.call(a)?e(a):b(g(a))}},function(b,d,c){var a=c(2);b.exports=function(b){var c=a.getKeys(b),h=a.isEnum,d=a.getSymbols;if(d)for(var e,f=d(b),g=0;f.length>g;)h.call(b,e=f[g++])&&c.push(e);return c}},function(a){a.exports=!1},function(c,d,a){var b=a(15);b(b.S,"Object",{assign:a(38)})},function(b,f,a){var c=a(2),d=a(35),e=a(23);b.exports=Object.assign||function(j){for(var a=Object(e(j)),k=arguments.length,b=1;k>b;)for(var f,g=c.ES5Object(arguments[b++]),h=d(g),l=h.length,i=0;l>i;)a[f=h[i++]]=g[f];return a}},function(c,d,a){var b=a(15);b(b.S,"Object",{is:a(40)})},function(a){a.exports=Object.is||function(a,b){return a===b?0!==a||1/a===1/b:a!=a&&b!=b}},function(c,d,a){var b=a(15);b(b.S,"Object",{setPrototypeOf:a(42).set})},function(d,h,b){function c(b,a){if(g(b),!f(a)&&null!==a)throw TypeError(a+": can't set as prototype!")}var e=b(2).getDesc,f=b(8),g=b(26);d.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(d,a){try{a=b(21)(Function.call,e(Object.prototype,"__proto__").set,2),a({},[])}catch(f){d=!0}return function(b,e){return c(b,e),d?b.__proto__=e:a(b,e),b}}():a),check:c}},function(d,e,a){var b=a(10),c={};c[a(12)("toStringTag")]="z","z"!=b(c)&&a(17)(Object.prototype,"toString",function(){return"[object "+b.classof(this)+"]"},!0)},function(h,i,a){var e=a(2),f=a(16),c=a(15),g=a(23),d=a(27),b=a(8);e.each.call("freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames".split(","),function(i,h){var e=(f.Object||{})[i]||Object[i],j=0,k={};k[i]=0==h?function(a){return b(a)?e(a):a}:1==h?function(a){return b(a)?e(a):a}:2==h?function(a){return b(a)?e(a):a}:3==h?function(a){return b(a)?e(a):!0}:4==h?function(a){return b(a)?e(a):!0}:5==h?function(a){return b(a)?e(a):!1}:6==h?function(a,b){return e(d(a),b)}:7==h?function(a){return e(Object(g(a)))}:8==h?function(a){return e(d(a))}:a(34).get;try{e("z")}catch(l){j=1}c(c.S+c.F*j,"Object",k)})},function(h,i,b){var g=b(2),d=b(9),e=b(4),c=g.setDesc,f=Function.prototype,a="name";a in f||b(3)&&c(f,a,{configurable:!0,get:function(){var b=(this+"").match(/^\s*function ([^ (]*)/),f=b?b[1]:"";return d(this,a)||c(this,a,e(5,f)),f},set:function(b){d(this,a)||c(this,a,e(0,b))}})},function(g,h,a){var b=a(2),c=a(8),f=a(18),d=a(12)("hasInstance"),e=Function.prototype;d in e||b.setDesc(e,d,{value:function(a){if(!f(this)||!c(a))return!1;if(!c(this.prototype))return a instanceof this;for(;a=b.getProto(a);)if(this.prototype===a)return!0;return!1}})},function(p,o,b){function n(a){var b,c;if(i(b=a.valueOf)&&!g(c=b.call(a)))return c;if(i(b=a.toString)&&!g(c=b.call(a)))return c;throw TypeError("Can't convert object to number")}function k(a){if(g(a)&&(a=n(a)),"string"==typeof a&&a.length>2&&48==a.charCodeAt(0)){var b=!1;switch(a.charCodeAt(1)){case 66:case 98:b=!0;case 79:case 111:return parseInt(a.slice(2),b?2:8)}}return+a}var c=b(2),j=b(6),h=b(9),l=b(10),g=b(8),i=b(18),e="Number",a=j[e],f=a,d=a.prototype,m=l(c.create(d))==e?function(a){try{return d.valueOf.call(a),!1}catch(b){return!0}}:function(a){return l(a)!=e};a("0o1")&&a("0b1")||(a=function(b){return this instanceof a&&m(this)?new f(k(b)):k(b)},c.each.call(b(3)?c.getNames(f):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),function(b){h(f,b)&&!h(a,b)&&c.setDesc(a,b,c.getDesc(f,b))}),a.prototype=d,d.constructor=a,b(17)(j,e,a))},function(c,d,b){var a=b(15);a(a.S,"Number",{EPSILON:Math.pow(2,-52)})},function(d,e,a){var b=a(15),c=a(6).isFinite;b(b.S,"Number",{isFinite:function(a){return"number"==typeof a&&c(a)}})},function(c,d,a){var b=a(15);b(b.S,"Number",{isInteger:a(51)})},function(a,e,b){var c=b(8),d=Math.floor;a.exports=function(a){return!c(a)&&isFinite(a)&&d(a)===a}},function(c,d,b){var a=b(15);a(a.S,"Number",{isNaN:function(a){return a!=a}})},function(e,f,a){var b=a(15),c=a(51),d=Math.abs;b(b.S,"Number",{isSafeInteger:function(a){return c(a)&&d(a)<=9007199254740991}})},function(c,d,b){var a=b(15);a(a.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(c,d,b){var a=b(15);a(a.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(c,d,b){var a=b(15);a(a.S,"Number",{parseFloat:parseFloat})},function(c,d,b){var a=b(15);a(a.S,"Number",{parseInt:parseInt})},function(e,f,d){var a=d(15),b=Math.E,c=Math.sqrt;a(a.S,"Math",{acosh:function(a){return(a=+a)<1?NaN:isFinite(a)?Math.log(a/b+c(a+1)*c(a-1)/b)+1:a}})},function(d,e,c){function a(b){return isFinite(b=+b)&&0!=b?0>b?-a(-b):Math.log(b+Math.sqrt(b*b+1)):b}var b=c(15);b(b.S,"Math",{asinh:a})},function(c,d,b){var a=b(15);a(a.S,"Math",{atanh:function(a){return 0==(a=+a)?a:Math.log((1+a)/(1-a))/2}})},function(d,e,a){var b=a(15),c=a(62);b(b.S,"Math",{cbrt:function(a){return c(a=+a)*Math.pow(Math.abs(a),1/3)}})},function(a){a.exports=Math.sign||function(a){return 0==(a=+a)||a!=a?a:0>a?-1:1}},function(c,d,b){var a=b(15);a(a.S,"Math",{clz32:function(a){return(a>>>=0)?31-Math.floor(Math.log(a+.5)*Math.LOG2E):32}})},function(d,e,c){var a=c(15),b=Math.exp;a(a.S,"Math",{cosh:function(a){return(b(a=+a)+b(-a))/2}})},function(c,d,a){var b=a(15);b(b.S,"Math",{expm1:a(66)})},function(a){a.exports=Math.expm1||function(a){return 0==(a=+a)?a:a>-1e-6&&1e-6>a?a+a*a/2:Math.exp(a)-1}},function(k,j,e){function g(a){return a+1/d-1/d}var f=e(15),h=e(62),a=Math.pow,d=a(2,-52),b=a(2,-23),i=a(2,127)*(2-b),c=a(2,-126);f(f.S,"Math",{fround:function(k){var f,a,e=Math.abs(k),j=h(k);return c>e?j*g(e/c/b)*c*b:(f=(1+b/d)*e,a=f-(f-e),a>i||a!=a?j*(1/0):j*a)}})},function(d,e,b){var a=b(15),c=Math.abs;a(a.S,"Math",{hypot:function(){for(var a,b,e=0,f=0,g=arguments.length,d=0;g>f;)a=c(arguments[f++]),a>d?(b=d/a,e=e*b*b+1,d=a):a>0?(b=a/d,e+=b*b):e+=a;return d===1/0?1/0:d*Math.sqrt(e)}})},function(c,d,b){var a=b(15);a(a.S,"Math",{imul:function(f,g){var a=65535,b=+f,c=+g,d=a&b,e=a&c;return 0|d*e+((a&b>>>16)*e+d*(a&c>>>16)<<16>>>0)}})},function(c,d,b){var a=b(15);a(a.S,"Math",{log10:function(a){return Math.log(a)/Math.LN10}})},function(c,d,b){var a=b(15);a(a.S,"Math",{log1p:function(a){return(a=+a)>-1e-8&&1e-8>a?a-a*a/2:Math.log(1+a)}})},function(c,d,b){var a=b(15);a(a.S,"Math",{log2:function(a){return Math.log(a)/Math.LN2}})},function(c,d,a){var b=a(15);b(b.S,"Math",{sign:a(62)})},function(e,f,a){var b=a(15),c=a(66),d=Math.exp;b(b.S,"Math",{sinh:function(a){return Math.abs(a=+a)<1?(c(a)-c(-a))/2:(d(a-1)-d(-a-1))*(Math.E/2)}})},function(e,f,a){var b=a(15),c=a(66),d=Math.exp;b(b.S,"Math",{tanh:function(a){var b=c(a=+a),e=c(-a);return b==1/0?1:e==1/0?-1:(b-e)/(d(a)+d(-a))}})},function(c,d,b){var a=b(15);a(a.S,"Math",{trunc:function(a){return(a>0?Math.floor:Math.ceil)(a)}})},function(f,g,b){var a=b(15),e=b(28),c=String.fromCharCode,d=String.fromCodePoint;a(a.S+a.F*(!!d&&1!=d.length),"String",{fromCodePoint:function(){for(var a,b=[],f=arguments.length,d=0;f>d;){if(a=+arguments[d++],e(a,1114111)!==a)throw RangeError(a+" is not a valid code point");b.push(65536>a?c(a):c(((a-=65536)>>10)+55296,a%1024+56320))}return b.join("")}})},function(e,f,a){var b=a(15),c=a(27),d=a(24);b(b.S,"String",{raw:function(f){for(var e=c(f.raw),g=d(e.length),h=arguments.length,b=[],a=0;g>a;)b.push(e[a++]+""),h>a&&b.push(arguments[a]+"");return b.join("")}})},function(d,e,b){var c=b(80)(!0);b(81)(String,"String",function(a){this._t=a+"",this._i=0},function(){var b,d=this._t,e=this._i;return e>=d.length?{value:a,done:!0}:(b=c(d,e),this._i+=b.length,{value:b,done:!1})})},function(c,f,b){var d=b(25),e=b(23);c.exports=function(b){return function(j,k){var f,h,g=e(j)+"",c=d(k),i=g.length;return 0>c||c>=i?b?"":a:(f=g.charCodeAt(c),55296>f||f>56319||c+1===i||(h=g.charCodeAt(c+1))<56320||h>57343?b?g.charAt(c):f:b?g.slice(c,c+2):(f-55296<<10)+(h-56320)+65536)}}},function(o,p,a){function j(){return this}var n=a(2),f=a(36),c=a(15),m=a(17),g=a(11),l=a(9),k=a(10),d=a(12)("iterator"),i=a(82),h="@@iterator",e="keys",b="values";o.exports=function(v,s,w,C,q,B,z){function r(c){function a(a){return new w(a,c)}switch(c){case e:return function(){return a(this)};case b:return function(){return a(this)}}return function(){return a(this)}}a(83)(w,s,C);var t,u,y=s+" Iterator",o=v.prototype,x=o[d]||o[h]||q&&o[q],p=x||r(q);if(x){var A=n.getProto(p.call(new v));k.set(A,y,!0),!f&&l(o,h)&&g(A,d,j)}if((!f||z)&&g(o,d,p),i[s]=p,i[y]=j,q)if(t={keys:B?p:r(e),values:q==b?p:r(b),entries:q!=b?p:r("entries")},z)for(u in t)u in o||m(o,u,t[u]);else c(c.P+c.F*a(84),s,t)}},function(a){a.exports={}},function(c,e,a){var d=a(2),b={};a(11)(b,a(12)("iterator"),function(){return this}),c.exports=function(c,e,f){c.prototype=d.create(b,{next:a(4)(1,f)}),a(10).set(c,e+" Iterator")}},function(a){a.exports="keys"in[]&&!("next"in[].keys())},function(d,e,a){var b=a(15),c=a(80)(!1);b(b.P,"String",{codePointAt:function(a){return c(this,a)}})},function(g,h,b){var e=b(10),c=b(15),f=b(23),d=b(24);c(c.P+c.F*!b(31)(function(){"q".endsWith(/./)}),"String",{endsWith:function(b){if("RegExp"==e(b))throw TypeError("String#endsWith doesn't accept regex!");var c=f(this)+"",g=arguments[1],h=d(c.length),i=g===a?h:Math.min(d(g),h);return b+="",c.slice(i-b.length,i)===b}})},function(e,f,a){var c=a(23),d=a(10),b=a(15);b(b.P,"String",{includes:function(a){if("RegExp"==d(a))throw TypeError("String#includes doesn't accept regex!");return!!~(c(this)+"").indexOf(a,arguments[1])}})},function(c,d,a){var b=a(15);b(b.P,"String",{repeat:a(89)})},function(b,e,a){var c=a(25),d=a(23);b.exports=function(f){var b=d(this)+"",e="",a=c(f);if(0>a||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(b+=b))1&a&&(e+=b);return e}},function(f,g,a){var c=a(24),d=a(23),e=a(10),b=a(15);b(b.P+b.F*!a(31)(function(){"q".startsWith(/./)}),"String",{startsWith:function(a){if("RegExp"==e(a))throw TypeError("String#startsWith doesn't accept regex!");var b=d(this)+"",f=c(Math.min(arguments[1],b.length));return a+="",b.slice(f,f+a.length)===a}})},function(j,k,b){var d=b(21),c=b(15),e=b(23),f=b(93),g=b(92),h=b(24),i=b(94);c(c.S+c.F*!b(95)(function(a){Array.from(a)}),"Array",{from:function(r){var q,c,o,l,j=Object(e(r)),n="function"==typeof this?this:Array,k=arguments[1],p=k!==a,b=0,m=i(j);if(p&&(k=d(k,arguments[2],2)),m==a||n==Array&&g(m))for(c=new n(q=h(j.length));q>b;b++)c[b]=p?k(j[b],b):j[b];else for(l=m.call(j),c=new n;!(o=l.next()).done;b++)c[b]=p?f(l,k,[o.value,b],!0):o.value;return c.length=b,c}})},function(c,e,a){var b=a(82),d=a(12)("iterator");c.exports=function(a){return("Array"in b?b.Array:Array.prototype[d])===a}},function(e,g,f){function b(b){var c=b["return"];c!==a&&d(c.call(b))}function c(e,c,a,f){try{return f?c(d(a)[0],a[1]):c(a)}catch(g){throw b(e),g}}var d=f(26);c.close=b,e.exports=c},function(c,h,b){var d=b(6),e=b(10).classof,f=b(12)("iterator"),g=b(82);c.exports=b(16).getIteratorMethod=function(b){var c=d.Symbol;return b!=a?b[c&&c.iterator||"@@iterator"]||b[f]||g[e(b)]:a}},function(d,f,e){var a=e(12)("iterator"),b=!1;try{var c=[7][a]();c["return"]=function(){b=!0},Array.from(c,function(){throw 2})}catch(g){}d.exports=function(f){if(!b)return!1;var d=!1;try{var c=[7],e=c[a]();e.next=function(){d=!0},c[a]=function(){return e},f(c)}catch(g){}return d}},function(c,d,b){var a=b(15);a(a.S,"Array",{of:function(){for(var a=0,b=arguments.length,c=new("function"==typeof this?this:Array)(b);b>a;)c[a]=arguments[a++];return c.length=b,c}})},function(g,h,b){var d=b(98),c=b(99),e=b(82),f=b(27);b(81)(Array,"Array",function(a,b){this._t=f(a),this._i=0,this._k=b},function(){var d=this._t,e=this._k,b=this._i++;return!d||b>=d.length?(this._t=a,c(1)):"keys"==e?c(0,b):"values"==e?c(0,d[b]):c(0,[b,d[b]])},"values"),e.Arguments=e.Array,d("keys"),d("values"),d("entries")},function(c,d,b){var a=b(12)("unscopables");a in[]||b(11)(Array.prototype,a,{}),c.exports=function(b){[][a][b]=!0}},function(a){a.exports=function(a,b){return{value:b,done:!!a}}},function(b,c,a){a(101)(Array)},function(c,e,a){var d=a(2),b=a(12)("species");c.exports=function(c){!a(3)||b in c||d.setDesc(c,b,{configurable:!0,get:function(){return this}})}},function(g,h,b){var e=b(23),d=b(15),c=b(28),f=b(24);d(d.P,"Array",{copyWithin:function(l,m){var g=Object(e(this)),h=f(g.length),b=c(l,h),d=c(m,h),k=arguments[2],n=k===a?h:c(k,h),i=Math.min(n-d,h-b),j=1;for(b>d&&d+i>b&&(j=-1,d=d+i-1,b=b+i-1);i-->0;)d in g?g[b]=g[d]:delete g[b],b+=j,d+=j;return g}}),b(98)("copyWithin")},function(g,h,b){var c=b(15),e=b(23),d=b(28),f=b(24);c(c.P,"Array",{fill:function(i){for(var b=Object(e(this)),c=f(b.length),g=d(arguments[1],c),h=arguments[2],j=h===a?c:d(h,c);j>g;)b[g++]=i;return b}}),b(98)("fill")},function(f,g,a){var b="find",c=a(15),d=!0,e=a(20)(5);b in[]&&Array(1)[b](function(){d=!1}),c(c.P+c.F*d,"Array",{find:function(a){return e(this,a,arguments[1])}}),a(98)(b)},function(f,g,a){var b="findIndex",c=a(15),d=!0,e=a(20)(6);b in[]&&Array(1)[b](function(){d=!1}),c(c.P+c.F*d,"Array",{findIndex:function(a){return e(this,a,arguments[1])}}),a(98)(b)},function(n,m,c){var e=c(2),g=c(6),k=c(10),j=c(107),b=g.RegExp,d=b,i=b.prototype,f=/a/g,h=new b(f)!==f,l=function(){try{return"/a/i"==b(f,"i")}catch(a){}}();c(3)&&(h&&l||(b=function(c,f){var e="RegExp"==k(c),g=f===a;return this instanceof b||!e||!g?h?new d(e&&!g?c.source:c,f):new d(e?c.source:c,e&&g?j.call(c):f):c},e.each.call(e.getNames(d),function(a){a in b||e.setDesc(b,a,{configurable:!0,get:function(){return d[a]},set:function(b){d[a]=b}})}),i.constructor=b,b.prototype=i,c(17)(g,"RegExp",b))),c(101)(b)},function(a,d,b){var c=b(26);a.exports=function(){var b=c(this),a="";return b.global&&(a+="g"),b.ignoreCase&&(a+="i"),b.multiline&&(a+="m"),b.unicode&&(a+="u"),b.sticky&&(a+="y"),a}},function(c,d,a){var b=a(2);a(3)&&"g"!=/./g.flags&&b.setDesc(RegExp.prototype,"flags",{configurable:!0,get:a(107)})},function(c,d,b){b(110)("match",1,function(b){return function(c){var d=this+"",e=c==a?a:c[b];return e!==a?e.call(c,d):RegExp(c)[b](d)}})},function(b,c,a){b.exports=function(b,e,f){var c=a(12)(b),d=""[b];(function(){try{var a={};return a[c]=function(){return 7},7!=""[b](a)}catch(d){return!0}})()&&(a(17)(String.prototype,b,f(c,d)),a(11)(RegExp.prototype,c,2==e?function(a,b){return d.call(a,this,b)}:function(a){return d.call(a,this)}))}},function(c,d,b){b(110)("replace",2,function(b,c){return function(d,e){var f=this+"",g=d==a?a:d[b];return g!==a?g.call(d,f,e):c.call(f,d,e)}})},function(c,d,b){b(110)("search",1,function(b){return function(c){var d=this+"",e=c==a?a:c[b];return e!==a?e.call(c,d):RegExp(c)[b](d)}})},function(c,d,b){b(110)("split",2,function(b,c){return function(d,e){var f=this+"",g=d==a?a:d[b];return g!==a?g.call(d,f,e):c.call(f,d,e)}})},function(K,J,b){function v(b){var a=new c(function(){});return b&&(a.constructor=Object),c.resolve(a)===a}function F(a){return u(a)&&(f?"Promise"==n.classof(a):k in a)}function H(a,b){return I&&a===c&&b===s?!0:D(a,b)}function x(b){var c=r(b)[B];return c!=a?c:b}function w(b){var a;return u(b)&&(a=b.then),i(a)?a:!1}function m(b,d){if(!b.n){b.n=!0;var c=b.c;o.call(g,function(){function i(a){var c,g,d=f?a.ok:a.fail;try{d?(f||(b.h=!0),c=d===!0?e:d(e),c===a.P?a.rej(TypeError("Promise-chain cycle")):(g=w(c))?g.call(c,a.res,a.rej):a.res(c)):a.rej(e)}catch(h){a.rej(h)}}for(var e=b.v,f=1==b.s,h=0;c.length>h;)i(c[h++]);c.length=0,b.n=!1,d&&setTimeout(function(){o.call(g,function(){t(b.p)&&(G?l.emit("unhandledRejection",e,b.p):g.console&&console.error&&console.error("Unhandled promise rejection",e)),b.a=a})},1)})}}function t(e){var a,b=e[k],c=b.a||b.c,d=0;if(b.h)return!1;for(;c.length>d;)if(a=c[d++],a.fail||!t(a.P))return!1;return!0}function h(b){var a=this;a.d||(a.d=!0,a=a.r||a,a.v=b,a.s=2,a.a=a.c.slice(),m(a,!0))}function y(b){var c,a=this;if(!a.d){a.d=!0,a=a.r||a;try{(c=w(b))?o.call(g,function(){var d={r:a,d:!1};try{c.call(b,j(y,d,1),j(h,d,1))}catch(e){h.call(d,e)}}):(a.v=b,a.s=1,m(a,!1))}catch(d){h.call({r:a,d:!1},d)}}}var s,p=b(2),I=b(36),g=b(6),j=b(21),n=b(10),d=b(15),u=b(8),i=b(18),r=b(26),q=b(22),E=b(116),z=b(115),A=b(42).set,D=b(40),C=b(101),B=b(12)("species"),k=b(14)("record"),e="Promise",l=g.process,G="process"==n(l),o=l&&l.nextTick||b(117).set,c=g[e],f=function(){function a(d){var b=new c(d);return A(b,a.prototype),b}var d=!1;try{if(d=i(c)&&i(c.resolve)&&v(),A(a,c),a.prototype=p.create(c.prototype,{constructor:{value:a}}),a.resolve(5).then(function(){})instanceof a||(d=!1),d&&b(3)){var e=!1;c.resolve(p.setDesc({},"then",{get:function(){e=!0}})),d=e}}catch(f){d=!1}return d}();f||(c=function(d){q(d);var b={p:E(this,c,e),c:[],a:a,s:0,d:!1,v:a,h:!1,n:!1};this[k]=b;try{d(j(y,b,1),j(h,b,1))}catch(f){h.call(b,f)}},b(118)(c.prototype,{then:function(e,f){var g=r(r(this).constructor)[B],b={ok:i(e)?e:!0,fail:i(f)?f:!1},h=b.P=new(g!=a?g:c)(function(a,c){b.res=q(a),b.rej=q(c)}),d=this[k];return d.c.push(b),d.a&&d.a.push(b),d.s&&m(d,!1),h},"catch":function(b){return this.then(a,b)}})),d(d.G+d.W+d.F*!f,{Promise:c}),n.set(c,e),C(c),C(s=b(16)[e]),d(d.S+d.F*!f,e,{reject:function(a){return new this(function(c,b){b(a)})}}),d(d.S+d.F*(!f||v(!0)),e,{resolve:function(a){return F(a)&&H(a.constructor,this)?a:new this(function(b){b(a)})}}),d(d.S+d.F*!(f&&b(95)(function(a){c.all(a)["catch"](function(){})})),e,{all:function(c){var b=x(this),a=[];return new b(function(f,g){z(c,!1,a.push,a);var d=a.length,e=Array(d);d?p.each.call(a,function(a,c){b.resolve(a).then(function(a){e[c]=a,--d||f(e)},g)}):f(e)})},race:function(b){var a=x(this);return new a(function(c,d){z(b,!1,function(b){a.resolve(b).then(c,d)})})}})},function(b,j,a){var c=a(21),d=a(93),e=a(18),f=a(92),g=a(26),h=a(24),i=a(94);b.exports=function(a,k,p,q){var o,b,l,m=i(a),n=c(p,q,k?2:1),j=0;if(!e(m))throw TypeError(a+" is not iterable!");if(f(m))for(o=h(a.length);o>j;j++)k?n(g(b=a[j])[0],b[1]):n(a[j]);else for(l=m.call(a);!(b=l.next()).done;)d(l,n,b.value,k)}},function(a){a.exports=function(a,b,c){if(!(a instanceof b))throw TypeError(c+": use the 'new' operator!");return a}},function(s,w,b){function f(){var a=+this;if(u(e,a)){var b=e[a];delete e[a],b()}}function p(a){f.call(a.data)}var d,l,g,u=b(9),h=b(21),t=b(10),v=b(19),c=b(18),o=b(5),m=b(7),a=b(6),n=a.process,k=a.setImmediate,i=a.clearImmediate,q=a.MessageChannel,j=0,e={},r="onreadystatechange";c(k)&&c(i)||(k=function(a){for(var b=[],f=1;arguments.length>f;)b.push(arguments[f++]);return e[++j]=function(){v(c(a)?a:Function(a),b)},d(j),j},i=function(a){delete e[a]},"process"==t(n)?d=function(a){n.nextTick(h(f,a,1))}:a.addEventListener&&c(a.postMessage)&&!a.importScripts?(d=function(b){a.postMessage(b,"*")},a.addEventListener("message",p,!1)):c(q)?(l=new q,g=l.port2,l.port1.onmessage=p,d=h(g.postMessage,g,1)):d=r in m("script")?function(a){o.appendChild(m("script"))[r]=function(){o.removeChild(this),f.call(a)}}:function(a){setTimeout(h(f,a,1),0)}),s.exports={set:k,clear:i}},function(a,d,b){var c=b(17);a.exports=function(a,b){
for(var d in b)c(a,d,b[d]);return a}},function(c,d,b){var a=b(120);b(121)("Map",function(a){return function(){return a(this,arguments[0])}},{get:function(c){var b=a.getEntry(this,c);return b&&b.v},set:function(b,c){return a.def(this,0===b?0:b,c)}},a,!0)},function(o,u,b){function j(a,b){if(!k(a))return"symbol"==typeof a?a:("string"==typeof a?"S":"P")+a;if(!p(a,f)){if(!r(a))return"F";if(!b)return"E";s(a,f,++t)}return"O"+a[f]}function d(b,c){var a,d=j(c);if("F"!==d)return b._i[d];for(a=b._f;a;a=a.n)if(a.k==c)return a}var i=b(2),s=b(11),n=b(21),g=b(101),q=b(116),l=b(23),m=b(115),e=b(99),f=b(14)("id"),p=b(9),k=b(8),r=Object.isExtensible||k,h=b(3),c=h?"_s":"size",t=0;o.exports={getConstructor:function(f,g,j,k){var e=f(function(b,d){q(b,e,g),b._i=i.create(null),b._f=a,b._l=a,b[c]=0,d!=a&&m(d,j,b[k],b)});return b(118)(e.prototype,{clear:function(){for(var d=this,e=d._i,b=d._f;b;b=b.n)b.r=!0,b.p&&(b.p=b.p.n=a),delete e[b.i];d._f=d._l=a,d[c]=0},"delete":function(g){var b=this,a=d(b,g);if(a){var e=a.n,f=a.p;delete b._i[a.i],a.r=!0,f&&(f.n=e),e&&(e.p=f),b._f==a&&(b._f=e),b._l==a&&(b._l=f),b[c]--}return!!a},forEach:function(b){for(var a,c=n(b,arguments[1],3);a=a?a.n:this._f;)for(c(a.v,a.k,this);a&&a.r;)a=a.p},has:function(a){return!!d(this,a)}}),h&&i.setDesc(e.prototype,"size",{get:function(){return l(this[c])}}),e},def:function(b,f,i){var g,h,e=d(b,f);return e?e.v=i:(b._l=e={i:h=j(f,!0),k:f,v:i,p:g=b._l,n:a,r:!1},b._f||(b._f=e),g&&(g.n=e),b[c]++,"F"!==h&&(b._i[h]=e)),b},getEntry:d,setStrong:function(c,d,f){b(81)(c,d,function(b,c){this._t=b,this._k=c,this._l=a},function(){for(var c=this,d=c._k,b=c._l;b&&b.r;)b=b.p;return c._t&&(c._l=b=b?b.n:c._t._f)?"keys"==d?e(0,b.k):"values"==d?e(0,b.v):e(0,[b.k,b.v]):(c._t=a,e(1))},f?"entries":"values",!f,!0),g(c),g(b(16)[d])}}},function(d,j,b){var e=b(6),c=b(15),f=b(84),g=b(115),h=b(116),i=b(18);d.exports=function(k,s,v,u,l,m){function n(a){var c=j[a];b(17)(j,a,"delete"==a?function(a){return c.call(this,0===a?0:a)}:"has"==a?function(a){return c.call(this,0===a?0:a)}:"get"==a?function(a){return c.call(this,0===a?0:a)}:"add"==a?function(a){return c.call(this,0===a?0:a),this}:function(a,b){return c.call(this,0===a?0:a,b),this})}var p=e[k],d=p,o=l?"set":"add",j=d&&d.prototype,t={};if(i(d)&&(m||!f&&j.forEach&&j.entries)){var r,q=new d,w=q[o](m?{}:-0,1);b(95)(function(a){new d(a)})||(d=s(function(e,c){h(e,d,k);var b=new p;return c!=a&&g(c,l,b[o],b),b}),d.prototype=j,j.constructor=d),m||q.forEach(function(b,a){r=1/a===-(1/0)}),r&&(n("delete"),n("has"),l&&n("get")),(r||w!==q)&&n(o),m&&j.clear&&delete j.clear}else d=u.getConstructor(s,k,l,o),b(118)(d.prototype,v);return b(10).set(d,k),t[k]=d,c(c.G+c.W+c.F*(d!=p),t),m||u.setStrong(d,k,l),d}},function(c,d,a){var b=a(120);a(121)("Set",function(a){return function(){return a(this,arguments[0])}},{add:function(a){return b.def(this,a=0===a?0:a,a)}},b)},function(l,k,a){var j=a(2),b=a(124),c=a(8),i=a(9),f=b.frozenStore,g=b.WEAK,h=Object.isExtensible||c,e={},d=a(121)("WeakMap",function(a){return function(){return a(this,arguments[0])}},{get:function(a){if(c(a)){if(!h(a))return f(this).get(a);if(i(a,g))return a[g][this._i]}},set:function(a,c){return b.def(this,a,c)}},b,!0,!0);7!=(new d).set((Object.freeze||Object)(e),7).get(e)&&j.each.call(["delete","has","get","set"],function(b){var e=d.prototype,g=e[b];a(17)(e,b,function(a,d){if(c(a)&&!h(a)){var e=f(this)[b](a,d);return"set"==b?this:e}return g.call(this,a,d)})})},function(l,s,b){function e(a){return a._l||(a._l=new i)}function i(){this.a=[]}function f(a,b){return q(a.a,function(a){return a[0]===b})}var m=b(11),n=b(26),o=b(116),k=b(115),j=b(20),c=b(14)("weak"),g=b(8),d=b(9),h=Object.isExtensible||g,q=j(5),p=j(6),r=0;i.prototype={get:function(c){var b=f(this,c);return b?b[1]:a},has:function(a){return!!f(this,a)},set:function(a,b){var c=f(this,a);c?c[1]=b:this.a.push([a,b])},"delete":function(b){var a=p(this.a,function(a){return a[0]===b});return~a&&this.a.splice(a,1),!!~a}},l.exports={getConstructor:function(i,j,l,m){var f=i(function(b,c){o(b,f,j),b._i=r++,b._l=a,c!=a&&k(c,l,b[m],b)});return b(118)(f.prototype,{"delete":function(a){return g(a)?h(a)?d(a,c)&&d(a[c],this._i)&&delete a[c][this._i]:e(this)["delete"](a):!1},has:function(a){return g(a)?h(a)?d(a,c)&&d(a[c],this._i):e(this).has(a):!1}}),f},def:function(b,a,f){return h(n(a))?(d(a,c)||m(a,c,{}),a[c][b._i]=f):e(b).set(a,f),b},frozenStore:e,WEAK:c}},function(c,d,a){var b=a(124);a(121)("WeakSet",function(a){return function(){return a(this,arguments[0])}},{add:function(a){return b.def(this,a,!0)}},b,!1,!0)},function(d,e,b){var a=b(15),c=Function.apply;a(a.S,"Reflect",{apply:function(a,b,d){return c.call(a,b,d)}})},function(h,i,a){var d=a(2),b=a(15),e=a(22),c=a(8),f=Function.apply,g=Function.bind||a(16).Function.prototype.bind;b(b.S,"Reflect",{construct:function(a,b){if(arguments.length<3)return new(g.apply(a,[null].concat(b)));var h=e(arguments[2]).prototype,i=d.create(c(h)?h:Object.prototype),j=f.call(a,i,b);return c(j)?j:i}})},function(e,f,a){var c=a(2),b=a(15),d=a(26);b(b.S,"Reflect",{defineProperty:function(a,b,e){d(a);try{return c.setDesc(a,b,e),!0}catch(f){return!1}}})},function(e,f,a){var b=a(15),c=a(2).getDesc,d=a(26);b(b.S,"Reflect",{deleteProperty:function(a,b){var e=c(d(a),b);return e&&!e.configurable?!1:delete a[b]}})},function(i,j,b){function e(b){this._t=g(b),this._k=a,this._i=0}var c=b(15),f=b(12)("iterator"),g=b(26),d=b(6).Reflect,h=!(d&&d.enumerate&&f in d.enumerate({}));b(83)(e,"Object",function(){var d,b=this,c=b._k;if(c==a){b._k=c=[];for(d in b._t)c.push(d)}do if(b._i>=c.length)return{value:a,done:!0};while(!((d=c[b._i++])in b._t));return{value:d,done:!1}}),c(c.S+c.F*h,"Reflect",{enumerate:function(a){return new e(a)}})},function(h,i,b){var c=b(2),e=b(9),d=b(15),f=b(8),g=b(26);d(d.S,"Reflect",{get:function j(b,h){var d,j,i=arguments.length<3?b:arguments[2];return g(b)===i?b[h]:(d=c.getDesc(b,h))?e(d,"value")?d.value:d.get!==a?d.get.call(i):a:f(j=c.getProto(b))?j(j,h,i):a}})},function(e,f,a){var c=a(2),b=a(15),d=a(26);b(b.S,"Reflect",{getOwnPropertyDescriptor:function(a,b){return c.getDesc(d(a),b)}})},function(e,f,a){var b=a(15),c=a(2).getProto,d=a(26);b(b.S,"Reflect",{getPrototypeOf:function(a){return c(d(a))}})},function(c,d,b){var a=b(15);a(a.S,"Reflect",{has:function(a,b){return b in a}})},function(e,f,a){var b=a(15),c=a(26),d=Object.isExtensible||a(8);b(b.S,"Reflect",{isExtensible:function(a){return d(c(a))}})},function(c,d,a){var b=a(15);b(b.S,"Reflect",{ownKeys:a(137)})},function(c,e,a){var b=a(2),d=a(26);c.exports=function(a){var c=b.getNames(d(a)),e=b.getSymbols;return e?c.concat(e(a)):c}},function(e,f,a){var b=a(15),d=a(26),c=Object.preventExtensions;b(b.S,"Reflect",{preventExtensions:function(a){d(a);try{return c&&c(a),!0}catch(b){return!1}}})},function(i,j,b){var c=b(2),g=b(9),d=b(15),e=b(4),h=b(26),f=b(8);d(d.S,"Reflect",{set:function k(j,i,k){var l,m,d=arguments.length<4?j:arguments[3],b=c.getDesc(h(j),i);if(!b){if(f(m=c.getProto(j)))return k(m,i,k,d);b=e(0)}return g(b,"value")?b.writable!==!1&&f(d)?(l=c.getDesc(d,i)||e(0),l.value=k,c.setDesc(d,i,l),!0):!1:b.set===a?!1:(b.set.call(d,k),!0)}})},function(d,e,b){var c=b(15),a=b(42);a&&c(c.S,"Reflect",{setPrototypeOf:function(b,c){a.check(b,c);try{return a.set(b,c),!0}catch(d){return!1}}})},function(d,e,a){var b=a(15),c=a(29)(!0);b(b.P,"Array",{includes:function(a){return c(this,a,arguments[1])}}),a(98)("includes")},function(d,e,a){var b=a(15),c=a(80)(!0);b(b.P,"String",{at:function(a){return c(this,a)}})},function(d,e,a){var b=a(15),c=a(144);b(b.P,"String",{lpad:function(a){return c(this,a,arguments[1],!0)}})},function(c,g,b){var d=b(25),e=b(89),f=b(23);c.exports=function(l,h,i,j){var g=f(l)+"";if(h===a)return g;var m=d(h),c=m-g.length;if(0>c||c===1/0)throw new RangeError("Cannot satisfy string length "+h+" for string: "+g);var k=i===a?" ":i+"",b=e.call(k,Math.ceil(c/k.length));return b.length>c&&(b=j?b.slice(b.length-c):b.slice(0,c)),j?b.concat(g):g.concat(b)}},function(d,e,a){var b=a(15),c=a(144);b(b.P,"String",{rpad:function(a){return c(this,a,arguments[1],!1)}})},function(d,e,a){var b=a(15),c=a(30)(/[\\^$*+?.()|[\]{}]/g,"\\$&");b(b.S,"RegExp",{escape:function(a){return c(a)}})},function(g,h,a){var b=a(2),c=a(15),d=a(137),e=a(27),f=a(4);c(c.S,"Object",{getOwnPropertyDescriptors:function(k){for(var a,g,h=e(k),l=b.setDesc,m=b.getDesc,i=d(h),c={},j=0;i.length>j;)g=m(h,a=i[j++]),a in c?l(c,a,f(0,g)):c[a]=g;return c}})},function(d,e,a){var b=a(15),c=a(149)(!1);b(b.S,"Object",{values:function(a){return c(a)}})},function(b,e,a){var c=a(2),d=a(27);b.exports=function(a){return function(j){var i,e=d(j),f=c.getKeys(e),g=f.length,b=0,h=Array(g);if(a)for(;g>b;)h[b]=[i=f[b++],e[i]];else for(;g>b;)h[b]=e[f[b++]];return h}}},function(d,e,a){var b=a(15),c=a(149)(!0);b(b.S,"Object",{entries:function(a){return c(a)}})},function(c,d,a){var b=a(15);b(b.P,"Map",{toJSON:a(152)("Map")})},function(b,e,a){var c=a(115),d=a(10).classof;b.exports=function(a){return function(){if(d(this)!=a)throw TypeError(a+"#toJSON isn't generic");var b=[];return c(this,!1,b.push,b),b}}},function(c,d,a){var b=a(15);b(b.P,"Set",{toJSON:a(152)("Set")})},function(d,e,b){var a=b(15),c=b(117);a(a.G+a.B,{setImmediate:c.set,clearImmediate:c.clear})},function(l,k,a){a(97);var h=a(6),i=a(11),c=a(82),b=a(12)("iterator"),d=h.NodeList,e=h.HTMLCollection,j=d&&d.prototype,g=e&&e.prototype,f=c.NodeList=c.HTMLCollection=c.Array;!d||b in j||i(j,b,f),!e||b in g||i(g,b,f)},function(k,j,a){function d(a){return e?function(b,c){return a(g(h,[].slice.call(arguments,2),i(b)?b:Function(b)),c)}:a}var c=a(6),b=a(15),g=a(19),h=a(157),i=a(18),f=c.navigator,e=!!f&&/MSIE .\./.test(f.userAgent);b(b.G+b.B+b.F*e,{setTimeout:d(c.setTimeout),setInterval:d(c.setInterval)})},function(c,f,a){var d=a(158),b=a(19),e=a(22);c.exports=function(){for(var h=e(this),a=arguments.length,c=Array(a),f=0,i=d._,g=!1;a>f;)(c[f]=arguments[f++])===i&&(g=!0);return function(){var d,j=this,k=arguments.length,e=0,f=0;if(!g&&!k)return b(h,c,j);if(d=c.slice(),g)for(;a>e;e++)d[e]===i&&(d[e]=arguments[f++]);for(;k>f;)d.push(arguments[f++]);return b(h,d,j)}}},function(a,c,b){a.exports=b(6)},function(D,C,b){function g(b){var c=f.create(null);return b!=a&&(w(b)?v(b,!0,function(a,b){c[a]=b}):s(c,b)),c}function m(a,b){this._t=j(a),this._a=k(a),this._i=0,this._k=b}function i(a){return function(b){return new m(b,a)}}function o(a,b){return"function"==typeof a?a:b}function c(b){var e=1==b,c=4==b;return function(m,n,q){var f,i,h,r=p(n,q,3),l=j(m),k=e||7==b||2==b?new(o(this,g)):a;for(f in l)if(d(l,f)&&(i=l[f],h=r(i,f,m),b))if(e)k[f]=h;else if(h)switch(b){case 2:k[f]=i;break;case 3:return!0;case 5:return i;case 6:return f;case 7:k[h[0]]=h[1]}else if(c)return!1;return 3==b||c?c:k}}function q(g,h,l){u(h);var a,c,b=j(g),e=k(b),i=e.length,f=0;if(arguments.length<3){if(!i)throw TypeError("Reduce of empty object with no initial value");a=b[e[f++]]}else a=Object(l);for(;i>f;)d(b,c=e[f++])&&(a=h(a,b[c],c,g));return a}function t(c,b){return(b==b?l(c,b):n(c,function(a){return a!=a}))!==a}function x(b,c){return d(b,c)?b[c]:a}function z(a,b,c){return A&&b in Object?f.setDesc(a,b,r(0,c)):a[b]=c,a}function B(a){return y(a)&&f.getProto(a)===g.prototype}var f=b(2),p=b(21),e=b(15),r=b(4),s=b(38),l=b(33),u=b(22),v=b(115),w=b(160),h=b(99),y=b(8),j=b(27),A=b(3),d=b(9),k=f.getKeys,n=c(6);g.prototype=null,b(83)(m,"Dict",function(){var c,b=this,e=b._t,f=b._a,g=b._k;do if(b._i>=f.length)return b._t=a,h(1);while(!d(e,c=f[b._i++]));return"keys"==g?h(0,c):"values"==g?h(0,e[c]):h(0,[c,e[c]])}),e(e.G+e.F,{Dict:g}),e(e.S,"Dict",{keys:i("keys"),values:i("values"),entries:i("entries"),forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findKey:n,mapPairs:c(7),reduce:q,keyOf:l,includes:t,has:d,get:x,set:z,isDict:B})},function(b,h,a){var c=a(6),d=a(9),e=a(10).classof,f=a(12)("iterator"),g=a(82);b.exports=a(16).isIterable=function(h){var a=Object(h),b=c.Symbol;return(b&&b.iterator||"@@iterator")in a||f in a||d(g,e(a))}},function(b,f,a){var c=a(26),d=a(18),e=a(94);b.exports=a(16).getIterator=function(a){var b=e(a);if(!d(b))throw TypeError(a+" is not iterable!");return c(b.call(a))}},function(f,g,a){var c=a(6),d=a(16),b=a(15),e=a(157);b(b.G+b.F,{delay:function(a){return new(d.Promise||c.Promise)(function(b){setTimeout(e.call(b,!0),a)})}})},function(d,e,a){var c=a(158),b=a(15);a(16)._=c._=c._||{},b(b.P+b.F,"Function",{part:a(157)})},function(c,d,b){var a=b(15);a(a.S+a.F,"Object",{isObject:b(8)})},function(c,d,b){var a=b(15);a(a.S+a.F,"Object",{classof:b(10).classof})},function(d,e,b){var a=b(15),c=b(167);a(a.S+a.F,"Object",{define:c})},function(c,f,a){var b=a(2),d=a(137),e=a(27);c.exports=function(a,c){for(var f,g=d(e(c)),i=g.length,h=0;i>h;)b.setDesc(a,f=g[h++],b.getDesc(c,f));return a}},function(e,f,a){var b=a(15),c=a(2).create,d=a(167);b(b.S+b.F,"Object",{make:function(a,b){return d(c(a),b)}})},function(c,d,b){b(81)(Number,"Number",function(a){this._l=+a,this._i=0},function(){var b=this._i++,c=!(this._l>b);return{done:c,value:c?a:b}})},function(d,e,b){var a=b(15),c=b(30)(/[&<>"']/g,{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;"});a(a.P+a.F,"String",{escapeHTML:function(){return c(this)}})},function(d,e,b){var a=b(15),c=b(30)(/&(?:amp|lt|gt|quot|apos);/g,{"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'"});a(a.P+a.F,"String",{unescapeHTML:function(){return c(this)}})},function(i,j,b){var f=b(2),g=b(6),c=b(15),h=b(18),d={},e=!0;f.each.call("assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,isIndependentlyComposed,log,markTimeline,profile,profileEnd,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(","),function(b){d[b]=function(){return e&&g.console&&h(console[b])?Function.apply.call(console[b],console,arguments):a}}),c(c.G+c.F,{log:b(38)(d.log,d,{enable:function(){e=!0},disable:function(){e=!1}})})},function(h,i,b){function c(e,c){g.each.call(e.split(","),function(e){c==a&&e in f?d[e]=f[e]:e in[]&&(d[e]=b(21)(Function.call,[][e],c))})}var g=b(2),e=b(15),f=b(16).Array||Array,d={};c("pop,reverse,shift,keys,values,entries",1),c("indexOf,every,some,forEach,map,filter,find,findIndex,includes",3),c("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill"),e(e.S,"Array",d)}]),"undefined"!=typeof module&&module.exports?module.exports=b:"function"==typeof define&&define.amd?define(function(){return b}):c.core=b}(1,1);
var __$m = {}
  , __$gm = function(q, r, w) {
      var f, m = __$m[r];
      if (m === undefined) {
        throw new Error('unknown package module "'+r+'"');
      }
      if (!m.exports) {
        f = m;
        __$m[r] = m = {exports:{}, id:r};
        f(q, m, m.exports);
      }
      return m.exports;
    }
  , __$i = function(m){ return m && m.__esModule ? (m["default"] || m) : m; }
  , __$iw = function(m){ return m && m.__esModule ? m : {"default":m}; }
  , __$im = function(q,r){ return __$i(__$gm(q,r)); }
  , __$imw = function(q,r){ return __$iw(__$gm(q,r)); };
var _$rt = global._$rt = {};

_$rt.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

_$rt.createClass = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

_$rt.slicedToArray = (function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
})();

_$rt.defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

_$rt.asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      var callNext = step.bind(null, "next");
      var callThrow = step.bind(null, "throw");

      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(callNext, callThrow);
        }
      }

      callNext();
    });
  };
};

_$rt.get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

_$rt.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
__$m["term"] = function(require,module,exports){
//#jopkg{"files":["style.js"],"rt":[],"imports":[],"exports":["Style","DummyStyle","StdoutStyle","StderrStyle","StyleForStream","TermSupportsStyle"],"implv":"id5z523a","apiv":"id5z523a","main":false}
var Style={};var DummyStyle={__proto__:Style};var StdoutStyle;var StderrStyle;function StyleForStream(wstream){return wstream.isTTY?Style:DummyStyle;}var TermSupportsStyle=false;var styles={'bold':['1','22'],'italic':['3','23'],'underline':['4','24'],'inverse':['7','27'],'white':['37','39'],'grey':['90','39'],'black':['30','39'],'blue':['34','39'],'cyan':['36','39'],'green':['32','39'],'magenta':['35','39'],'red':['31','39'],'yellow':['33','39'],'boldWhite':['1;37','0;39'],'boldGrey':['1;90','0;39'],'boldBlack':['1;30','0;39'],'boldBlue':['1;34','0;39'],'boldCyan':['1;36','0;39'],'boldGreen':['1;32','0;39'],'boldMagenta':['1;35','0;39'],'boldRed':['1;31','0;39'],'boldYellow':['1;33','0;39'],'italicWhite':['3;37','0;39'],'italicGrey':['3;90','0;39'],'italicBlack':['3;30','0;39'],'italicBlue':['3;34','0;39'],'italicCyan':['3;36','0;39'],'italicGreen':['3;32','0;39'],'italicMagenta':['3;35','0;39'],'italicRed':['3;31','0;39'],'italicYellow':['3;33','0;39']};function _style_js$init(){TermSupportsStyle = process.env.TERM in {'xterm':true,'xterm-color':true,'screen':true,'vt100':true,'vt100-color':true,'xterm-256color':true};var passThrough=function passThrough(s){return s;};passThrough.open = passThrough.close = '';var _loop=function(k){var open='\x1b[' + styles[k][0] + 'm',close='\x1b[' + styles[k][1] + 'm',f=function f(s){return open + s + close;};f.open = open;f.close = close;Style[k] = f;DummyStyle[k] = passThrough;};for(var k in styles) {_loop(k);}{Object.freeze(Style);Object.freeze(DummyStyle);}if(TermSupportsStyle){StdoutStyle = StyleForStream(process.stdout);StderrStyle = StyleForStream(process.stderr);}else {StdoutStyle = DummyStyle;StderrStyle = DummyStyle;}}
_style_js$init();
exports.Style=Style;
exports.DummyStyle=DummyStyle;
exports.StdoutStyle=StdoutStyle;
exports.StderrStyle=StderrStyle;
exports.StyleForStream=StyleForStream;
exports.TermSupportsStyle=TermSupportsStyle;


};
__$m["jo/util"] = function(require,module,exports){
//#jopkg{"files":["G.js","jsidentifier.js","levenshtein.js","parseopt.js","repr.js","srclocation.js","srcerror.js","unique.js"],"rt":[],"imports":["path","term","util"],"exports":["G","RE","JSIdentifier","LevenshteinDistance","ParseOpt","repr","SrcError","SrcErrors","RefError","ImportError","ExportError","SyntaxError","CyclicRefError","SrcLocation","SrcLocationWithProps","Unique"],"implv":"id5z5217","apiv":"id5z5217","main":false}
var _parseopt_js$path = __$i(require("path"))
  , _srcerror_js$util = __$i(require("util"))
  , _repr_js$inspect = _srcerror_js$util.inspect
  , _srclocation_js$term = __$im(require,"term")
  , _srcerror_js$term = _srclocation_js$term;
var G={first:function first(obj){if(obj instanceof Array){return obj[0];}var i=obj[Symbol.iterator];if(!i){throw new Error('non-iterable object');}return i.call(obj).next().value;},last:function last(obj){if(obj instanceof Array){return obj[obj.length - 1];}var c=undefined,L=undefined,i=obj[Symbol.iterator];if(!i){throw new Error('non-iterable object');}i = i.call(obj);while(!(c = i.next()).done) {L = c.value;}return L;},list:function list(obj){if(obj instanceof Array){return obj;}if(obj.size !== undefined){var i=0,a=new Array(obj.size);var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=obj[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var v=_step.value;a[i++] = v;}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}return a;}else {var a=[];var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=obj[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var v=_step2.value;a.push(v);}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}return a;}},matches:function* matches(s,re){if(!(re instanceof RegExp)){re = new RegExp(String(re),'g');}else if(re.lastIndex !== 0 || !re.global){var flags=(re + '').replace(/[\s\S]+\//,'');if(flags.indexOf('g') === -1){flags += 'g';}re = new RegExp(re.source,flags);}var m;{var limit=100000;while(m = re.exec(s)) {if(--limit === 0){throw new Error('infinite loop');}yield m;}}}};
var RE=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|null|this|true|void|with|break|catch|class|const|false|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[\x24A-Z\x5Fa-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC][\x240-9A-Z\x5Fa-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*$/;var JSIdentifier={isValid:function isValid(name){return name.match(RE);},fromModuleRef:function fromModuleRef(s){s = s.replace(/^.*[\/\-]([^\/\-]+)$/,'$1').split(/\.+/);return s.length === 1?s[0]:s[s.length - 2];},fromString:function fromString(s){return String(s).replace(/^[^A-Za-z]+|[^0-9A-Za-z_]/g,'_').replace(/^_+|_+$/g,'');}};
function LevenshteinDistance(a,b){if(a.length == 0){return b.length;}if(b.length == 0){return a.length;}var matrix=[];var i;for(i = 0;i <= b.length;i++) {matrix[i] = [i];}var j;for(j = 0;j <= a.length;j++) {matrix[0][j] = j;}for(i = 1;i <= b.length;i++) {for(j = 1;j <= a.length;j++) {if(b.charAt(i - 1) == a.charAt(j - 1)){matrix[i][j] = matrix[i - 1][j - 1];}else {matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1,Math.min(matrix[i][j - 1] + 1,matrix[i - 1][j] + 1));}}}return matrix[b.length][a.length];}
function ParseOpt(opts,args,usage,prog,hiddenOpts){var optdesc={},nopts=0,helpops='help',opmaxlen=helpops.length;var optvals={},hiddenOptDesc={};var spaces='                                                                 ';var opRE=/^(?:<([^>]+)>)?\s*(.+)\s*$/;Object.keys(opts).forEach(function(op){var m;if(opts[op]){m = opRE.exec(opts[op]);optdesc[op] = {desc:m[2],val:m[1]};}else {optdesc[op] = {desc:''};}opmaxlen = Math.max(opmaxlen,op.length + (optdesc[op].val?(' <' + optdesc[op].val + '>').length:0));++nopts;});if(hiddenOpts)Object.keys(hiddenOpts).forEach(function(op){var m;if(hiddenOpts[op]){m = opRE.exec(hiddenOpts[op]);hiddenOptDesc[op] = {desc:m[2],val:m[1]};}else {hiddenOptDesc[op] = {desc:''};}});var showusage=function showusage(error){if(error){if(typeof error === 'string'){process.stderr.write(prog + ': ' + error + ". See '" + prog + " -help'\n");}else {process.stderr.write(prog + ': ' + (error.stack || String(error)) + '\n');}}else {var s=usage?usage:nopts?'{{prog}} [options] [arg...]\noptions:\n{{options}}\n':'{{prog}} [arg...]\n',vars={prog:prog,options:nopts?'  ' + ['-' + helpops + spaces.substr(0,opmaxlen - helpops.length) + '  Show help'].concat(Object.keys(optdesc).map(function(op){var s=op;if(optdesc[op].val){s += '=<' + optdesc[op].val + '>';}return '-' + s + spaces.substr(0,opmaxlen - s.length) + (optdesc[op].desc?'  ' + optdesc[op].desc:'');})).join('\n  '):''};s = s.replace(/\{\{([^\}]+)\}\}/g,function(a,v){return vars[v] || a;});process.stderr.write(s);}process.exit(error?2:0);};if(typeof usage === 'function'){showusage = usage;}var i,a,v,arg,op,argRE=/^\-\-?([^\s=]+)(?:=(.+))?$/;for(i = 0;i !== args.length;++i) {if(!(arg = args[i]) || !(a = argRE.exec(arg))){break;}v = a[2];a = a[1];if(!optdesc[a] && a === 'h' || a === 'help'){return showusage();}op = optdesc[a] || hiddenOptDesc[a];if(!op){return showusage('unknown option ' + arg);}if(op.val){if(v){optvals[a] = v;}else if(!args[i + 1] || args[i + 1][0] === '-' || !(optvals[a] = args[++i])){return showusage('missing <' + op.val + '> for ' + arg);}}else {optvals[a] = true;}}args = args.slice(i);return [optvals,args,showusage];}ParseOpt.prog = function(argv){var prog=process.env._;if(!prog){prog = _parseopt_js$path.relative(process.cwd(),argv[0].indexOf('/node') === -1?argv[0]:argv[1]);}return [prog,argv.slice(2)];};
function repr(obj){var depth=arguments.length <= 1 || arguments[1] === undefined?4:arguments[1];var colors=arguments.length <= 2 || arguments[2] === undefined?true:arguments[2];return _repr_js$inspect(obj,{depth:depth,colors:colors});}
function SrcLocation(node,file){var filename=file?file.pkg?file.pkg.id + '/' + file.name:file.relpath:null;return Object.create(SrcLocation.prototype,{filename:{value:filename,enumerable:true},code:{value:file?file.code:null,enumerable:true},range:{value:node && node.start !== undefined?[node.start,node.end]:[0,0],enumerable:true},startLine:{value:node && node.loc?node.loc.start.line:undefined,enumerable:true},startColumn:{value:node && node.loc?node.loc.start.column:undefined,enumerable:true},endLine:{value:node && node.loc?node.loc.end.line:undefined,enumerable:true},endColumn:{value:node && node.loc?node.loc.end.column:undefined,enumerable:true}});}function SrcLocationWithProps(_ref){var filename=_ref.filename;var code=_ref.code;var range=_ref.range;var startLine=_ref.startLine;var startColumn=_ref.startColumn;var endLine=_ref.endLine;var endColumn=_ref.endColumn;return Object.create(SrcLocation.prototype,{filename:{value:filename,enumerable:true},code:{value:code,enumerable:true},range:{value:range || [0,0],enumerable:true},startLine:{value:startLine,enumerable:true},startColumn:{value:startColumn,enumerable:true},endLine:{value:endLine,enumerable:true},endColumn:{value:endColumn,enumerable:true}});}var kSpaces='                                                                             ' + '                                                                             ';var kCaretExts='~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~' + '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~';function fill(length,fillstr){return fillstr.substr(0,length);}function rfill(s,length,fillstr){return s + fill(length - s.length,fillstr || kSpaces);}function lfill(s,length,fillstr){return fill(length - s.length,fillstr || kSpaces) + s;}function findSourceIndent(lines,B,A){var i,m,b=B,a=B,line;for(i = 0;i !== B + A;++i) {line = i % 2 === 0?lines[--b]:lines[++a];if((m = line.match(/[^\s]/)) !== null){return m.index;}}return (m = lines[B].match(/[^\s]/)) !== null?m.index:0;}function abbreviateSourceLines(lines,maxlines,startLineno){if(lines.length <= maxlines){return lines.map(function(line,i){return {code:line,no:startLineno + i};});}var endLineno=startLineno + lines.length;var S=_srclocation_js$term.StderrStyle;var B=Math.ceil(maxlines / 2);var A=Math.floor(maxlines / 2);var indentLevel=findSourceIndent(lines,B,A);var reducedLines=lines.slice(0,B).map(function(line,i){return {code:line,no:startLineno + i};});reducedLines.push({code:fill(indentLevel,kSpaces) + S.grey('...'),no:0});reducedLines = reducedLines.concat(lines.slice(lines.length - A).map(function(line,i){return {code:line,no:endLineno - (A - i)};}));return reducedLines;}function limitLineLength(line,maxlen,suffix){var S=_srclocation_js$term.StderrStyle;return line.length <= maxlen?line:line.substr(0,maxlen - suffix.length) + S.grey(suffix);}SrcLocation.prototype.formatFilename = function(){var caretColor=arguments.length <= 0 || arguments[0] === undefined?'white':arguments[0];var S=_srclocation_js$term.StderrStyle;var msg=this.filename?S.bold(S[caretColor](this.filename)):'';var lc=this.formatLineColumn();return msg !== ''?msg + S.grey(':') + lc:lc;};SrcLocation.prototype.formatLineColumn = function(){return this.startLine !== undefined?_srclocation_js$term.StderrStyle.grey(this.startLine + (this.startColumn !== undefined?':' + this.startColumn:'')):'';};SrcLocation.prototype.formatCode = function(){var caretColor=arguments.length <= 0 || arguments[0] === undefined?'white':arguments[0];var linesB=arguments.length <= 1 || arguments[1] === undefined?2:arguments[1];var linesA=arguments.length <= 2 || arguments[2] === undefined?0:arguments[2];var S=_srclocation_js$term.StderrStyle,code=this.code;var i,n,start,end;var maxLineLen=100,lineLimitSuffix='...';var lineNoFillz=String(this.endLine + linesA).length;var caret=' ' + S.bold(S[caretColor]('â')) + '  ',caretSpace='    ';caretColor = S[caretColor];var fmtline=function fmtline(caret,color,lineno,srcline,hintCaretEndPos){lineno = lfill(lineno > 0?'' + lineno:'',lineNoFillz);var maxlen=Math.max(hintCaretEndPos?hintCaretEndPos + lineLimitSuffix.length:0,maxLineLen);srcline = limitLineLength(srcline,maxlen,lineLimitSuffix);return caret + S[color](lineno + '  ' + S.bold(srcline));};var ctxline=(function(lineno,start,end){var srcline=code.substring(start === -1?0:start + 1,end === -1?code.length:end);return fmtline(caretSpace,'grey',lineno,srcline);}).bind(this);var lines=[];var errLineStart=code.lastIndexOf('\n',this.range[0]);var errLineEnd=code.indexOf('\n',this.range[1]);if(linesB !== 0){start = errLineStart;for(i = 0;i !== linesB && start !== -1;++i) {end = start;start = code.lastIndexOf('\n',end - 1);lines[linesB - i - 1] = ctxline(this.startLine - i - 1,start,end);}lines = lines.filter(function(line){return !!line;});}var interestingLines=code.substring(errLineStart === -1?0:errLineStart + 1,errLineEnd === -1?code.length:errLineEnd).split('\n');var m,indentLevel;if(interestingLines.length > 1){abbreviateSourceLines(interestingLines,4,this.startLine).forEach(function(line,i){if(i === 0){lines.push(fmtline(caret,'boldWhite',line.no,line.code));}else {lines.push(fmtline(caretSpace,'white',line.no,line.code));}});}else {lines.push(fmtline(caret,'white',this.startLine,interestingLines[0],this.endColumn));if(this.startColumn !== 0 || this.startColumn !== this.endColumn){var caret='      ' + fill(lineNoFillz,kSpaces) + S.bold(caretColor(lfill('^',this.startColumn + 1)));if(this.endColumn - 1 > this.startColumn){caret += S.bold(caretColor(fill(this.endColumn - 1 - this.startColumn,kCaretExts)));}lines.push(caret);}}end = errLineEnd;for(i = 0;i !== linesA && start !== -1;++i) {start = end;end = code.indexOf('\n',start + 1);lines.push(ctxline(this.startLine + i + 1,start,end));}return lines;};
function SrcError(name,srcloc,message,suggestion,related){if(!(this instanceof SrcError)){return new SrcError(name,srcloc,message,suggestion,related);}Error.call(this,message);Error.captureStackTrace(this,SrcError);this.name = name;this.message = message;this._message = message;this.srcloc = srcloc;this.suggestion = suggestion;this.related = related;}_srcerror_js$util.inherits(SrcError,Error);function SrcErrors(errors){return Object.create(SrcErrors.prototype,{errors:{value:errors,enumerable:true}});}function RefError(file,node,message,related){return SrcError('RefError',SrcLocation(node,file),message,null,related);}function ImportError(file,node,message,fixSuggestion,related){return SrcError('ImportError',SrcLocation(node,file),message,fixSuggestion,related);}function ExportError(file,node,message,fixSuggestion,related){return SrcError('ExportError',SrcLocation(node,file),message,fixSuggestion,related);}function SyntaxError(file,node,message,fixSuggestion,related){return SrcError('SyntaxError',SrcLocation(node,file),message,fixSuggestion,related);}function CyclicRefError(pkg,name,fileA,fileB,deps,onlyClasses){var errs=[{message:'"' + String(name) + '" defined here',srcloc:SrcLocation(fileB.definedIDs[name].identifier,fileB)},{message:'"' + String(name) + '" referenced here',srcloc:SrcLocation(fileA.unresolvedIDs[name].node,fileA)}];deps.forEach(function(dep){errs = errs.concat([{message:'"' + String(dep.name) + '" defined here',srcloc:SrcLocation(dep.binding.identifier,fileA)},{message:'"' + String(dep.name) + '" referenced here',srcloc:SrcLocation(dep.refNode,fileB)}]);});return RefError(null,null,'cyclic dependency between source files "' + String(fileA.name) + '" and "' + String(fileB.name) + '"' + (' in package "' + String(pkg.id) + '"'),errs);}function styleCodeQuotes(s){var S=_srcerror_js$term.StderrStyle;return S.enabled?s.replace(/`([^`]*)`/g,function(_,m){return S.cyan(m);}):s;}SrcError.canFormat = function(err){return err instanceof SrcError || err instanceof SrcErrors || err.lineNumber !== undefined && err.column !== undefined && err.index !== undefined;};SrcError.formatSource = function(srcloc,message,errname,caretColor,linesB,linesA,indent){var S=_srcerror_js$term.StderrStyle;if(!indent)indent = '';var msg=indent;if(srcloc && srcloc.filename){msg += srcloc.formatFilename(caretColor) + ' ';}msg += S.bold(styleCodeQuotes(message));if(errname){msg += ' ' + S.grey('(' + errname + ')');}if(srcloc && srcloc.code && srcloc.startLine !== undefined){msg += '\n' + indent + srcloc.formatCode(caretColor,linesB,linesA).join('\n' + indent);}return msg;};function srclocForError(err){return err.srcloc || SrcLocationWithProps({filename:err.file?err.file.name:err.filename,code:err.file?err.file.code:err.sourceCode,range:[err.index,err.index],startLine:err.lineNumber,startColumn:err.column - 1,endLine:err.lineNumber,endColumn:err.column - 1});}function formatSuggestion(suggestion,indent){return indent + _srcerror_js$term.StderrStyle.bold(styleCodeQuotes(suggestion.replace(/\n/mg,indent))) + '\n';}SrcError.format = function(err,linesB,linesA){if(err instanceof SrcErrors){var v=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=err.errors[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var error=_step.value;v.push(SrcError.format(error));}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}return v.join('\n');}var srcloc=srclocForError(err);var message=SrcError.formatSource(srcloc,err._message || err.message,err.name,'red',linesB,linesA);var suggestion=err.suggestion || err.fixSuggestion;if(suggestion){message += formatSuggestion(suggestion,'\n  ');}if(err.related){(function(){var hasFirstSrcLocMsg=!!srcloc && srcloc.filename;err.related.forEach(function(related){message += '\n' + SrcError.formatSource(related.srcloc,related.message,null,hasFirstSrcLocMsg?'magenta':'red',linesB,linesA,hasFirstSrcLocMsg?'    ':null);var suggestion=related.suggestion || related.fixSuggestion;if(suggestion){message += formatSuggestion(suggestion,'\n    ');}hasFirstSrcLocMsg = true;});})();}return message;};SrcError.makeDiagnostics = function(err){var srcloc;try{srcloc = srclocForError(err);}catch(e) {return [];}return [{srcloc:srcloc,message:err._message || err.message,fixit:err.suggestion || err.fixSuggestion}];};
function Unique(a){var b=[],c,i=a.length;while(i--) {c = a[i];if(b.indexOf(c) === -1){b.push(c);}}return b;}
exports.G=G;
exports.RE=RE;
exports.JSIdentifier=JSIdentifier;
exports.LevenshteinDistance=LevenshteinDistance;
exports.ParseOpt=ParseOpt;
exports.repr=repr;
exports.SrcLocation=SrcLocation;
exports.SrcLocationWithProps=SrcLocationWithProps;
exports.SrcError=SrcError;
exports.SrcErrors=SrcErrors;
exports.RefError=RefError;
exports.ImportError=ImportError;
exports.ExportError=ExportError;
exports.SyntaxError=SyntaxError;
exports.CyclicRefError=CyclicRefError;
exports.Unique=Unique;


};
__$m["tsort"] = function(require,module,exports){
//#jopkg{"files":["dag.js"],"rt":["class-call-check","create-class"],"imports":[],"exports":["DAG"],"implv":"id5z52c4","apiv":"id5z52c4","main":false}
var DAG=(function(){function DAG(){_$rt.classCallCheck(this,DAG);this.nodes = new Map();}_$rt.createClass(DAG,[{key:'add',value:function add(fr,to){var v=this.nodes.get(fr);if(v){if(to){v.add(to);}}else {this.nodes.set(fr,to?new Set().add(to):null);}return this;}},{key:'sort',value:function sort(cyclicCallback){var _this=this;var L=[];var mark=new Map();var visit=function visit(n,edges,pn){var m=mark.get(n);if(m){if(m === true){return;}else {if(cyclicCallback){cyclicCallback(n,pn);}else {throw 'cyclic graph';}}}mark.set(n,1);if(edges){edges.forEach(function(n2){visit(n2,_this.nodes.get(n2),n);});}mark.set(n,true);L.push(n);};var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this.nodes[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var e=_step.value;visit.apply(this,e);}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}return L;}},{key:'toDotString',value:function toDotString(){var s='digraph D {\n';var ids=new Map();var i=0;var visit=function visit(n,nv){if(ids.has(n))return;var id='N' + i++;s += '  ' + id + ' [ label="' + String(n) + '" ]\n';ids.set(n,id);};var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=this.nodes[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var e=_step2.value;visit(e[0]);e[1] && e[1].forEach(visit);}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{var _loop=function(){var e=_step3.value;var h='  ' + ids.get(e[0]);if(e[1]){h += ' -> ';e[1].forEach(function(n2){s += h + ids.get(n2) + '\n';});}else {s += h + '\n';}};for(var _iterator3=this.nodes[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);_iteratorNormalCompletion3 = true) {_loop();}}catch(err) {_didIteratorError3 = true;_iteratorError3 = err;}finally {try{if(!_iteratorNormalCompletion3 && _iterator3['return']){_iterator3['return']();}}finally {if(_didIteratorError3){throw _iteratorError3;}}}s += '}\n';return s;}}]);return DAG;})();
exports.DAG=DAG;


};
__$m["time"] = function(require,module,exports){
//#jopkg{"files":["duration.js"],"rt":["class-call-check","create-class"],"imports":[],"exports":["Duration"],"implv":"id5z52cj","apiv":"id5z52cj","main":false}
var Duration=(function(){function Duration(){_$rt.classCallCheck(this,Duration);}_$rt.createClass(Duration,null,[{key:'parse',value:function parse(s){var d=parseFloat(s);if(s.substr(-2) !== 'ms'){if(s.substr(-1) !== 's'){throw new Error('missing unit in duration ' + s);}d *= 1000;}if(isNaN(d)){throw new Error('invalid duration (not a number)');}if(d <= 0){throw new Error('invalid duration (zero or negative)');}return d;}},{key:'format',value:function format(d){if(d < 1000){return d.toFixed(0) + 'ms';}return (d / 1000).toFixed(3) + 's';}}]);return Duration;})();
exports.Duration=Duration;


};
__$m["jo/transformers"] = function(require,module,exports){
//#jopkg{"files":["plugin.js","filescope.js","init.js"],"rt":["define-property"],"imports":["assert","jo/util","npmjs.com/babel-core","path"],"exports":["FileScope","Init"],"implv":"id5z52al","apiv":"id5z52al","main":false}
var _$$0 = __$im(require,"jo/util")
  , _filescope_js$SrcErrors = _$$0.SrcErrors
  , _filescope_js$RefError = _$$0.RefError
  , _filescope_js$repr = _$$0.repr
  , _init_js$repr = _$$0.repr
  , _init_js$JSIdentifier = _$$0.JSIdentifier
  , _init_js$ImportError = _$$0.ImportError
  , _init_js$SyntaxError = _$$0.SyntaxError
  , _init_js$G = _$$0.G
  , _$$1 = __$i(require("babel-core"))
  , _filescope_js$t = _$$1.types
  , _init_js$t = _$$1.types
  , _init_js$assert = __$i(require("assert")).ok
  , _init_js$path = __$i(require("path"));
function plugin(name,visitor){var options={visitor:visitor};if(visitor.pre){options.pre = visitor.pre;delete visitor.pre;}if(visitor.post){options.post = visitor.post;delete visitor.post;}return function(_ref){var Plugin=_ref.Plugin;var t=_ref.types;return new Plugin(name,options);};}
var FileScope=plugin("jo.fileScope",{IfStatement:function IfStatement(node,parent,scope,file){var test=node.test;if(test.type === 'Identifier' && test.name === '__DEV__' && !scope.hasBinding(test.name)){if(node.consequent.type === 'BlockStatement' && !node.consequent._letReferences){return node.consequent.body;}return node.consequent;}},Identifier:function Identifier(node,parent,scope,file){if(node.name === '__DEV__' && !scope.hasBinding(node.name)){var jo=this.state.opts._joctx;return _filescope_js$t.literal(jo.target.isDevMode);}},MemberExpression:function MemberExpression(node,parent,scope,file){var jo=this.state.opts._joctx;if(jo.file.name === 'build.js'){if(node.object.name === '_core'){console.log('MemberExpression:',_filescope_js$repr(node,2));}}},FunctionDeclaration:function FunctionDeclaration(node,parent,scope,file){if(node.id && node.id.type === 'Identifier' && node.id.name === 'init' && parent.type === 'Program'){var jo=this.state.opts._joctx;node.id = jo.localizeIdentifier(node.id.name);jo.file.initFuncName = node.id.name;}},post:function post(file){var jo=file.opts._joctx;Object.keys(jo.remappedIdentifiers).forEach(function(oldName){var newName=jo.remappedIdentifiers[oldName];file.scope.rename(oldName,newName);});var moduleRefs={};var unusedImports={};Object.keys(file.scope.bindings).forEach(function(name){var b=file.scope.bindings[name];if(b.kind === 'module'){var m=moduleRefs[b.moduleRef];if(!m){moduleRefs[b.moduleRef] = m = {ref:b.moduleRef,count:0,binding:b};}unusedImports[name] = {module:m,binding:b};}});file.scope.rename('babelHelpers','_$rt');var verifyReference=function verifyReference(node,parent,scope){if(jo.verifyReference(node,parent,scope)){var r=unusedImports[node.name];if(r){r.module.count++;unusedImports[node.name] = null;}return true;}return false;};file.scope.traverse(file.scope.block,{enter:function enter(node,parent,scope){if(parent.type === 'BreakStatement'){return;}if(this.isReferencedIdentifier.call({node:node,parent:parent})){verifyReference(node,parent,scope);}}});var defaultExp=jo.module.exports.get('default');if(defaultExp){var visitID=function visitID(node,parent,scope){var name=node.name;if(!(name in jo.target.globals) && !(name in file.scope.globals) && !scope.hasBinding(name)){return jo.remappedIdentifiers[name];}};file.scope.traverse(defaultExp.node,{enter:function enter(node,parent,scope){if(node.type === 'Property'){var newName=visitID(node.value,node,scope);if(newName){if(node.shorthand){var newValueNode=Object.assign({},node.value,{name:newName});node.value = newValueNode;}else {node.value.name = newName;}}verifyReference(node.value,node,scope);}else if(parent.type !== 'Property' && this.isReferencedIdentifier.call({node:node,parent:parent})){var newName=visitID(node,parent,scope);if(newName){node.name = newName;}verifyReference(node,parent,scope);}}});}var errs=undefined;Object.keys(unusedImports).forEach(function(name){var imp=unusedImports[name];if(imp){if(!errs){errs = [];}var origName=jo.originalNameForLocalizedName(name) || name;if(imp.binding.identifier.start){errs.push(_filescope_js$RefError(jo.file,imp.binding.identifier.start?imp.binding.identifier:imp.binding.path.node,'unused import "' + String(origName) + '" from "' + String(imp.module.ref) + '"'));}else {errs.push(_filescope_js$RefError(jo.file,imp.binding.path.node,'unused import "' + String(imp.module.ref) + '"'));}}});if(errs){throw _filescope_js$SrcErrors(errs);}jo.registerIDDefinitions(file.scope);}});
var implicitExportNameRe=/^[A-Z]/;function isImplicitExportName(name){return name.match(implicitExportNameRe);}function resolveRelativeImportRef(ref,node,file,pkg){if(ref === '..' || ref == '.' || ref.endsWith('/..')){throw _init_js$ImportError(file,node.source,'invalid relative import');}else if(ref.startsWith('./') || ref.startsWith('../')){if(!pkg.ref){ref = _init_js$path.join(pkg.dir,ref);}else {ref = _init_js$path.join(pkg.ref,ref);if(!ref.startsWith(pkg.ref)){throw _init_js$ImportError(file,node.source,'relative import outside non-local package');}}}return ref;}var Init=plugin("jo.init",{pre:function pre(file){var jo=file.opts._joctx;file.set("helpersNamespace",jo.target.helpersObjectASTForFile(jo.file));},ImportDeclaration:function ImportDeclaration(node,parent,scope,file){if(node.isType)return;var jo=this.state.opts._joctx;jo.checkIsBeforeFirstNonImport(node);var ref=node.source.value;{_init_js$assert(!!ref);_init_js$assert(ref.indexOf('babel-runtime/') !== 0);}if(ref[0] === '.'){node.source.value = ref = resolveRelativeImportRef(ref,node,jo.file,jo.pkg);}if(node.specifiers.length){for(var i=0,L=node.specifiers.length;i !== L;++i) {var spec=node.specifiers[i];var origName=spec.local.name;if(origName === '_'){spec.local = null;spec.imported = null;file.scope.removeBinding(origName);}else {spec.local = jo.localizeIdentifier(origName);spec.local._origName = origName;if(spec.type !== 'ImportDefaultSpecifier'){spec.imported = Object.assign({},spec.imported);}var b=file.scope.bindings[origName];{_init_js$assert(b);}b.moduleRef = ref;}}}else {(function(){var localName=_init_js$JSIdentifier.fromModuleRef(ref);if(!localName || !_init_js$JSIdentifier.isValid(localName)){throw _init_js$ImportError(jo.file,node.source,'failed to infer module identifier');}file.scope.registerBinding("module",{node:node,isVariableDeclaration:function isVariableDeclaration(){return false;},getBindingIdentifiers:function getBindingIdentifiers(){return _$rt.defineProperty({},localName,[_init_js$t.identifier(localName)]);}});var b=file.scope.bindings[localName];{if(!b){console.log('localName:',localName);}_init_js$assert(b);}b.moduleRef = ref;node.specifiers = [_init_js$t.importSpecifier(jo.localizeIdentifier(localName),null)];})();}jo.imports.push(node);return [];},VariableDeclaration:function VariableDeclaration(node,parent,scope,file){if(parent.type !== 'Program'){return;}var jo=this.state.opts._joctx;jo.registerFirstNonImport(node);var i=undefined,id=undefined,decls=node.declarations,exportDecls=[];for(i = 0;i !== decls.length;++i) {id = decls[i].id;if(isImplicitExportName(id.name)){jo.registerExport(id.name,decls[i].id,true);}}},FunctionDeclaration:function FunctionDeclaration(node,parent,scope,file){if(parent.type !== 'Program'){return;}var jo=this.state.opts._joctx;jo.registerFirstNonImport(node);if(isImplicitExportName(node.id.name)){jo.registerExport(node.id.name,node.id,true);}},ClassDeclaration:function ClassDeclaration(node,parent,scope,file){var jo=this.state.opts._joctx;if(parent.type === 'Program'){jo.registerFirstNonImport(node);if(isImplicitExportName(node.id.name)){jo.registerExport(node.id.name,node.id,true);}}if(!jo.file._classDeclarationIDs){jo.file._classDeclarationIDs = {};}jo.file._classDeclarationIDs[node.id.name] = true;if(node.superClass){if(!jo.file.superclassReferences){jo.file.superclassReferences = {};}jo.file.superclassReferences[node.superClass.name] = node;}},ExportDeclaration:function ExportDeclaration(node,parent,scope,file){var jo=this.state.opts._joctx;jo.registerFirstNonImport(node);var decl=node.declaration;var returnExprs=[];if(node.type === 'ExportNamedDeclaration'){if(decl){if(decl.type === 'VariableDeclaration'){decl.declarations.forEach(function(decl){jo.registerExport(decl.id.name,decl.id);});}else if(decl.type === 'FunctionDeclaration' || decl.type === 'ClassDeclaration'){jo.registerExport(decl.id.name,decl.id);}else {throw new Error('unexpected export declaration ' + decl.type + ': ' + _init_js$repr(decl));}returnExprs.push(decl);}else {{_init_js$assert(node.specifiers.length !== 0);}node.specifiers.forEach(function(spec){jo.registerExport(spec.exported.name,spec.local);});}}else {{_init_js$assert(node.type === 'ExportDefaultDeclaration');}if(decl.type === 'FunctionDeclaration' || decl.type === 'ClassDeclaration'){jo.registerExport('default',decl.id);returnExprs.push(decl);}else {jo.registerExport('default',decl);}}return returnExprs;},CallExpression:function CallExpression(node,parent,scope,file){var jo=this.state.opts._joctx;if(node.callee.name === 'enum' && node.callee.type === 'Identifier'){(function(){if(node.arguments.length === 0){throw _init_js$SyntaxError(jo.file,node,'empty enum');}var helper=jo.requireJoHelper('enum');var helperNode=jo.target.joHelperAccessNode(helper);var enumName=nameForNode(parent);var enumValues=[];var props=[_init_js$t.property('init',_init_js$t.identifier('__proto__'),helperNode)];props = props.concat(node.arguments.map(function(keyNode){if(keyNode.type !== 'Identifier'){var suggestion=undefined;var _name=nameForNode(keyNode);if(_name){if(typeof _name === 'string'){suggestion = _init_js$JSIdentifier.fromString(_name);}else if(typeof _name === 'number' && '' + parseInt(_name) === '' + _name){var prefix=undefined;if(enumName){prefix = _init_js$G.last(_init_js$G.matches(enumName,/^.[^A-Z]*|[A-Z]+[^A-Z]*/g));}suggestion = (prefix || '_') + _name;}}throw _init_js$SyntaxError(jo.file,keyNode,'invalid enum member','Must be an identifier (not a ' + keyNode.type.toLowerCase() + ')' + (suggestion?'. How about ' + jo.log.errstyle.cyan(suggestion) + '?':''));}enumValues.push(keyNode.name);return _init_js$t.property('init',keyNode,_init_js$t.callExpression(_init_js$t.identifier('Symbol'),[_init_js$t.literal(keyNode.name)]));}));if(jo.target.isDevMode && enumName){props.push(_init_js$t.property('init',_init_js$t.memberExpression(helperNode,_init_js$t.identifier('__n')),_init_js$t.literal(enumName),true));}var objExpr=_init_js$t.objectExpression(props);node.callee = _init_js$t.memberExpression(_init_js$t.identifier('Object'),_init_js$t.identifier('freeze'));node.arguments = [objExpr];var enumInfo={name:enumName,values:enumValues};node.joEnum = enumInfo;if(parent.type === 'VariableDeclarator'){parent.id.joEnum = enumInfo;}})();}}});function nameForNode(node){if(node.type === 'Identifier'){return node.name;}else if(node.type === 'Literal'){return node.value;}else if(node.type === 'VariableDeclarator'){return node.id.name;}return null;}
exports.FileScope=FileScope;
exports.Init=Init;


};
__$m["jo/remotectrl"] = function(require,module,exports){
//#jopkg{"files":["msgparse.js","remotectrl.js"],"rt":[],"imports":[],"exports":["SentinelFramedMessageParser","RemoteControl"],"implv":"id5z52d8","apiv":"id5z52d8","main":false}
function SentinelFramedMessageParser(sentinel,onFrame){var buf='';var fn=function fn(chunk){var i=0,p;if(chunk){while((p = chunk.indexOf(sentinel,i)) !== -1) {if(buf.length){buf += chunk.substr(i,p);onFrame(buf);buf = '';}else {onFrame(chunk.substr(i,p));}i = p + sentinel.length;}if(i < chunk.length){buf += chunk.substr(i);}}};fn.start = function(readable){if(fn.readable)throw new Error('already started');fn.readable = readable;fn.readable.setEncoding('utf8');fn.readable.on('data',fn);};fn.stop = function(){fn.readable.removeListener('data',fn);fn.readable = null;};return fn;}
var origConsole={log:console.log,warn:console.warn,error:console.error};var origProcess={send:process.send};function RemoteControl(parentPID,oncommand){return new Promise(function(_resolve,_reject){if(RemoteControl.enabled){return _reject(new Error('remote control is aldready enabled'));}var pendingMessageHandlers=0,stdinDidClose=false;var onStdinEnd=function onStdinEnd(){if(pendingMessageHandlers !== 0){stdinDidClose = true;}else {resolve();}};var heartbeatTimer;var disable=function disable(){clearInterval(heartbeatTimer);process.stdin.removeListener('end',onStdinEnd);for(var k in origConsole) {console[k] = origConsole[k];}process.send = origProcess.send;if(streamReader){streamReader.stop();}RemoteControl.enabled = false;};var resolve=function resolve(){disable();_resolve();};var reject=function reject(err){disable();_reject(err);};var streamReader;if(!oncommand){oncommand = function(msg,cb){process.emit('message',msg);cb();};}process.send = function send(message){process.stdout.write(JSON.stringify(message) + '\n');};streamReader = SentinelFramedMessageParser('\n',function(buf){try{var msg=JSON.parse(buf);if(!msg || typeof msg !== "object" || msg.type === undefined){reject(new Error('received invalid message'));}else {++pendingMessageHandlers;oncommand(msg,function(){if(--pendingMessageHandlers === 0 && stdinDidClose){resolve();}});}}catch(err) {reject(err);}});streamReader.start(process.stdin);process.stdin.once('end',onStdinEnd);if(parentPID && !isNaN(parentPID = parseInt(parentPID)) && parentPID > 0){heartbeatTimer = setInterval(function(){try{process.kill(parentPID,'SIGCHLD');}catch(e) {reject(new Error('parent process not responding'));}},1000);}var send_log=function send_log(level,message){message = message.map(function(v){return typeof v === 'string'?v:JSON.stringify(v);}).join(' ');process.send({type:'log',level:level,message:message});};var slice=function slice(v,n){return Array.prototype.slice.call(v,n);};console.log = function(){send_log('i',slice(arguments));};console.warn = function(){send_log('w',slice(arguments));};console.error = function(){send_log('e',slice(arguments));};RemoteControl.enabled = true;});}
exports.SentinelFramedMessageParser=SentinelFramedMessageParser;
exports.RemoteControl=RemoteControl;


};
__$m["jo/helpers"] = function(require,module,exports){
//#jopkg{"files":["enum.js"],"rt":["class-call-check","create-class"],"imports":["npmjs.com/babel-core"],"exports":["Helper_enum"],"implv":"id5z52dl","apiv":"id5z52dl","main":false}
var _enum_js$t = __$i(require("babel-core")).types;
var Helper_enum=(function(){function Helper_enum(){_$rt.classCallCheck(this,Helper_enum);this._memberID = Object.freeze(_enum_js$t.identifier('jo_enum'));}_$rt.createClass(Helper_enum,[{key:'accessNode',value:function accessNode(rtID){return _enum_js$t.memberExpression(rtID,this._memberID);}},{key:'gen',value:function gen(){var code='{\n  __n: Symbol(),\n  toString: function(){\n    return "[enum "+(this[this.__n] ? this[this.__n] + " {" : "{")+Object.keys(this)+"}]";\n  },\n  toJSON: function() { return Object.keys(this); }\n};';return [code,null];}}]);return Helper_enum;})();
exports.Helper_enum=Helper_enum;


};
__$m["asyncfs"] = function(require,module,exports){
//#jopkg{"files":["asyncfs.js"],"rt":[],"imports":["fs"],"exports":["default"],"implv":"id5z526m","apiv":"id5z526m","main":false}
var _asyncfs_js$fs = __$i(require("fs"));
var slice=Array.prototype.slice;function wrap1_ignoreENOENT(fn){return function(){var args=slice.call(arguments);return new Promise(function(resolve,reject){args.push(function(err,arg1){if(err){if(err.code === 'ENOENT'){resolve(null);}else {reject(err);}}else {resolve(arg1);}});fn.apply(_asyncfs_js$fs,args);});};}function fmterr(err,e,fnname){if(err.code !== undefined){{err.stack = err.message + e.stack.replace(/    at Object\./,'    at asyncfs.');}}return err;}function wrap1(fn,fnname){return function(){var args=Array.prototype.slice.call(arguments);var e=undefined;{e = {toString:function toString(){return '';}};Error.captureStackTrace(e);}return new Promise(function(resolve,reject){args.push(function(err,arg1){if(err){reject(fmterr(err,e,fnname));}else {resolve(arg1);}});fn.apply(_asyncfs_js$fs,args);});};}function wrap2(fn,fnname){return function(){var args=Array.prototype.slice.call(arguments);var e=undefined;{e = {toString:function toString(){return '';}};Error.captureStackTrace(e);}return new Promise(function(resolve,reject){args.push(function(err,arg1,arg2){if(err){reject(fmterr(err,e,fnname));}else {resolve([arg1,arg2]);}});fn.apply(_asyncfs_js$fs,args);});};}function wrap1_err2bool(fn){return function(){var args=Array.prototype.slice.call(arguments);return new Promise(function(resolve,reject){args.push(function(err){resolve(!err);});fn.apply(_asyncfs_js$fs,args);});};}function mkdirs(path){return new Promise(function(resolve,reject){_mkdirs(path,function(err){if(err)reject(err);else resolve();});});}function _mkdirs(path,cb){_asyncfs_js$fs.mkdir(path,function(err){if(!err || err.code === 'EEXIST'){return cb();}else if(err.code === 'ENOENT'){path = require('path').resolve(path);var p=path.lastIndexOf('/');if(p === -1){cb(err);}else {_mkdirs(path.substr(0,p),function(err){if(err){cb(err);}else {_asyncfs_js$fs.mkdir(path,function(err){cb(!err || err.code === 'EEXIST'?null:err);});}});}}else {cb(err);}});}function copy(srcpath,dstpath){return new Promise(function(resolve,reject){var completed=false,cb=function cb(err){if(!completed){completed = true;if(err)reject(err);else resolve();}};var r=_asyncfs_js$fs.createReadStream(srcpath),w=_asyncfs_js$fs.createWriteStream(dstpath);r.once('error',cb);w.once('error',cb);w.once('close',cb);r.pipe(w);});}
exports.__esModule=true;
exports["default"] = {rename:wrap1(_asyncfs_js$fs.rename,'rename'),ftruncate:wrap1(_asyncfs_js$fs.ftruncate,'ftruncate'),truncate:wrap1(_asyncfs_js$fs.truncate,'truncate'),chown:wrap1(_asyncfs_js$fs.chown,'chown'),fchown:wrap1(_asyncfs_js$fs.fchown,'fchown'),lchown:wrap1(_asyncfs_js$fs.lchown,'lchown'),chmod:wrap1(_asyncfs_js$fs.chmod,'chmod'),fchmod:wrap1(_asyncfs_js$fs.fchmod,'fchmod'),lchmod:wrap1(_asyncfs_js$fs.lchmod,'lchmod'),stat:wrap1_ignoreENOENT(_asyncfs_js$fs.stat),lstat:wrap1_ignoreENOENT(_asyncfs_js$fs.lstat),fstat:wrap1_ignoreENOENT(_asyncfs_js$fs.fstat),link:wrap1(_asyncfs_js$fs.link,'link'),symlink:wrap1(_asyncfs_js$fs.symlink,'symlink'),readlink:wrap1(_asyncfs_js$fs.readlink,'readlink'),realpath:wrap1(_asyncfs_js$fs.realpath,'realpath'),unlink:wrap1(_asyncfs_js$fs.unlink,'unlink'),rmdir:wrap1(_asyncfs_js$fs.rmdir,'rmdir'),mkdir:wrap1(_asyncfs_js$fs.mkdir,'mkdir'),mkdirs:mkdirs,readdir:wrap1(_asyncfs_js$fs.readdir,'readdir'),close:wrap1(_asyncfs_js$fs.close,'close'),open:wrap1(_asyncfs_js$fs.open,'open'),utimes:wrap1(_asyncfs_js$fs.utimes,'utimes'),futimes:wrap1(_asyncfs_js$fs.futimes,'futimes'),fsync:wrap1(_asyncfs_js$fs.fsync,'fsync'),write:wrap2(_asyncfs_js$fs.write,'write'),read:wrap2(_asyncfs_js$fs.read,'read'),readFile:wrap1(_asyncfs_js$fs.readFile,'readFile'),writeFile:wrap1(_asyncfs_js$fs.writeFile,'writeFile'),appendFile:wrap1(_asyncfs_js$fs.appendFile,'appendFile'),access:wrap1_err2bool(_asyncfs_js$fs.access),copy:copy,watchFile:_asyncfs_js$fs.watchFile,unwatchFile:_asyncfs_js$fs.unwatchFile,createReadStream:_asyncfs_js$fs.createReadStream,createWriteStream:_asyncfs_js$fs.createWriteStream,Stats:_asyncfs_js$fs.Stats,ReadStream:_asyncfs_js$fs.ReadStream,WriteStream:_asyncfs_js$fs.WriteStream,FSWatcher:_asyncfs_js$fs.FSWatcher,renameAsync:_asyncfs_js$fs.rename,ftruncateAsync:_asyncfs_js$fs.ftruncate,truncateAsync:_asyncfs_js$fs.truncate,chownAsync:_asyncfs_js$fs.chown,fchownAsync:_asyncfs_js$fs.fchown,lchownAsync:_asyncfs_js$fs.lchown,chmodAsync:_asyncfs_js$fs.chmod,fchmodAsync:_asyncfs_js$fs.fchmod,lchmodAsync:_asyncfs_js$fs.lchmod,statAsync:_asyncfs_js$fs.stat,lstatAsync:_asyncfs_js$fs.lstat,fstatAsync:_asyncfs_js$fs.fstat,linkAsync:_asyncfs_js$fs.link,symlinkAsync:_asyncfs_js$fs.symlink,readlinkAsync:_asyncfs_js$fs.readlink,realpathAsync:_asyncfs_js$fs.realpath,unlinkAsync:_asyncfs_js$fs.unlink,rmdirAsync:_asyncfs_js$fs.rmdir,mkdirAsync:_asyncfs_js$fs.mkdir,readdirAsync:_asyncfs_js$fs.readdir,closeAsync:_asyncfs_js$fs.close,openAsync:_asyncfs_js$fs.open,utimesAsync:_asyncfs_js$fs.utimes,futimesAsync:_asyncfs_js$fs.futimes,fsyncAsync:_asyncfs_js$fs.fsync,writeAsync:_asyncfs_js$fs.write,readAsync:_asyncfs_js$fs.read,readFileAsync:_asyncfs_js$fs.readFile,writeFileAsync:_asyncfs_js$fs.writeFile,appendFileAsync:_asyncfs_js$fs.appendFile,watchAsync:_asyncfs_js$fs.watch,existsAsync:_asyncfs_js$fs.exists,accessAsync:_asyncfs_js$fs.access,renameSync:_asyncfs_js$fs.renameSync,ftruncateSync:_asyncfs_js$fs.ftruncateSync,truncateSync:_asyncfs_js$fs.truncateSync,chownSync:_asyncfs_js$fs.chownSync,fchownSync:_asyncfs_js$fs.fchownSync,lchownSync:_asyncfs_js$fs.lchownSync,chmodSync:_asyncfs_js$fs.chmodSync,fchmodSync:_asyncfs_js$fs.fchmodSync,lchmodSync:_asyncfs_js$fs.lchmodSync,statSync:_asyncfs_js$fs.statSync,lstatSync:_asyncfs_js$fs.lstatSync,fstatSync:_asyncfs_js$fs.fstatSync,linkSync:_asyncfs_js$fs.linkSync,symlinkSync:_asyncfs_js$fs.symlinkSync,readlinkSync:_asyncfs_js$fs.readlinkSync,realpathSync:_asyncfs_js$fs.realpathSync,unlinkSync:_asyncfs_js$fs.unlinkSync,rmdirSync:_asyncfs_js$fs.rmdirSync,mkdirSync:_asyncfs_js$fs.mkdirSync,readdirSync:_asyncfs_js$fs.readdirSync,closeSync:_asyncfs_js$fs.closeSync,openSync:_asyncfs_js$fs.openSync,utimesSync:_asyncfs_js$fs.utimesSync,futimesSync:_asyncfs_js$fs.futimesSync,fsyncSync:_asyncfs_js$fs.fsyncSync,writeSync:_asyncfs_js$fs.writeSync,readSync:_asyncfs_js$fs.readSync,readFileSync:_asyncfs_js$fs.readFileSync,writeFileSync:_asyncfs_js$fs.writeFileSync,appendFileSync:_asyncfs_js$fs.appendFileSync,accessSync:_asyncfs_js$fs.accessSync};


};
__$m["jo"] = function(require,module,exports){
//#jopkg{"files":["module.js","logger.js","compile.js","pkg.js","codebuf.js","codebuf2.js","build.js","compilectx.js","env.js","idbinding.js","jo.js","cmd-env.js","mkimport.js","worker.js","cmd-remotectrl.js","srcfile.js","str.js","testrunner.js","workdir.js","worker-cp.js","writecode.js","cmd-build.js","cmd-test.js","nodejs-program.js","nodejs-test-program.js","record.js","target.js","target_browser.js","target_nodejs.js"],"rt":["async-to-generator","class-call-check","create-class","define-property","get","inherits","sliced-to-array"],"imports":["assert","asyncfs","child_process","jo/helpers","jo/remotectrl","jo/transformers","jo/util","npmjs.com/babel-core","npmjs.com/source-map","os","path","term","time","tsort"],"exports":["BuildCtx","BuildCmd","EnvCmd","RemoteControlCmd","TestCmd","CodeBuffer","CodeBuffer2","ModuleCompiler","DupIDRefError","CompileContext","Env","IDBinding","Commands","Mainv","Logger","Module","TestModule","NPMModule","PrecompiledModule","NodeJSProgram","NodeJSTestProgram","Pkg","BuiltInPkg","NPMPkg","SrcFile","TARGET_MODE_DEV","TARGET_MODE_RELEASE","Targets","TargetOptions","GLOBAL_STD","GLOBAL_DEPRECATED","GLOBAL_UNSAFE","GLOBAL_EXPERIMENTAL","GLOBAL_USER","Target","BrowserTarget","NodeJSTarget","TestRunner","WorkDir"],"implv":"id5z51s6","apiv":"id5z51s6","main":false}
var _module_js$fs = __$im(require,"asyncfs")
  , _compile_js$fs = _module_js$fs
  , _pkg_js$fs = _module_js$fs
  , _env_js$fs = _module_js$fs
  , _workdir_js$fs = _module_js$fs
  , _writecode_js$fs = _module_js$fs
  , _nodejs_program_js$fs = _module_js$fs
  , _target_browser_js$fs = _module_js$fs
  , _module_js$path = __$i(require("path"))
  , _compile_js$path = _module_js$path
  , _pkg_js$path = _module_js$path
  , _codebuf_js$path = _module_js$path
  , _build_js$path = _module_js$path
  , _env_js$path = _module_js$path
  , _writecode_js$path = _module_js$path
  , _nodejs_program_js$path = _module_js$path
  , _target_browser_js$path = _module_js$path
  , _target_nodejs_js$path = _module_js$path
  , _compile_js$assert = __$i(require("assert"))
  , _module_js$assert = _compile_js$assert.ok
  , _codebuf2_js$assert = _compile_js$assert
  , _build_js$assert = _compile_js$assert
  , _compilectx_js$assert = _compile_js$assert.ok
  , _nodejs_program_js$assert = _compile_js$assert
  , _$$0 = __$im(require,"jo/util")
  , _module_js$G = _$$0.G
  , _compile_js$SrcErrors = _$$0.SrcErrors
  , _compile_js$RefError = _$$0.RefError
  , _compile_js$CyclicRefError = _$$0.CyclicRefError
  , _compile_js$SrcLocation = _$$0.SrcLocation
  , _compile_js$Unique = _$$0.Unique
  , _compile_js$LevenshteinDistance = _$$0.LevenshteinDistance
  , _pkg_js$SrcError = _$$0.SrcError
  , _codebuf_js$SrcLocation = _$$0.SrcLocation
  , _build_js$SrcLocation = _$$0.SrcLocation
  , _compilectx_js$repr = _$$0.repr
  , _compilectx_js$SrcError = _$$0.SrcError
  , _compilectx_js$ImportError = _$$0.ImportError
  , _compilectx_js$ExportError = _$$0.ExportError
  , _compilectx_js$RefError = _$$0.RefError
  , _compilectx_js$SrcLocation = _$$0.SrcLocation
  , _env_js$repr = _$$0.repr
  , _jo_js$ParseOpt = _$$0.ParseOpt
  , _cmd_remotectrl_js$SrcError = _$$0.SrcError
  , _cmd_build_js$Unique = _$$0.Unique
  , _target_js$Unique = _$$0.Unique
  , _logger_js$term = __$im(require,"term")
  , _compile_js$term = _logger_js$term
  , _compile_js$babel = __$i(require("babel-core"))
  , _codebuf_js$t = _compile_js$babel.types
  , _compilectx_js$t = _compile_js$babel.types
  , _nodejs_program_js$babel = _compile_js$babel
  , _target_js$t = _compile_js$babel.types
  , _compile_js$plugins = __$im(require,"jo/transformers")
  , _compile_js$tsort = __$im(require,"tsort")
  , _$$1 = __$i(require("source-map"))
  , _codebuf_js$SourceMapGenerator = _$$1.SourceMapGenerator
  , _codebuf_js$SourceMapConsumer = _$$1.SourceMapConsumer
  , _codebuf2_js$SourceMapGenerator = _$$1.SourceMapGenerator
  , _codebuf2_js$SourceMapConsumer = _$$1.SourceMapConsumer
  , _$$2 = __$im(require,"time")
  , _build_js$Duration = _$$2.Duration
  , _testrunner_js$Duration = _$$2.Duration
  , _cmd_test_js$Duration = _$$2.Duration
  , _cmd_remotectrl_js$RemoteControl = __$im(require,"jo/remotectrl").RemoteControl
  , _testrunner_js$child_process = __$i(require("child_process"))
  , _testrunner_js$os = __$i(require("os"))
  , _workdir_js$os = _testrunner_js$os
  , _target_js$helpers = __$im(require,"jo/helpers");
var Module=(function(){function Module(_ref){var _ref$filename=_ref.filename;var filename=_ref$filename === undefined?null:_ref$filename;var _ref$stat=_ref.stat;var stat=_ref$stat === undefined?null:_ref$stat;var _ref$code=_ref.code;var code=_ref$code === undefined?null:_ref$code;var _ref$map=_ref.map;var map=_ref$map === undefined?null:_ref$map;_$rt.classCallCheck(this,Module);this.filename = filename;this.stat = stat;this.code = code;this.map = map;this.program = null;this.info = null;this.joHelpers = null;this.exports = new Map();}_$rt.createClass(Module,[{key:'loadStat',value:_$rt.asyncToGenerator(function*(){if(!this.stat){this.stat = yield _module_js$fs.stat(this.filename);}return this.stat;})},{key:'load',value:_$rt.asyncToGenerator(function*(){var m=this;yield this.loadStat();if(m.stat && !m.code){m.code = yield _module_js$fs.readFile(m.filename,{encoding:'utf8'});if(!m.info){m.info = Module.parseInfo(m.code);}}if(!m.map && m.code){m.map = yield Module.loadSourceMap(m.code,m.filename);}})},{key:'write',value:_$rt.asyncToGenerator(function*(){var mode=arguments.length <= 0 || arguments[0] === undefined?438:arguments[0];writeCode({code:this.code,map:this.map,stream:this.filename === '-'?process.stdout:null,filename:this.filename === '-'?null:this.filename,filemode:mode});})},{key:'registerJoHelper',value:function registerJoHelper(name){if(!this.joHelpers){this.joHelpers = new Set();}this.joHelpers.add(name);}},{key:'exportedNames',value:function exportedNames(){return this.exports.keys();}},{key:'helperNames',value:function helperNames(srcfiles){var rt={};srcfiles.forEach(function(f){f.parsed.metadata.usedHelpers.forEach(function(ref){rt[ref] = true;});});if(this.joHelpers){this.joHelpers.forEach(function(ref){rt['jo.' + ref] = true;});}return Object.keys(rt).sort();}},{key:'makeInfo',value:function makeInfo(srcfiles,importRefs){return {files:srcfiles.map(function(f){return f.name;}),rt:this.helperNames(srcfiles),imports:Object.keys(importRefs).sort(),exports:_module_js$G.list(this.exportedNames()),implv:Date.now().toString(36),apiv:Date.now().toString(36),main:this.hasMainFunc};}},{key:'hasMainFunc',get:function get(){return !!(this.mainFunc || this.info && this.info.main);}}],[{key:'loadSourceMap',value:_$rt.asyncToGenerator(function*(code,filename){var prefix='//#sourceMappingURL=';var p=code.lastIndexOf(prefix);if(p === -1){return null;}var dataURLPrefix='data:application/json;charset:utf-8;base64,';p += prefix.length;var url=code.substring(p,code.indexOf('\n',p));var scheme='';var x=url.indexOf(':');if(x !== -1){scheme = url.substr(0,x).toLowerCase();}var mapContent=undefined;if(scheme === 'data'){var y=url.indexOf(',');mapContent = new Buffer(url.substr(y + 1),'base64').toString('utf8');}else if(scheme === '' || scheme === 'file'){var mapFilename=scheme === 'file'?url.substr(5):url;if(mapFilename[0] !== '/'){if(filename && filename[0] === '/'){mapFilename = _module_js$path.resolve(filename + '/..',mapFilename);}else {return null;}}mapContent = yield _module_js$fs.readFile(mapFilename,{encoding:'utf8'});}else {throw new Error('unable to featch data for source map url "' + url + '"');}return JSON.parse(mapContent);})},{key:'parseInfo',value:function parseInfo(code){var jopkgStmtPrefix='//#jopkg';var end,begin=code.indexOf(jopkgStmtPrefix);if(begin !== -1){begin += jopkgStmtPrefix.length;end = code.indexOf('\n',begin);}if(begin === -1 || end === -1){return null;}return JSON.parse(code.substring(begin,end));}}]);return Module;})();Module.prototype.typeName = 'module';var TestModule=(function(_Module){_$rt.inherits(TestModule,_Module);function TestModule(){_$rt.classCallCheck(this,TestModule);_$rt.get(Object.getPrototypeOf(TestModule.prototype),'constructor',this).call(this,{});}_$rt.createClass(TestModule,[{key:'exportedNames',value:function exportedNames(){return [];}}]);return TestModule;})(Module);TestModule.prototype.typeName = 'test module';var NPMModule=(function(_Module2){_$rt.inherits(NPMModule,_Module2);function NPMModule(filename){_$rt.classCallCheck(this,NPMModule);_$rt.get(Object.getPrototypeOf(NPMModule.prototype),'constructor',this).call(this,{filename:filename});}_$rt.createClass(NPMModule,[{key:'load',value:_$rt.asyncToGenerator(function*(){this.loadStat();console.log('TODO NPMModule.load()');})}]);return NPMModule;})(Module);NPMModule.prototype.typeName = 'npm module';var PrecompiledModule=(function(_Module3){_$rt.inherits(PrecompiledModule,_Module3);function PrecompiledModule(filename){_$rt.classCallCheck(this,PrecompiledModule);_$rt.get(Object.getPrototypeOf(PrecompiledModule.prototype),'constructor',this).call(this,{filename:filename});}_$rt.createClass(PrecompiledModule,[{key:'copyToIfOutdated',value:_$rt.asyncToGenerator(function*(dstFilename,pkg,target){var _this=this;{_module_js$assert(!!this.filename);}var dstStat;var _ref2=yield Promise.all([dstFilename,this.filename].map(function(f){return _module_js$fs.stat(f);}));var _ref22=_$rt.slicedToArray(_ref2,2);dstStat = _ref22[0];this.stat = _ref22[1];if(dstStat && this.stat.mtime <= dstStat.mtime){return;}yield _module_js$fs.mkdirs(_module_js$path.dirname(dstFilename));var copyPromise;if(target.filterPrecompiledModuleCode){copyPromise = _$rt.asyncToGenerator(function*(){var code=target.filterPrecompiledModuleCode(pkg,(yield _module_js$fs.readFile(_this.filename,{encoding:'utf8'})));yield _module_js$fs.writeFile(dstFilename,code,{encoding:'utf8'});})();}else {copyPromise = _module_js$fs.copy(this.filename,dstFilename);}var copyMap=_$rt.asyncToGenerator(function*(){if(yield _module_js$fs.stat(_this.filename + '.map')){yield _module_js$fs.copy(_this.filename + '.map',dstFilename + '.map');}});yield Promise.all([copyPromise,copyMap()]);})}],[{key:'sourceFileForTarget',value:function sourceFileForTarget(filenames,target){if(target.mode === TARGET_MODE_DEV){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=filenames[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var f=_step.value;if(f === '__precompiled.dev.js'){return f;}}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}}else {var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=filenames[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var f=_step2.value;if(f === '__precompiled.release.js' || f === '__precompiled.js' || f === '__precompiled.min.js'){return f;}}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}}return filenames[0];}}]);return PrecompiledModule;})(Module);PrecompiledModule.prototype.typeName = 'precompiled module';
var Logger=(function(){function Logger(level){var _verbosityMap,_this=this;_$rt.classCallCheck(this,Logger);this.level = level;var So=this.style = _logger_js$term.StdoutStyle;var Se=this.errstyle = _logger_js$term.StderrStyle;var werr=function werr(style,args){process.stderr.write(style.open + 'E ');console.error.apply(console,args);process.stderr.write(style.close);};if(level >= Logger.DEBUG){(function(){var prefix=So.boldMagenta('D');_this.debug = function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key < _len;_key++) {args[_key] = arguments[_key];}console.log.apply(console,[prefix].concat(args));};})();}if(level >= Logger.INFO){this.info = function(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2 < _len2;_key2++) {args[_key2] = arguments[_key2];}console.log.apply(console,args);};}if(level >= Logger.WARN){(function(){var prefix=So.boldYellow('W');_this.warn = function(){for(var _len3=arguments.length,args=Array(_len3),_key3=0;_key3 < _len3;_key3++) {args[_key3] = arguments[_key3];}console.log.apply(console,[prefix].concat(args));};})();}if(level >= Logger.ERROR){this.error = function(){for(var _len4=arguments.length,args=Array(_len4),_key4=0;_key4 < _len4;_key4++) {args[_key4] = arguments[_key4];}werr(Se.boldRed,args);};}this.verbosityMap = (_verbosityMap = {},_$rt.defineProperty(_verbosityMap,this.DEBUG,this.debug.bind(this)),_$rt.defineProperty(_verbosityMap,this.INFO,this.info.bind(this)),_$rt.defineProperty(_verbosityMap,this.WARN,this.warn.bind(this)),_$rt.defineProperty(_verbosityMap,this.ERROR,this.error.bind(this)),_verbosityMap);}_$rt.createClass(Logger,[{key:'debug',value:function debug(){}},{key:'info',value:function info(){}},{key:'warn',value:function warn(){}},{key:'error',value:function error(){}},{key:'log',value:function log(verbosity){var _verbosityMap2;for(var _len5=arguments.length,args=Array(_len5 > 1?_len5 - 1:0),_key5=1;_key5 < _len5;_key5++) {args[_key5 - 1] = arguments[_key5];}(_verbosityMap2 = this.verbosityMap)[verbosity].apply(_verbosityMap2,args);}}]);return Logger;})();Logger.DEBUG = 3;Logger.INFO = 2;Logger.WARN = 1;Logger.ERROR = 0;
var ModuleCompiler=(function(){function ModuleCompiler(pkg,module,basedOn,target,depLevel){_$rt.classCallCheck(this,ModuleCompiler);this.pkg = pkg;this.module = module;this.basedOn = basedOn;this.target = target;this.log = this.target.log;this.depLevel = depLevel;this._nextAnonID = 0;}_$rt.createClass(ModuleCompiler,[{key:'compile',value:_$rt.asyncToGenerator(function*(srcfiles){yield this.parseFiles(srcfiles);var depGraph=this.resolveCrossFileDeps(srcfiles);srcfiles = this.sortFiles(srcfiles,depGraph);if(this.log.level >= Logger.DEBUG){var _buildDepDescription=this.buildDepDescription(srcfiles);var _buildDepDescription2=_$rt.slicedToArray(_buildDepDescription,2);var msg=_buildDepDescription2[0];var filenames=_buildDepDescription2[1];if(filenames.length !== 0){this.log.debug(msg);}}this.target.preCompileModule(this.pkg,this.module,srcfiles,this.depLevel);var codebuf=new CodeBuffer(_compile_js$path.resolve(this.pkg.dir),this.target);this.genHeader(srcfiles,codebuf);for(var i=0,L=srcfiles.length;i !== L;i++) {var srcfile=srcfiles[i];codebuf.addMappedCode(srcfile.parsed.code,srcfile.parsed.map);}this.genFooter(srcfiles,codebuf);return codebuf;})},{key:'importsForSrcFiles',value:function importsForSrcFiles(srcfiles){var importRefs={};var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=srcfiles[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var srcfile=_step.value;var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=srcfile.parsed.imports[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var imp=_step2.value;imp.srcfile = srcfile;var impRefs=importRefs[imp.source.value];if(impRefs){impRefs.push(imp);}else {importRefs[imp.source.value] = [imp];}}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}return importRefs;}},{key:'genHeader',value:function genHeader(srcfiles,codebuf){var importRefs=this.importsForSrcFiles(srcfiles);if(this.module instanceof TestModule && !importRefs['testing']){importRefs['testing'] = [mkimport({ref:'testing',specs:{},isImplicit:true})];}this.module.info = this.module.makeInfo(srcfiles,importRefs);codebuf.appendLine('//#jopkg' + JSON.stringify(this.module.info));if(this.target.pkgModuleHeader){var targetHeaderCode=this.target.pkgModuleHeader(this.pkg,this.module,this.depLevel);if(targetHeaderCode){targetHeaderCode.trim().split(/\r?\n/g).forEach(function(line){codebuf.appendLine(line);});}}if(Object.keys(importRefs).length !== 0){var _imports=codebuf.addModuleImports(importRefs);if(this.module === this.pkg.module){this.pkg.imports = _imports;}}}},{key:'genFooter',value:function genFooter(srcfiles,codebuf){var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=srcfiles[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);_iteratorNormalCompletion3 = true) {var srcfile=_step3.value;if(srcfile.initFuncName){codebuf.appendLine(srcfile.initFuncName + '();');}}}catch(err) {_didIteratorError3 = true;_iteratorError3 = err;}finally {try{if(!_iteratorNormalCompletion3 && _iterator3['return']){_iterator3['return']();}}finally {if(_didIteratorError3){throw _iteratorError3;}}}this.genExports(srcfiles,codebuf);if(this.target.pkgModuleFooter){var s=this.target.pkgModuleFooter(this.pkg,this.module,this.depLevel);if(s){s.trim().split(/\r?\n/g).forEach(function(line){codebuf.appendLine(line);});}}if(this.module.filename){codebuf.appendLine('//#sourceMappingURL=' + _compile_js$path.basename(this.module.filename) + '.map');}}},{key:'genExports',value:function genExports(srcfiles,codebuf){var codegen=this.codegen.bind(this);var asTest=this.module instanceof TestModule;{var seenExports=new Set();}srcfiles.forEach(function(f){if(f.exports){var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=f.exports[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);_iteratorNormalCompletion4 = true) {var _step4$value=_$rt.slicedToArray(_step4.value,2);var k=_step4$value[0];var exp=_step4$value[1];{_compile_js$assert(!seenExports.has(k));seenExports.add(k);}codebuf.appendExport(exp,codegen,asTest);}}catch(err) {_didIteratorError4 = true;_iteratorError4 = err;}finally {try{if(!_iteratorNormalCompletion4 && _iterator4['return']){_iterator4['return']();}}finally {if(_didIteratorError4){throw _iteratorError4;}}}}});}},{key:'codegen',value:function codegen(program){var opts=Object.assign({},this.basicBabelOptions);return _compile_js$babel.transform.fromAst(program,null,opts).code;}},{key:'parseFiles',value:function parseFiles(srcfiles){var _this=this;return Promise.all(srcfiles.map(_$rt.asyncToGenerator(function*(srcfile,index){srcfile.code = yield _compile_js$fs.readFile(srcfile.dir + '/' + srcfile.name,'utf8');srcfile.id = srcfile.name.replace(/[^a-z0-9_]/g,'_');try{var code=srcfile.code;var sourceMap=null;srcfile.parsed = _this.parseFile(srcfile,code,sourceMap);}catch(err) {if(!err.srcfile)err.file = srcfile;throw err;}})));}},{key:'parseFile',value:function parseFile(srcfile,code,inSourceMap){this.log.debug('parse',this.pkg.id + '/' + srcfile.name);var babelOptions=Object.assign({filename:srcfile.name,inputSourceMap:inSourceMap,sourceMaps:true,sourceRoot:srcfile.dir,plugins:[{transformer:_compile_js$plugins.Init,position:'before'},{transformer:_compile_js$plugins.FileScope,position:'after'}]},this.basicBabelOptions);babelOptions.optional = babelOptions.optional.filter(function(transformerID){return babelOptions.blacklist.indexOf(transformerID) === -1;});var ctx=new CompileContext(this.pkg,this.module,srcfile,this.target,this.log);babelOptions._joctx = ctx;babelOptions._jofile = srcfile;var res=_compile_js$babel.transform(code,babelOptions);res.imports = ctx.imports;return res;}},{key:'resolveCrossFileDeps',value:function resolveCrossFileDeps(srcfiles){this._detectedDependencies = {};var pkg=this.pkg;this.log.debug('resolving cross-file dependencies');var depGraph=new _compile_js$tsort.DAG();var failedFiles=null;for(var x=0;x !== srcfiles.length;x++) {var fileA=srcfiles[x];if(fileA.unresolvedIDs){var isResolved=this._resolveFileDepsv(fileA,srcfiles,depGraph);if(!isResolved && this.basedOn){isResolved = this._resolveFileDepsv(fileA,this.basedOn.srcfiles,depGraph);}if(!isResolved){{_compile_js$assert(fileA.unresolvedIDs);}if(failedFiles){failedFiles.push(fileA);}else {failedFiles = [fileA];}}}}if(failedFiles){var errs=this._makeUnresolvableIDErrors(failedFiles);_compile_js$assert(errs.length !== 0);throw _compile_js$SrcErrors(errs);}return depGraph;}},{key:'_resolveFileDepsv',value:function _resolveFileDepsv(fileA,srcfiles,depGraph){for(var y=0;y !== srcfiles.length;y++) {var fileB=srcfiles[y];if(fileA !== fileB && fileB.definedIDs){if(this._resolveFileDeps(fileA,fileB,depGraph)){return true;}}}return false;}},{key:'_resolveFileDeps',value:function _resolveFileDeps(fileA,fileB,depGraph){var _this2=this;var unresolved=Object.keys(fileA.unresolvedIDs);var resolved=unresolved.filter(function(name){return _this2._resolveIdentifierAcrossFiles(name,fileA,fileB,depGraph);});if(resolved.length === unresolved.length){fileA.unresolvedIDs = null;return true;}else {resolved.forEach(function(name){delete fileA.unresolvedIDs[name];});return false;}}},{key:'_makeUnresolvableIDErrors',value:function _makeUnresolvableIDErrors(srcfiles){var _this3=this;var errs=[];srcfiles.forEach(function(file){{_compile_js$assert(file.unresolvedIDs);_compile_js$assert(Object.keys(file.unresolvedIDs).length !== 0);}for(var _name in file.unresolvedIDs) {var node=file.unresolvedIDs[_name].node;var err=_compile_js$RefError(file,node,'unresolvable identifier "' + String(_name) + '"');var suggestions=_this3.findIDSuggestions(srcfiles,_name);if(suggestions.length !== 0){err.suggestion = _this3.formatIDSuggestions(suggestions);}errs.push(err);}});return errs;}},{key:'_handleOnCyclicDepError',value:function _handleOnCyclicDepError(fileA,fileB){var errs=[];var findErrs=function findErrs(fileA,fileB){for(var _name2 in fileA.definedIDs) {var ref=fileB.unresolvedIDs && fileB.unresolvedIDs[_name2] || fileB.resolvedIDs && fileB.resolvedIDs[_name2];if(ref && ref.level === 0){errs.push({message:'"' + String(_name2) + '" defined here',srcloc:_compile_js$SrcLocation(fileA.definedIDs[_name2].identifier,fileA)});errs.push({message:'"' + String(_name2) + '" referenced here',srcloc:_compile_js$SrcLocation(ref.node,fileB)});}}};findErrs(fileA,fileB);findErrs(fileB,fileA);throw _compile_js$RefError(null,null,'cyclic dependency between source files "' + String(fileA.name) + '" and "' + String(fileB.name) + '"' + (' in package "' + String(this.pkg.id) + '"'),errs);}},{key:'_resolveIdentifierAcrossFiles',value:function _resolveIdentifierAcrossFiles(name,file,otherFile,depGraph){var binding=otherFile.definedIDs[name];if(!binding){return false;}if(this.log.level >= Logger.DEBUG){var kind=file.unresolvedSuperclassIDs && file.unresolvedSuperclassIDs[name]?'class':binding.kind === 'hoisted' && (!binding.node || binding.node.type === 'FunctionDeclaration')?'function':binding.kind;this.log.debug('resolved reference ' + String(name) + ' in ' + String(file.name) + ' to ' + String(kind) + ' ' + String(name) + ' in ' + String(otherFile.name));}if(file.unresolvedIDs[name].level === 0){depGraph.add(file,otherFile);}var classRef=file.unresolvedSuperclassIDs?file.unresolvedSuperclassIDs[name]:null;if(classRef){var classDeps=this.fileDependsOnClasses(otherFile,file);if(classDeps){throw _compile_js$CyclicRefError(this.pkg,name,file,otherFile,classDeps,true);}delete file.unresolvedSuperclassIDs[name];}var fileDeps=this._detectedDependencies[file.name] || (this._detectedDependencies[file.name] = []);fileDeps.push({dependeeFile:file,file:otherFile,name:name,binding:binding,refNode:file.unresolvedIDs[name].node});if(!file.resolvedIDs){file.resolvedIDs = {};}file.resolvedIDs[name] = file.unresolvedIDs[name];return true;}},{key:'findIDSuggestions',value:function findIDSuggestions(srcfiles,name){var depth=arguments.length <= 2 || arguments[2] === undefined?0:arguments[2];var sv=[];var km={};var nameLowerCase=name.toLowerCase();var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=srcfiles[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done);_iteratorNormalCompletion5 = true) {var srcfile=_step5.value;var foundCloseMatch=false;for(var k in srcfile.definedIDs) {var binding=srcfile.definedIDs[k];if(binding.kind === 'module' || binding.kind === 'uid' || !binding.identifier.loc){continue;}var d=0;if(nameLowerCase === k.toLowerCase()){foundCloseMatch = true;}else {d = _compile_js$LevenshteinDistance(name,k);}if(d <= 2 && !km[k]){sv.push(km[k] = {d:d,name:k,srcloc:_compile_js$SrcLocation(binding.node,srcfile)});}}if(!foundCloseMatch){for(var k in this.target.builtInModuleRefs) {if(!km[k] && k.toLowerCase() === nameLowerCase){sv.push(km[k] = {d:0,name:k,isModule:true});}}}}}catch(err) {_didIteratorError5 = true;_iteratorError5 = err;}finally {try{if(!_iteratorNormalCompletion5 && _iterator5['return']){_iterator5['return']();}}finally {if(_didIteratorError5){throw _iteratorError5;}}}return sv.sort(function(a,b){return a.d - b.d;});}},{key:'formatIDSuggestions',value:function formatIDSuggestions(suggestions){return 'Did you mean' + (suggestions.length > 1?':\n  ':' ') + suggestions.map(function(s){if(s.isModule){return 'built-in module "' + _compile_js$term.StderrStyle.boldCyan(s.name) + '"';}else {return _compile_js$term.StderrStyle.boldCyan(s.name) + ' defined in ' + s.srcloc.formatFilename('green');}}).join('\n  ');}},{key:'buildDepDescription',value:function buildDepDescription(srcfiles){var _this4=this;var intersectKeys=function intersectKeys(a,b){return (function(){var _ref=[];var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=Object.keys(a)[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done);_iteratorNormalCompletion6 = true) {var k=_step6.value;if(b[k]){_ref.push(k);}}}catch(err) {_didIteratorError6 = true;_iteratorError6 = err;}finally {try{if(!_iteratorNormalCompletion6 && _iterator6['return']){_iterator6['return']();}}finally {if(_didIteratorError6){throw _iteratorError6;}}}return _ref;})();};var msg=this.log.style.boldGreen(this.pkg.id);if(this.module instanceof TestModule){msg += '(test)';}msg += ' cross-file dependencies:';var filenames=(function(){var _filenames=[];var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=srcfiles[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done);_iteratorNormalCompletion7 = true) {var f=_step7.value;if(_this4._detectedDependencies[f.name]){_filenames.push(f.name);}}}catch(err) {_didIteratorError7 = true;_iteratorError7 = err;}finally {try{if(!_iteratorNormalCompletion7 && _iterator7['return']){_iterator7['return']();}}finally {if(_didIteratorError7){throw _iteratorError7;}}}return _filenames;})();var _iteratorNormalCompletion8=true;var _didIteratorError8=false;var _iteratorError8=undefined;try{var _loop=function(){var filename=_step8.value;var depnames=_compile_js$Unique(_this4._detectedDependencies[filename].map(function(d){return d.file.name;}));msg += '\n  ' + _this4.log.style.boldCyan(filename) + ' depends on:';var refs={};var dependeeFile=null;_this4._detectedDependencies[filename].forEach(function(dep){if(!refs[dep.file.name]){refs[dep.file.name] = {};}for(var k in dep.file.definedIDs) {refs[dep.file.name][k] = {id:dep.file.definedIDs[k],file:dep.file};}if(!dependeeFile){dependeeFile = dep.dependeeFile;}});_iteratorNormalCompletion9 = true;_didIteratorError9 = false;_iteratorError9 = undefined;try{for(_iterator9 = Object.keys(refs)[Symbol.iterator]();!(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done);_iteratorNormalCompletion9 = true) {var fn=_step9.value;var ref=refs[fn];var ids=intersectKeys(ref,dependeeFile.resolvedIDs);msg += '\n    ' + _this4.log.style.boldYellow(fn);_iteratorNormalCompletion10 = true;_didIteratorError10 = false;_iteratorError10 = undefined;try{for(_iterator10 = ids[Symbol.iterator]();!(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done);_iteratorNormalCompletion10 = true) {var _name3=_step10.value;var r=ref[_name3];var srcloc=_compile_js$SrcLocation(r.id.identifier,r.file);var ln='\n    ';msg += ln + srcloc.formatCode('boldYellow',0,0).join(ln);}}catch(err) {_didIteratorError10 = true;_iteratorError10 = err;}finally {try{if(!_iteratorNormalCompletion10 && _iterator10['return']){_iterator10['return']();}}finally {if(_didIteratorError10){throw _iteratorError10;}}}}}catch(err) {_didIteratorError9 = true;_iteratorError9 = err;}finally {try{if(!_iteratorNormalCompletion9 && _iterator9['return']){_iterator9['return']();}}finally {if(_didIteratorError9){throw _iteratorError9;}}}};for(var _iterator8=filenames[Symbol.iterator](),_step8;!(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done);_iteratorNormalCompletion8 = true) {var _iteratorNormalCompletion9;var _didIteratorError9;var _iteratorError9;var _iterator9,_step9;var _iteratorNormalCompletion10;var _didIteratorError10;var _iteratorError10;var _iterator10,_step10;_loop();}}catch(err) {_didIteratorError8 = true;_iteratorError8 = err;}finally {try{if(!_iteratorNormalCompletion8 && _iterator8['return']){_iterator8['return']();}}finally {if(_didIteratorError8){throw _iteratorError8;}}}return [msg,filenames];}},{key:'fileDependsOn',value:function fileDependsOn(fileA,fileB){var dep=this._detectedDependencies[fileA.name];if(dep && dep.some(function(o){return o.file === fileB;})){return dep;}}},{key:'fileDependsOnClasses',value:function fileDependsOnClasses(fileA,fileB){var deps=this._detectedDependencies[fileA.name];if(deps){for(var k in deps) {if(deps[k].file === fileB && deps[k].binding.isClassDeclaration){return deps;}}}return null;}},{key:'sortFiles',value:function sortFiles(srcfiles,depGraph){var _this5=this;if(srcfiles.length === 1){return srcfiles;}var L0=depGraph.sort(this._handleOnCyclicDepError.bind(this));if(srcfiles.length === L0.length){return L0;}var Ln=srcfiles.sort(function(fileA,fileB){if(_this5.fileDependsOn(fileA,fileB)){return 1;}if(_this5.fileDependsOn(fileB,fileA)){return -1;}return 0;}).filter(function(f){return L0.indexOf(f) === -1;});return Ln.concat(L0);}},{key:'basicBabelOptions',get:function get(){var options={code:true,ast:false,compact:this.target.mode === TARGET_MODE_RELEASE,comments:this.target.mode === TARGET_MODE_DEV,externalHelpers:true,modules:'ignore',experimental:true,stage:0,nonStandard:true,loose:[],blacklist:this.target.disabledTransforms(['es6.modules','validation.react','validation.undeclaredVariableCheck','utility.inlineEnvironmentVariables','reactCompat','strict','jscript']),optional:this.target.transforms(['es6.spec.blockScoping','es6.spec.symbols','es6.spec.templateLiterals','react','flow'])};{Object.freeze(options);Object.freeze(options.blacklist);Object.freeze(options.optional);}Object.defineProperty(this,'basicBabelOptions',{value:options});return options;}}]);return ModuleCompiler;})();
var npmRefPrefix='npmjs.com/';var Pkg=(function(){function Pkg(_ref){var dir=_ref.dir;var ref=_ref.ref;var jopath=_ref.jopath;var files=_ref.files;_$rt.classCallCheck(this,Pkg);this.dir = dir;this.ref = ref;this.jopath = jopath;this.files = files;this.imports = {};this.module = null;this.testModule = null;this.mainFunc = null;this.deps = [];this.programs = [];}_$rt.createClass(Pkg,[{key:'resolveOutputFile',value:_$rt.asyncToGenerator(function*(output){var st=yield _pkg_js$fs.stat(output);if(st && st.isDirectory()){return _pkg_js$path.basename(this.id) + '.js';}return output;})},{key:'loadSrcFiles',value:function loadSrcFiles(_ref2){var _this=this;var _ref2$includeTests=_ref2.includeTests;var includeTests=_ref2$includeTests === undefined?false:_ref2$includeTests;var filenames=includeTests?this.files:this.files.filter(function(fn){return !SrcFile.filenameIsTest(fn);});return Promise.all(filenames.map(_$rt.asyncToGenerator(function*(fn){var filename=_this.dir + '/' + fn;var st=yield _pkg_js$fs.stat(filename);var type=_pkg_js$path.extname(fn).substr(1).toLowerCase();return {__proto__:SrcFile.prototype,dir:_this.dir,name:fn,relpath:fn,st:st,type:type,pkg:_this};})));}},{key:'pkgFromRef',value:_$rt.asyncToGenerator(function*(ref){var importedAt=arguments.length <= 1 || arguments[1] === undefined?null:arguments[1];var target=arguments.length <= 2 || arguments[2] === undefined?null:arguments[2];var parentPkg=this;var pkgdir;if(ref[0] === '.'){pkgdir = _pkg_js$path.normalize(parentPkg.dir + '/' + ref);if(parentPkg.ref){ref = _pkg_js$path.normalize(parentPkg.ref + '/' + ref);if(ref[0] === '.'){throw _pkg_js$SrcError('ImportError',importedAt,'recursive dependency; trying to import parent package from child package');}}}var pkg=undefined,importError=undefined,files=[];if(ref[0] === '.'){try{files = (yield _pkg_js$fs.readdir(pkgdir)).filter(SrcFile.filenameMatches);pkg = new Pkg({ref:ref,dir:pkgdir,files:files,jopath:parentPkg.jopath});}catch(e) {if(e.name === 'TypeError'){throw e;}importError = e;}}else if(NPMPkg.refIsNPM(ref)){return new NPMPkg(NPMPkg.stripNPMRefPrefix(ref));}else {if(target && target.builtInModuleRefs[ref]){return new BuiltInPkg(ref);}try{var _ref3=yield Pkg._envReadRefSrcDir(ref);var _ref32=_$rt.slicedToArray(_ref3,3);var _files=_ref32[0];var _pkgdir=_ref32[1];var jopath=_ref32[2];files = _files.filter(SrcFile.filenameMatches);pkg = new Pkg({ref:ref,dir:_pkgdir,files:files,jopath:parentPkg.jopath});}catch(e) {if(e.name === 'TypeError'){throw e;}importError = e;}}if(!importError && files.length === 0){throw _pkg_js$SrcError('PkgError',null,'no source files found in package "' + String(pkg.id) + '"',null,[{message:'imported here',srcloc:importedAt}]);}else if(importError){throw _pkg_js$SrcError('ImportError',importedAt,importError.message);}return pkg;})},{key:'toJSON',value:function toJSON(){return {dir:this.dir,ref:this.ref,jopath:this.jopath,files:this.files,imports:this.imports,module:this.module,testModule:this.testModule,mainFunc:this.mainFunc,deps:this.deps,programs:this.programs};}},{key:'id',get:function get(){return this.ref || this.dir;}}],[{key:'_envReadRefSrcDir',value:_$rt.asyncToGenerator(function*(ref){return yield Env.readdir(ref,'src');})},{key:'fromRef',value:_$rt.asyncToGenerator(function*(ref){var files=undefined,pkg=undefined;if(ref[0] === '.' || ref[0] === '/'){files = (yield _pkg_js$fs.readdir(ref)).filter(SrcFile.filenameMatches);pkg = new Pkg({ref:null,dir:ref,files:files,jopath:null});}else {var _ref4=yield Pkg._envReadRefSrcDir(ref);var _ref42=_$rt.slicedToArray(_ref4,3);var _files=_ref42[0];var pkgdir=_ref42[1];var jopath=_ref42[2];files = _files.filter(SrcFile.filenameMatches);pkg = new Pkg({ref:ref,dir:pkgdir,files:files,jopath:jopath});}if(files.length === 0){throw 'no source files found in package "' + String(pkg.id) + '"';}return pkg;})},{key:'fromFiles',value:_$rt.asyncToGenerator(function*(files){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=files[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var f=_step.value;if(!SrcFile.filenameMatches(f)){throw new Error('unexpected file type "' + String(f) + '"');}}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}var pkgdir=_pkg_js$path.dirname(files[0]);return new Pkg({ref:null,dir:pkgdir,files:files,jopath:null});})},{key:'importsFromModuleInfo',value:function importsFromModuleInfo(info){var imports=null;if(info && info.imports){imports = {};var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=info.imports[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var ref=_step2.value;imports[ref] = [];}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}}return imports;}},{key:'mergeImports',value:function mergeImports(base){for(var _len=arguments.length,others=Array(_len > 1?_len - 1:0),_key=1;_key < _len;_key++) {others[_key - 1] = arguments[_key];}others.forEach(function(other){Object.keys(other).forEach(function(ref){var otherImp=other[ref];var baseImp=base[ref];if(baseImp){baseImp.nodes = baseImp.nodes.concat(otherImp.nodes);baseImp.names = baseImp.nodes.concat(otherImp.names);}else {base[ref] = otherImp;}});});return base;}}]);return Pkg;})();var BuiltInPkg=(function(_Pkg){_$rt.inherits(BuiltInPkg,_Pkg);function BuiltInPkg(ref){_$rt.classCallCheck(this,BuiltInPkg);_$rt.get(Object.getPrototypeOf(BuiltInPkg.prototype),'constructor',this).call(this,{ref:ref});}return BuiltInPkg;})(Pkg);BuiltInPkg.prototype.isBuiltIn = true;var NPMPkg=(function(_Pkg2){_$rt.inherits(NPMPkg,_Pkg2);function NPMPkg(ref){_$rt.classCallCheck(this,NPMPkg);_$rt.get(Object.getPrototypeOf(NPMPkg.prototype),'constructor',this).call(this,{ref:ref});this.module = new NPMModule(require.resolve(ref));}_$rt.createClass(NPMPkg,[{key:'id',get:function get(){return npmRefPrefix + this.ref;}}]);return NPMPkg;})(Pkg);NPMPkg.prototype.isNPM = true;NPMPkg.refIsNPM = function(ref){return ref.length > npmRefPrefix.length && ref.substr(0,npmRefPrefix.length) === npmRefPrefix;};NPMPkg.stripNPMRefPrefix = function(ref){return ref.substr(npmRefPrefix.length);};
var CodeBuffer=(function(){function CodeBuffer(sourceDir,target){_$rt.classCallCheck(this,CodeBuffer);this.code = '';this.map = new _codebuf_js$SourceMapGenerator();this.line = 0;this.column = 0;this.sourceDir = sourceDir?sourceDir + '/':'';this.target = target;this._nextAnonID = 0;this.hasStartedVars = false;}_$rt.createClass(CodeBuffer,[{key:'resetLineStart',value:function resetLineStart(){var _this=this;this.hasStartedVars = false;Object.defineProperty(this,'lineStart',{configurable:true,get:function get(){return CodeBuffer.prototype.lineStart.call(_this);}});}},{key:'appendLine',value:function appendLine(linechunk,srcfilename,srcloc){{if(linechunk.indexOf('\n') !== -1){throw new Error('unexpected linebreak in linechunk');}}this.code += linechunk + '\n';if(srcloc){this.addSrcLocMapping(srcloc,srcfilename,{line:this.line,column:1},{line:this.line,column:linechunk.length});}++this.line;}},{key:'appendCode',value:function appendCode(code,srcloc,srcfilename){var startLine=this.line;code = code.trim();var lines=code.split(/\r?\n/);this.code += code + '\n';this.line += lines.length + 1;var genStart={line:startLine,column:1};var genEnd={line:this.line,column:lines[lines.length - 1].length};if(srcloc){this.addSrcLocMapping(srcloc,srcfilename,genStart,genEnd);}else if(srcfilename){this.map.addMapping({original:{line:1,column:1},generated:genStart,source:srcfilename});this.map.addMapping({original:{line:lines.length,column:1},generated:genEnd,source:srcfilename});}}},{key:'addSrcLocMapping',value:function addSrcLocMapping(srcloc,srcfilename,genStart,genEnd){srcfilename = this.sourceDir + _codebuf_js$path.basename(srcfilename || srcloc.filename);this.map.addMapping({original:{line:srcloc.startLine === undefined?srcloc.start.line:srcloc.startLine,column:srcloc.startColumn === undefined?srcloc.start.column:srcloc.startColumn},generated:genStart,source:srcfilename});this.map.addMapping({original:{line:srcloc.endLine === undefined?srcloc.end.line:srcloc.endLine,column:srcloc.endColumn === undefined?srcloc.end.column:srcloc.endColumn},generated:genEnd,source:srcfilename});}},{key:'addMappedCode',value:function addMappedCode(code,map){var _this2=this;var consumer=new _codebuf_js$SourceMapConsumer(map);for(var i=0,L=map.sources.length;i !== L;i++) {var filename=this.sourceDir + map.sources[i];this.map._sources.add(filename);this.map.setSourceContent(filename,map.sourcesContent[i]);}consumer.eachMapping(function(mapping){_this2.map._mappings.add({generatedLine:mapping.generatedLine + _this2.line,generatedColumn:mapping.generatedColumn,originalLine:mapping.originalLine,originalColumn:mapping.originalColumn,source:_this2.sourceDir + _codebuf_js$path.basename(mapping.source)});});this.code += code + '\n';this.line += code.split(/\r?\n/).length;}},{key:'addModuleImports',value:function addModuleImports(importRefs){var _this3=this;var imports={};var refs=Object.keys(importRefs);var lastIndex=refs.length - 1;refs.forEach(function(ref,index){imports[ref] = {nodes:importRefs[ref],names:_this3._addModuleImport(ref,importRefs[ref],index === lastIndex)};});return imports;}},{key:'_addModuleImportBase',value:function _addModuleImportBase(ref,imps,isLastImp){var requireExpr=this.genRequireExpr(ref);if(imps.length === 1 && imps[0].specifiers.length === 0){this.appendLine(requireExpr);return [null,null];}var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=imps[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var imp=_step.value;var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=imp.specifiers[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var spec=_step2.value;if((!spec.imported || spec.imported.name === 'default') && spec.local){var isLast=isLastImp && imps.length === 1 && imp.specifiers.length === 1;var _name=this.addImport(imp,requireExpr,spec,isLast);return [spec.local.name,{imp:imp,spec:spec,name:_name}];}}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}var defaultIDName=this.anonIDName();this.appendLine(this.lineStart + defaultIDName + ' = ' + requireExpr,imps[0].srcfile.name,imps[0].source.loc);return [defaultIDName,null];}},{key:'_addModuleImportRest',value:function _addModuleImportRest(imps,defaultIDName,names){var _this4=this;imps.forEach(function(imp){imp.specifiers.forEach(function(spec){if(spec.local && spec.local.name !== defaultIDName){names.push(_this4.addImport(imp,defaultIDName,spec,false));}});});}},{key:'_addLastModuleImportRest',value:function _addLastModuleImportRest(imps,defaultIDName,names){var restImp=[];imps.forEach(function(imp){var specs=(function(){var _specs=[];var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=imp.specifiers[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);_iteratorNormalCompletion3 = true) {var spec=_step3.value;if(spec.local && spec.local.name !== defaultIDName){_specs.push(spec);}}}catch(err) {_didIteratorError3 = true;_iteratorError3 = err;}finally {try{if(!_iteratorNormalCompletion3 && _iterator3['return']){_iterator3['return']();}}finally {if(_didIteratorError3){throw _iteratorError3;}}}return _specs;})();if(specs.length !== 0){restImp.push({imp:imp,specs:specs});}});for(var i=0;i !== restImp.length;i++) {var _restImp$i=restImp[i];var imp=_restImp$i.imp;var specs=_restImp$i.specs;var isLast=i === restImp.length - 1;for(var _i=0,lastIndex=specs.length - 1;_i !== specs.length;_i++) {names.push(this.addImport(imp,defaultIDName,specs[_i],isLast && _i === lastIndex));}}}},{key:'_addModuleImport',value:function _addModuleImport(ref,imps,isLastImp){var names=[];if(imps.length === 1 && imps[0].specifiers.length === 1){return [this.addImport(imps[0],this.genRequireExpr(ref),imps[0].specifiers[0],isLastImp)];}var _addModuleImportBase2=this._addModuleImportBase(ref,imps,isLastImp);var _addModuleImportBase22=_$rt.slicedToArray(_addModuleImportBase2,2);var defaultIDName=_addModuleImportBase22[0];var defaultImp=_addModuleImportBase22[1];if(defaultImp){names.push(defaultImp.name);}if(defaultIDName){if(isLastImp){this._addLastModuleImportRest(imps,defaultIDName,names);}else {this._addModuleImportRest(imps,defaultIDName,names);}}return names;}},{key:'addImport',value:function addImport(imp,moduleCode,spec,isLast){var srcline;var specName=spec.imported?spec.imported.name:'default';if(specName === 'default'){if(spec.local){srcline = this.lineStart + spec.local.name + ' = ' + moduleCode;}else {srcline = '';if(this.hasStartedVars){srcline = ';';this.resetLineStart();}srcline += moduleCode;}}else if(spec.type === 'ImportBatchSpecifier'){if(moduleCode.substr(0,5) === '__$i('){moduleCode = '__$iw(' + moduleCode.substr(5);}else if(moduleCode.substr(0,6) === '__$im('){moduleCode = '__$imw(' + moduleCode.substr(6);}else {moduleCode = '__$iw(' + moduleCode + ')';}srcline = this.lineStart + spec.local.name + ' = ' + moduleCode;}else {srcline = this.lineStart + spec.local.name + ' = ' + moduleCode + '.' + spec.imported.name;}if(isLast){srcline += ';';}this.appendLine(srcline,imp.srcfile.name,imp.loc);return specName;}},{key:'genRequireExpr',value:function genRequireExpr(ref){var m=undefined;if(NPMPkg.refIsNPM(ref)){return '__$i(require(' + JSON.stringify(NPMPkg.stripNPMRefPrefix(ref)) + '))';}else if(ref[0] === '/' || this.target.builtInModuleRefs[ref]){return '__$i(require(' + JSON.stringify(ref) + '))';}else {return '__$im(require,' + JSON.stringify(ref) + ')';}}},{key:'appendExport',value:function appendExport(exp,codegen){var asTest=arguments.length <= 2 || arguments[2] === undefined?false:arguments[2];var srcloc=_codebuf_js$SrcLocation(exp.node,exp.file);if(exp.name === 'default'){if(asTest){throw new Error('test ' + this.file.name + ' trying to "export default"');}this.appendLine('exports.__esModule=true;',null,srcloc);}if(exp.node.type === 'Identifier'){if(exp.name === 'default'){this.appendLine('exports["default"]=' + exp.node.name + ';',null,srcloc);}else if(asTest){this.appendLine('__$jotests.set("' + exp.name.replace(/"/,'\\"') + '",' + exp.node.name + ');',null,srcloc);}else {this.appendLine('exports.' + exp.name + '=' + exp.node.name + ';',null,srcloc);}}else {var expr=undefined;if(asTest){expr = _codebuf_js$t.callExpression(_codebuf_js$t.memberExpression(_codebuf_js$t.identifier('__$jotests'),_codebuf_js$t.identifier('set')),[_codebuf_js$t.literal(exp.name),exp.node]);}else {expr = _codebuf_js$t.assignmentExpression('=',_codebuf_js$t.memberExpression(_codebuf_js$t.identifier('exports'),exp.name === 'default'?_codebuf_js$t.literal(exp.name):_codebuf_js$t.identifier(exp.name),true),exp.node);}var code=codegen(_codebuf_js$t.program([_codebuf_js$t.expressionStatement(expr)]));this.appendCode(code,srcloc);}}},{key:'anonIDName',value:function anonIDName(){return '_$$' + (this._nextAnonID++).toString(36);}},{key:'lineStart',get:function get(){Object.defineProperty(this,'lineStart',{configurable:true,value:'  , '});this.hasStartedVars = true;return 'var ';}}]);return CodeBuffer;})();
var CodeBuffer2=(function(){function CodeBuffer2(){_$rt.classCallCheck(this,CodeBuffer2);this.code = '';this.mapg = new _codebuf2_js$SourceMapGenerator({skipValidation:!false});this.line = 0;this.column = 0;}_$rt.createClass(CodeBuffer2,[{key:'sourceMapAsJSON',value:function sourceMapAsJSON(){return this.mapg.toJSON();}},{key:'append',value:function append(code,origLoc){var lineCount=strCount(code,'\n');var endColumn=lineCount !== 0?code.length - code.lastIndexOf('\n') + 1:this.column + code.length;if(origLoc){this.mapg.addMapping({original:{line:origLoc.startLine,column:origLoc.startColumn},generated:{line:this.line,column:this.column},source:origLoc.filename});}this.code += code;this.line += lineCount;this.column = endColumn;}},{key:'appendMapped',value:function appendMapped(code,map,sourceDir){var _this=this;_codebuf2_js$assert(!(map instanceof _codebuf2_js$SourceMapGenerator));if(this.code.length !== 0 && this.code[this.code.length - 1] !== '\n'){this.code += '\n';++this.line;this.column = 0;}if(code[code.length - 1] !== '\n'){code += '\n';}var mapc=new _codebuf2_js$SourceMapConsumer(map);mapc.sources.forEach(function(filename){var content=mapc.sourceContentFor(filename);if(content != null){_this.mapg.setSourceContent(filename,content);}});mapc.eachMapping(function(m){_codebuf2_js$assert(!!m.source);_this.mapg.addMapping({original:{line:m.originalLine,column:m.originalColumn},generated:{line:m.generatedLine + _this.line,column:m.generatedColumn},source:m.source});});this.code += code;this.line += strCount(code,'\n');}}]);return CodeBuffer2;})();
var kSpaces='                                                                              ';var slice=Array.prototype.slice;var _moduleStatus={OwnSourceChanged:Symbol('OwnSourceChanged'),ProgramDepsChanged:Symbol('ProgramDepsChanged'),UpToDate:Symbol('UpToDate')};var BuildCtx=(function(){function BuildCtx(target,logger,options){_$rt.classCallCheck(this,BuildCtx);this.log = logger;this.target = target;this.options = options || {forceRebuild:false};this.builtPkgs = {};this.depth = 0;this.pkgs = [];}_$rt.createClass(BuildCtx,[{key:'registerBuiltPkg',value:function registerBuiltPkg(pkg){var existingPkg=this.builtPkgs[pkg.dir];if(existingPkg){return existingPkg;}this.builtPkgs[pkg.dir] = pkg;return null;}},{key:'getBuiltPkg',value:function getBuiltPkg(pkgdir){return this.builtPkgs[pkgdir];}},{key:'logIndent',value:function logIndent(){return kSpaces.substr(0,this.depth * 2 - 1);}},{key:'logDebug',value:function logDebug(){for(var _len=arguments.length,args=Array(_len),_key=0;_key < _len;_key++) {args[_key] = arguments[_key];}if(this.depth && this.log.level >= Logger.DEBUG){var _log;(_log = this.log).debug.apply(_log,[this.logIndent()].concat(args));}else {var _log2;(_log2 = this.log).debug.apply(_log2,args);}}},{key:'logInfo',value:function logInfo(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2 < _len2;_key2++) {args[_key2] = arguments[_key2];}if(this.depth && this.log.level >= Logger.INFO){var _log3;(_log3 = this.log).info.apply(_log3,[this.logIndent()].concat(args));}else {var _log4;(_log4 = this.log).info.apply(_log4,args);}}},{key:'logWarn',value:function logWarn(){for(var _len3=arguments.length,args=Array(_len3),_key3=0;_key3 < _len3;_key3++) {args[_key3] = arguments[_key3];}if(this.depth && this.log.level >= Logger.WARN){var _log5;(_log5 = this.log).warn.apply(_log5,[this.logIndent()].concat(args));}else {var _log6;(_log6 = this.log).warn.apply(_log6,args);}}},{key:'logError',value:function logError(){for(var _len4=arguments.length,args=Array(_len4),_key4=0;_key4 < _len4;_key4++) {args[_key4] = arguments[_key4];}if(this.depth && this.log.level >= Logger.ERROR){var _log7;(_log7 = this.log).error.apply(_log7,[this.logIndent()].concat(args));}else {var _log8;(_log8 = this.log).error.apply(_log8,args);}}},{key:'buildPkg',value:_$rt.asyncToGenerator(function*(pkg){var _this=this;var existingPkg=this.registerBuiltPkg(pkg);if(existingPkg){return existingPkg;}var timeStarted=Date.now();var outdatedDeps=[];var pkgIdString=this.log.style.boldGreen(pkg.id);if(pkg.files[0].indexOf('__precompiled') === 0){this.logInfo('using precompiled package',pkgIdString);pkg.module = new PrecompiledModule(pkg.dir + '/' + PrecompiledModule.sourceFileForTarget(pkg.files,this.target));var targetFilename=this.target.precompiledModuleFilename(pkg,this.depth);if(targetFilename && targetFilename !== pkg.module.filename){yield pkg.module.copyToIfOutdated(targetFilename,pkg,this.target);}}else {this.logInfo('building source package',pkgIdString);var srcfiles=yield pkg.loadSrcFiles({includeTests:this.buildTests});yield this.buildModules(pkg,srcfiles);}var timeFinished=Date.now();var _ref=yield this.resolvePkgDeps(pkg,Object.keys(pkg.imports));var _ref2=_$rt.slicedToArray(_ref,2);pkg.deps = _ref2[0];outdatedDeps = _ref2[1];if(outdatedDeps.length !== 0){yield* (function*(){var ctx=Object.create(_this,{depth:{value:_this.depth + 1,enumerable:true}});yield Promise.all(outdatedDeps.map(function(pkg){return ctx.buildPkg(pkg);}));})();}pkg.deps = pkg.deps.map(function(pkg){return _this.builtPkgs[pkg.dir] || pkg;});if(this.log.level >= Logger.INFO){var depTime=Date.now() - timeFinished;var timeStr=this.log.style.grey('(' + _build_js$Duration.format(timeFinished - timeStarted) + (depTime > 1?' + ' + _build_js$Duration.format(depTime):'') + ')');this.logInfo('built package',pkgIdString,timeStr);}return pkg;})},{key:'resolvePkgDeps',value:_$rt.asyncToGenerator(function*(pkg,refs){var deps=[],outdatedDeps=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=refs[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var pkgref=_step.value;var depPkg=undefined;if(pkgref[0] === '.'){depPkg = this.getBuiltPkg(_build_js$path.normalize(pkg.dir + '/' + pkgref));}if(!depPkg){var importedAt=undefined,srcloc=null;if((importedAt = pkg.imports[pkgref]) && importedAt.length !== 0){srcloc = _build_js$SrcLocation(importedAt.nodes[0],importedAt.nodes[0].srcfile);}depPkg = yield pkg.pkgFromRef(pkgref,srcloc,this.target);if(!depPkg.isBuiltIn && !depPkg.isNPM){var builtPkg=this.getBuiltPkg(depPkg.dir);if(builtPkg){depPkg = builtPkg;}else {outdatedDeps.push(depPkg);}}}deps.push(depPkg);}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}return [deps,outdatedDeps];})},{key:'setupPackageModules',value:function setupPackageModules(pkg){if(!pkg.module){pkg.module = this.target.moduleForPackage(pkg,this.depth);}if(this.buildTests){if(!pkg.testModule){pkg.testModule = this.target.testModuleForPackage(pkg,this.depth);}}}},{key:'moduleSrcfilesForPkg',value:function moduleSrcfilesForPkg(pkg,srcfiles){var stdSrcFiles=srcfiles;var testSrcFiles=[];if(pkg.testModule){stdSrcFiles = [];testSrcFiles = [];srcfiles.forEach(function(f){if(f.isTest){testSrcFiles.push(f);}else {stdSrcFiles.push(f);}});}return [stdSrcFiles,testSrcFiles];}},{key:'moduleStatus',value:_$rt.asyncToGenerator(function*(pkg,mod,srcfiles){if(this.options.forceRebuild || !mod.filename || mod.filename === '-' || (yield this.isModuleOutdated(pkg,mod,srcfiles))){return _moduleStatus.OwnSourceChanged;}else if(this.depth === 0 && (yield this.isModuleOutdatedProgram(pkg,mod))){return _moduleStatus.ProgramDepsChanged;}else {return _moduleStatus.UpToDate;}})},{key:'buildModules',value:_$rt.asyncToGenerator(function*(pkg,srcfiles){this.setupPackageModules(pkg);var _moduleSrcfilesForPkg=this.moduleSrcfilesForPkg(pkg,srcfiles);var _moduleSrcfilesForPkg2=_$rt.slicedToArray(_moduleSrcfilesForPkg,2);var stdSrcFiles=_moduleSrcfilesForPkg2[0];var testSrcFiles=_moduleSrcfilesForPkg2[1];var pkgIdString=this.log.style.boldGreen(pkg.id);if(this.options.forceRebuild || !pkg.module.filename || pkg.module.filename === '-' || (yield this.isModuleOutdated(pkg,pkg.module,stdSrcFiles))){yield this.compileModule(pkg,pkg.module,stdSrcFiles);}else if(this.depth === 0 && (yield this.isModuleOutdatedProgram(pkg,pkg.module))){this.logDebug('updating program module for pkg',pkgIdString);this.target.preCompileModule(pkg,pkg.module,stdSrcFiles,this.depth);}else {this.logDebug('reusing up-to-date module for pkg',pkgIdString);pkg.imports = Pkg.importsFromModuleInfo(pkg.module.info);}if(pkg.testModule){if(this.options.forceRebuild || !pkg.testModule.filename || pkg.testModule.filename === '-' || (yield this.isModuleOutdated(pkg,pkg.testModule,testSrcFiles))){var basedOn={module:pkg.module,srcfiles:stdSrcFiles};yield this.compileModule(pkg,pkg.testModule,testSrcFiles,basedOn);if(pkg.testModule.info.main){throw new Error('test can not contain a main function');}var testImports=Pkg.importsFromModuleInfo(pkg.testModule.info);if(testImports){pkg.imports = Pkg.mergeImports(pkg.imports,testImports);}}else {this.logDebug('reusing up-to-date test module for pkg',pkgIdString);}}})},{key:'compileModule',value:_$rt.asyncToGenerator(function*(pkg,module,srcfiles,basedOn){if(this.log.level >= Logger.DEBUG){this.logDebug('compiling',module.typeName,'for package',this.log.style.boldGreen(pkg.id));}var compiler=new ModuleCompiler(pkg,module,basedOn,this.target,this.depth);var codebuf=yield compiler.compile(srcfiles);module.code = codebuf.code;module.map = codebuf.map.toJSON();module.stat = null;yield this.target.postCompileModule(pkg,module,srcfiles,this.depth);})},{key:'isModuleOutdated',value:_$rt.asyncToGenerator(function*(pkg,mod,srcfiles){var pkgid=this.log.style.boldGreen(pkg.id);if(!(yield mod.loadStat())){return true;}else if(srcfiles.some(function(sf){return sf.st.mtime > mod.stat.mtime;})){this.logDebug('module is outdated (source files changed) for pkg',pkgid);return true;}try{yield mod.load();}catch(err) {this.logWarn('error while loading module code:',err.message);return true;}{_build_js$assert(mod.info !== null);}var files=srcfiles.map(function(f){return f.name;});if(files.length !== mod.info.files.length){this.logDebug('module is outdated (number of source files differ) for pkg',pkgid);return true;}files.sort();mod.info.files.sort();for(var i=0,L=files.length;i !== L;++i) {if(files[i] !== mod.info.files[i]){this.logDebug('module is outdated (source files differ) for pkg',pkgid);return true;}}return false;})},{key:'isModuleOutdatedProgram',value:_$rt.asyncToGenerator(function*(pkg,mod){var _this2=this;{_build_js$assert(mod.info !== null);}if(mod.info.main){var _ret2=yield* (function*(){var outdatedDeps=undefined;var _ref3=yield _this2.resolvePkgDeps(pkg,mod.info.imports);var _ref32=_$rt.slicedToArray(_ref3,2);pkg.deps = _ref32[0];outdatedDeps = _ref32[1];var rootModMTime=mod.stat.mtime;var foundModifiedPkg=null;yield Promise.all(pkg.deps.map(_$rt.asyncToGenerator(function*(pkg){if(!foundModifiedPkg){({__proto__:_this2,buildTests:false}).setupPackageModules(pkg);yield pkg.module.load();if(!pkg.module.stat){console.log('no stat for module of package',pkg.id);}if(rootModMTime < pkg.module.stat.mtime){foundModifiedPkg = pkg;}}})));if(foundModifiedPkg){return {v:true};}})();if(typeof _ret2 === 'object')return _ret2.v;}return false;})},{key:'buildTests',get:function get(){return this.depth === 0 && this.options.buildTests;}}]);return BuildCtx;})();
function DupIDRefError(binding,otherBindings){return _compilectx_js$RefError(binding.file,binding.id,'duplicate identifier ' + String('`' + binding.id.name + '`') + ' in ' + String(binding.kind) + ' declaration',otherBindings.map(function(b){return {message:String(b.kind) + ' declared here',srcloc:_compilectx_js$SrcLocation(b.id,b.file)};}));}var CompileContext=(function(){function CompileContext(pkg,module,file,target,log){_$rt.classCallCheck(this,CompileContext);this.pkg = pkg;this.module = module;this.file = file;this.target = target;this.log = log;this.fileIDName = '_' + file.id;this.firstNonImportNode = {range:[Infinity]};this.imports = [];this.remappedIdentifiers = {};}_$rt.createClass(CompileContext,[{key:'localizeIdentifier',value:function localizeIdentifier(name){var newID=_compilectx_js$t.identifier(this.fileIDName + '$' + name);this.remappedIdentifiers[name] = newID.name;return newID;}},{key:'originalNameForLocalizedName',value:function originalNameForLocalizedName(name){for(var newName in this.remappedIdentifiers) {if(name === this.remappedIdentifiers[newName]){return newName;}}return null;}},{key:'addImplicitImport',value:function addImplicitImport(ref,specs){var node=arguments.length <= 2 || arguments[2] === undefined?null:arguments[2];this.imports.push(mkimport({ref:ref,specs:specs,node:node,isImplicit:true,srcfile:this.file}));}},{key:'registerFirstNonImport',value:function registerFirstNonImport(node){if(node.range && node.range[0] < this.firstNonImportNode.range[0]){this.firstNonImportNode = node;}}},{key:'checkIsBeforeFirstNonImport',value:function checkIsBeforeFirstNonImport(node){if(node.range && node.range[0] > this.firstNonImportNode.range[0]){throw _compilectx_js$ImportError(this.file,node,'unexpected import below non-import statement',null,[{message:String(this.firstNonImportNode.kind) + ' declared here',srcloc:_compilectx_js$SrcLocation(this.firstNonImportNode,this.file)}]);}}},{key:'registerExport',value:function registerExport(name,node){var isImplicitExport=arguments.length <= 2 || arguments[2] === undefined?false:arguments[2];var errmsg,existingExport=this.module.exports.get(name);if(existingExport){if(existingExport.node === node){if(this.log.level >= Logger.INFO){this.log.info(_compilectx_js$SrcError.formatSource(_compilectx_js$SrcLocation(node,this.file),'"export" statement has no effect on already implicitly-exported symbol',null,'magenta',0));}return;}errmsg = name === 'default'?'duplicate default export in package':'duplicate exported symbol in package';throw _compilectx_js$ExportError(this.file,node,errmsg,null,[{message:'also exported here',srcloc:_compilectx_js$SrcLocation(existingExport.node,existingExport.file)}]);}if(name === 'default'){var prevExports=[],prevExportsLimit=3;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this.module.exports.values()[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var _exp=_step.value;if(!_exp.isImplicit && prevExports.length < prevExportsLimit){prevExports.push({message:'specific export here',srcloc:_compilectx_js$SrcLocation(_exp.node,_exp.file)});}}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}if(prevExports.length){throw _compilectx_js$ExportError(this.file,node,'default export mixed with specific ' + (prevExports.length > 1?'exports':'export'),null,prevExports);}this.module.exports = new Map();this.file.exports = new Map();}else {var defaultExp=this.module.exports.get('default');if(defaultExp){if(isImplicitExport){return;}throw _compilectx_js$ExportError(this.file,node,'specific export mixed with default export',null,[{message:'default export here',srcloc:_compilectx_js$SrcLocation(defaultExp.node,defaultExp.file)}]);}}var exp={name:name,file:this.file,node:node,isImplicit:isImplicitExport};this.module.exports.set(name,exp);if(!this.file.exports){this.file.exports = new Map();}this.file.exports.set(name,exp);}},{key:'autoResolveIdentifier',value:function autoResolveIdentifier(node,parent,scope){var _this=this;var autoResolvers={React:function React(node,parent,scope){_this.addImplicitImport('react',{'default':'React'},node);return true;},ReactComponent:function ReactComponent(node,parent,scope){_this.addImplicitImport('react',{'Component':'ReactComponent'},node);return true;},'assert':function assert(node,parent,scope){if(_this.target.builtInModuleRefs['assert']){_this.addImplicitImport('assert',{'ok':'assert'},node);return true;}}};var resolver=autoResolvers[node.name];return resolver && resolver(node,parent,scope);}},{key:'verifyReference',value:function verifyReference(node,parent,scope,isNewName){var name=node.name;if(name in this.target.globals){return true;}var binding=scope.getBinding(name);if(binding){if(binding.references === 0){binding.reference();}return true;}if(scope.hasBinding(name,true)){return true;}if(this.autoResolveIdentifier(node,parent,scope)){return true;}if(!this.file.unresolvedIDs){this.file.unresolvedIDs = {};}var ref=this.file.unresolvedIDs[name];if(!ref){this.file.unresolvedIDs[name] = {node:node,level:scope.parent?1:0};if(this.file.superclassReferences){var superclassRef=this.file.superclassReferences[name];if(superclassRef){if(!this.file.unresolvedSuperclassIDs){this.file.unresolvedSuperclassIDs = {};}this.file.unresolvedSuperclassIDs[name] = superclassRef;}}}else if(!scope.parent && ref.level !== 0){ref.level = 0;}return false;}},{key:'_registerIDDefinitionInFile',value:function _registerIDDefinitionInFile(scope,name,binding){var _this2=this;if(binding.constantViolations.length !== 0){(function(){var errs=[];binding.constantViolations.reverse().forEach(function(v){if(v.shouldSkip || !v.node || !v.node.id){return;}var ids=v.getBindingIdentifiers();Object.keys(ids).forEach(function(name){var b=scope.bindings[name];{_compilectx_js$assert(b);}errs.push(IDBinding(ids[name],b.kind,_this2.file));});});if(errs.length !== 0){throw DupIDRefError(IDBinding(binding.identifier,binding.kind,_this2.file),errs);}})();}if(this.file._classDeclarationIDs && this.file._classDeclarationIDs[name]){binding.isClassDeclaration = true;}if(!this.file.definedIDs){this.file.definedIDs = {};}{_compilectx_js$assert(!this.file.definedIDs[name]);}this.file.definedIDs[name] = binding;}},{key:'_registerIDDefinitionInPkg',value:function _registerIDDefinitionInPkg(scope,name,binding){if(!this.pkg.definedIDs){this.pkg.definedIDs = {};}else {var existing=this.pkg.definedIDs[name];if(existing){var newfound=IDBinding(binding.identifier,binding.kind,this.file);existing = IDBinding(existing.binding.node,existing.binding.kind,existing.file);throw DupIDRefError(newfound,[existing]);}}var definition={binding:binding,file:this.file};this.pkg.definedIDs[name] = definition;if(name === 'main' && binding.path.type === 'FunctionDeclaration'){if(this.file.isTest){throw _compilectx_js$SrcError('SrcError',_compilectx_js$SrcLocation(binding.identifier,this.file),'main function not allowed in test file');}this.module.mainFunc = definition;}}},{key:'registerIDDefinitions',value:function registerIDDefinitions(scope){var _this3=this;Object.keys(scope.bindings).forEach(function(name){var b=scope.bindings[name];_compilectx_js$assert(!!b);switch(b.kind){case 'var':case 'let':case 'const':case 'hoisted':{_this3._registerIDDefinitionInFile(scope,name,b);_this3._registerIDDefinitionInPkg(scope,name,b);break;}case 'unknown':{if(b.path.type === 'TypeAlias' || b.path.type === 'InterfaceDeclaration'){}else {var loc=_compilectx_js$SrcLocation(b.identifier,_this3.file);_this3.log.warn(_compilectx_js$SrcError.formatSource(loc,'registerIDDefinitions: unexpected "unknown" binding'),_compilectx_js$repr(b,1));}break;}}});}},{key:'requireJoHelper',value:function requireJoHelper(name){var helper=this.target.joHelper(name);this.module.registerJoHelper(name);return helper;}}]);return CompileContext;})();
var _JOPATH,_paths;var Env=Object.create(null,{JOPATH:{enumerable:true,get:function get(){return _JOPATH || (_JOPATH = process.env.JOPATH?Env.parse(process.env.JOPATH):[]);},set:function set(v){_JOPATH = v;process.env.JOPATH = Env.format(v);_paths = null;}},JOROOT:{enumerable:true,value:process.env.JOROOT || (process.env.JOROOT = _env_js$path.dirname(__dirname))},paths:{enumerable:true,get:function get(){return _paths || (_paths = [Env.JOROOT].concat(Env.JOPATH));}},format:{value:function value(v){return v.join(':');}},parse:{value:function value(s){return s.split(':').map(function(v){return v.trim();}).filter(function(v){return v;});}},open:{value:function value(filename,flags,mode){return fsTryDirs1(filename,null,function(path,cb){return _env_js$fs.openAsync(path,flags,mode,cb);});}},readdir:{value:function value(dirname,basedirSuffix){return fsTryDirs1(dirname,basedirSuffix,_env_js$fs.readdirAsync);}}});function fsTryDirs1(filename,basedirSuffix,fn){return new Promise(function(resolve,reject){var paths=Env.paths;var dirs=basedirSuffix?paths.map(function(s){return s + '/' + basedirSuffix;}).concat(Env.JOPATH):paths;var next=function next(index){var basedir=dirs[index];var jopath=paths[index++];var pkgdir=basedir + '/' + filename;fn(pkgdir,function(err,ret){if(err && err.code === 'ENOENT'){if(index === dirs.length){err = new Error(_env_js$repr(filename) + ' not found in ' + (dirs.length > 1?'any of ':'') + dirs.map(_env_js$repr).join(', '));err.code = 'ENOENT';err.errno = 34;err.path = filename;}else {return next(index);}}if(err){reject(err);}else {resolve([ret,pkgdir,jopath]);}});};next(0);});}
function IDBinding(id,kind,file){return {id:id,kind:kind === 'hoisted'?'function':kind,file:file};}
var Mainv=_$rt.asyncToGenerator(function*(argv){var _ParseOpt$prog=_jo_js$ParseOpt.prog(argv);var _ParseOpt$prog2=_$rt.slicedToArray(_ParseOpt$prog,2);var prog=_ParseOpt$prog2[0];var argvRest=_ParseOpt$prog2[1];var _ParseOpt=_jo_js$ParseOpt(options,argvRest,usage,prog);var _ParseOpt2=_$rt.slicedToArray(_ParseOpt,3);var opts=_ParseOpt2[0];var args=_ParseOpt2[1];var dieusage=_ParseOpt2[2];if(args.length === 0){return dieusage('no command specified');}var cmdname=args[0];if(cmdname === 'help'){if(args.length === 1 || args[1] && args[1][0] === '-'){return dieusage();}args = [cmdname = args[1],'-help'];}var cmd=Commands[cmdname];if(!cmd){return dieusage(JSON.stringify(cmdname) + ' is not a command');}var cmdusage="{{prog}}" + (cmd.usage?" " + cmd.usage:"\n");var _ParseOpt3=_jo_js$ParseOpt(cmd.options || {},args.slice(1),cmdusage,prog + " " + cmdname,options);var _ParseOpt32=_$rt.slicedToArray(_ParseOpt3,3);var cmdopts=_ParseOpt32[0];var cmdargs=_ParseOpt32[1];var cmddieusage=_ParseOpt32[2];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=Object.keys(opts)[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var k=_step.value;if(cmdopts[k] === undefined || cmdopts[k] === null)cmdopts[k] = opts[k];}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}return yield cmd.main.call(cmd,cmdopts,cmdargs,cmddieusage);});var usage='Jo builds JavaScript programs\n{{prog}} <command>\n\nCommands:\n{{commands}}\n\nTerminology:\n  <pkg>     Packages to build. Can either be a directory (if starting with "." or "/"),\n            or a <pkgref>, which in the latter case the package is built from JOPATH.\n            Defaults to the current working directory if none specified.\n\n  <pkgref>  Package name with optional "@variant" suffix. What the variant means depends on\n            the source type. For a git repository, the variant is a branch, tag or commit.\n\n';var options={};var Commands={};function _jo_js$init(){Commands = {build:BuildCmd,test:TestCmd,remotectrl:RemoteControlCmd,env:EnvCmd,help:{argdesc:'<cmd>',desc:'Show help for a command'}};var cmds=Object.keys(Commands).map(function(name){return [Commands[name].argdesc?name + ' ' + Commands[name].argdesc:name,Commands[name]];});var cmdNameMaxLen=cmds.reduce(function(p,c){return Math.max(p,c[0].length);},0);var commandsUsage=cmds.map(function(c){return '  ' + c[0] + '                                               '.substr(0,cmdNameMaxLen - c[0].length) + '  ' + c[1].desc;}).join('\n');usage = usage.replace(/\{\{commands\}\}/g,commandsUsage);}
var EnvCmd={desc:'Prints Jo environment information',main:_$rt.asyncToGenerator(function*(opts,args,usage){for(var k in Env) {if(k === k.toUpperCase()){var v=typeof Env[k] === 'string'?Env[k]:Env.format(Env[k]);process.stdout.write(k + "=" + JSON.stringify(v) + "\n");}}})};
function mkimport(_ref){var ref=_ref.ref;var specs=_ref.specs;var _ref$node=_ref.node;var node=_ref$node === undefined?null:_ref$node;var _ref$isImplicit=_ref.isImplicit;var isImplicit=_ref$isImplicit === undefined?false:_ref$isImplicit;var _ref$srcfile=_ref.srcfile;var srcfile=_ref$srcfile === undefined?null:_ref$srcfile;return {type:'ImportDeclaration',jo_isImplicitImport:isImplicit,loc:node?node.loc:null,source:{type:'Literal',value:ref},specifiers:Object.keys(specs).map(function(origName){var local=null;if(specs[origName]){local = {type:'Identifier',name:specs[origName]};}var imported=null;if(origName !== 'default'){imported = {type:'Identifier',name:origName};}return {start:null,type:'ImportSpecifier',local:local,imported:imported,srcfile:srcfile};})};}

var RemoteControlCmd={desc:'Control Jo from another process',usage:'[-pid <pid>]\n\nOptions:\n{{options}}\n\n-pid <pid>\n  When -pid is provided, Jo will send heartbeat SIGCHLD signals to <pid> at\n  regular intervals. When such a heartbeat fail to deliver, the Jo process will\n  exit(1). This provides "zombie" protection i.e. when parent process crashes.\n\nCommunication\n  Remote-control mode uses stdio to communicate using JSON messages separated\n  by <LF> (\'\\n\'). When stdin closes, the Jo process will exit(0).\n\n  Sending an illegal command or arguments causes the Jo process to exit(1).\n\n  Caveats when issuing multiple concurrent commands:\n    - You should include an "id" property with some value that is unique to the\n      command request.\n    - Log messages will _not_ include an "id" and might be out-of order.\n    - When receiving a "result" message, you should compare its "id" property\n      to some internal set of "pending requests" to know what command request\n      actually finished.\n\nExample:\n  $ echo \'{"type":"runcmd","id":1,"args":["build", "foo"]}\' | {{prog}}\n  {"type":"log","id":1,level":"i","message":"building package foo"}\n  ...\n  {"type":"result","id":1,"error":"no source files found in package "foo""}\n\n',options:{pid:'<pid> Parent process identifier'},main:_$rt.asyncToGenerator(function*(opts,args,usage,cb){var sendResult=function sendResult(err,id){var r={type:"result"};if(id !== undefined){r.id = id;}if(err){r.error = err.description || (err.stack?err.stack.split(/\n+/)[0]:String(err));r.diagnostics = _cmd_remotectrl_js$SrcError.makeDiagnostics(err);}process.send(r);if(err){console.error(err.stack || String(err));}};yield _cmd_remotectrl_js$RemoteControl(opts.pid,function(msg,cb){if(msg.type === 'runcmd'){var f=function f(err){sendResult(err,msg.id);cb();};Mainv(process.argv.slice(0,2).concat(msg.args)).then(f)['catch'](f);}else {sendResult('unknown remote message "' + msg.type + '"');cb();}});console.log('remote control exited');})};
var SrcFile=(function(){function SrcFile(){_$rt.classCallCheck(this,SrcFile);}_$rt.createClass(SrcFile,[{key:'toString',value:function toString(){return this.name;}},{key:'isTest',get:function get(){var b=SrcFile.filenameIsTest(this.name);Object.defineProperty(this,'isTest',{value:b});return b;}}],[{key:'filenameMatches',value:function filenameMatches(fn){return fn.match(/^[^\.].*\.js$/);}},{key:'filenameIsTest',value:function filenameIsTest(fn){return fn[0] !== '_' && fn.endsWith('_test.js');}}]);return SrcFile;})();
function strCount(haystack,needle){var re=strCount.mem[needle] || (strCount.mem[needle] = new RegExp(needle.replace(/[-\/\\^$*+?.()|[\]{}]/g,'\\$&'),'g'));return (haystack.match(re) || []).length;}strCount.mem = {};
var TestRunner=_$rt.asyncToGenerator(function*(programs,args,opts){var r=new testRunner(opts);var exitCodes=yield r.run(programs,args);return !exitCodes.some(function(c){return c !== 0;});});var testRunner=(function(){function testRunner(opts){_$rt.classCallCheck(this,testRunner);this.opts = opts;this.processes = new Set();this.timeoutTimer = opts.timeout?setTimeout(this.onTimeout.bind(this),opts.timeout):null;this.programEnv = Object.assign({},process.env,{NODE_PATH:Env.JOROOT + '/node_modules'});if(process.env.NODE_PATH){this.programEnv.NODE_PATH += ':' + process.env.NODE_PATH;}}_$rt.createClass(testRunner,[{key:'onTimeout',value:function onTimeout(){this.processes.forEach(function(p){return p.kill('SIGKILL');});this.end('test timed out after ' + _testrunner_js$Duration.format(this.opts.timeout));}},{key:'run',value:function run(programs,args){var _this=this;return new Promise(function(resolve,reject){_this.end = function(err,codes){_this.end = function(){console.log('this.end called again');};if(err){reject(err);}else {resolve(codes);}};Promise.all(programs.map(function(program){return _this.runTestProgram(program,args);})).then(function(codes){return _this.end(null,codes);});});}},{key:'runTestProgram',value:function runTestProgram(program,args){var _this2=this;var p=_testrunner_js$child_process.spawn(program.filename,args,{stdio:'inherit',env:this.programEnv,cwd:program.workdir || _testrunner_js$os.tmpdir()});this.processes.add(p);return new Promise(function(resolve,reject){p.once('exit',function(code){_this2.processes['delete'](p);resolve(code);});p.once('error',reject);});}}]);return testRunner;})();
var WorkDir={path:_workdir_js$os.tmpdir().replace(/\/*$/,'') + '/jo-work-' + Date.now().toString(36),ensureDir:_$rt.asyncToGenerator(function*(relname){var dirname=this.path + '/' + relname;yield _workdir_js$fs.mkdirs(dirname);return dirname;}),enableRemoveAtExit:function enableRemoveAtExit(){process.on('exit',function(){try{removeSync(WorkDir.path);}catch(e) {}});}};function removeSync(path){var files=[];if(_workdir_js$fs.existsSync(path)){files = _workdir_js$fs.readdirSync(path);files.forEach(function(file,index){var curPath=path + "/" + file;if(_workdir_js$fs.lstatSync(curPath).isDirectory()){removeSync(curPath);}else {_workdir_js$fs.unlinkSync(curPath);}});_workdir_js$fs.rmdirSync(path);}}

var writeCode=_$rt.asyncToGenerator(function*(_ref2){var code=_ref2.code;var map=_ref2.map;var filename=_ref2.filename;var _ref2$filemode=_ref2.filemode;var filemode=_ref2$filemode === undefined?438:_ref2$filemode;var stream=_ref2.stream;var _ref2$inlineMap=_ref2.inlineMap;var inlineMap=_ref2$inlineMap === undefined?false:_ref2$inlineMap;if(filename && stream){throw new Error('both filename and stream are defined');}var c=contentsToWrite({code:code,map:map,inlineSourceMap:!!stream || inlineMap});if(stream){stream.write(c.code);}else {var wopt={mode:filemode,encoding:'utf8'};yield _writecode_js$fs.mkdirs(_writecode_js$path.dirname(filename));if(c.map){yield Promise.all([_writecode_js$fs.writeFile(filename,c.code,wopt),_writecode_js$fs.writeFile(filename + '.map',JSON.stringify(c.map),{encoding:'utf8'})]);}else {yield _writecode_js$fs.writeFile(filename,c.code,wopt);}}});function contentsToWrite(_ref){var code=_ref.code;var map=_ref.map;var _ref$inlineSourceMap=_ref.inlineSourceMap;var inlineSourceMap=_ref$inlineSourceMap === undefined?false:_ref$inlineSourceMap;if(!map || map.inline || inlineSourceMap || map.excluded){if(map && !map.excluded){var s='//#sourceMappingURL=data:application/json;charset:utf-8;base64,' + new Buffer(JSON.stringify(map),'utf8').toString('base64');if(code.indexOf('\n//#sourceMappingURL=') !== -1){code = code.replace(/\n\/\/#sourceMappingURL=.+\n/m,'\n' + s + '\n');}else {code += (code[code.length - 1] !== '\n'?'\n':'') + s + '\n';}}else {code = code.replace(/\n\/\/#sourceMappingURL=.+\n/m,'\n');}map = null;}return {code:code,map:map};}
var defaultTarget='nodejs';var BuildCmd=Object.defineProperties({argdesc:'[input]',desc:'Builds programs and packages',options:{o:'<file>        Output filename',target:'<target> Generate products for a specific target (defaults to "' + defaultTarget + '")',a:'              Force rebuilding of packages that are already up-to-date',globals:'<names> Comma separated list of custom global JS identifiers',dev:'            Build a development version (unoptimized, debug checks, etc)',dynamic:"        When making a program, load imported modules from disk at runtime rather than creating a statically-linked, self-contained program.",v:'              Print status messages',D:'              Print debugging messages, useful for developing jo',work:'       print the name of the temporary work directory and do not delete it when exiting'},main:_$rt.asyncToGenerator(function*(opts,args,usage,cb){args = _cmd_build_js$Unique(args.filter(function(arg){return arg.trim();}));if(opts.work){console.log('workdir:',WorkDir.path);}else {WorkDir.enableRemoveAtExit();}var pkgs=[];if(args.length === 0){pkgs = [yield Pkg.fromRef('.')];}else if(args.some(SrcFile.filenameMatches)){pkgs = [Pkg.fromFiles(args)];}else {pkgs = yield Promise.all(args.map(function(ref){return Pkg.fromRef(ref);}));}if(pkgs.length > 1 && opts.o){throw '-o can not be specified when building multiple packages';}var logger=new Logger(opts.D?Logger.DEBUG:opts.v?Logger.INFO:Logger.WARN);var targetMode=opts.dev?TARGET_MODE_DEV:TARGET_MODE_RELEASE;var target=Target.create(opts.target || defaultTarget,targetMode,{logger:logger,output:opts.o,globals:opts.globals?opts.globals.split(/[\s ]*,[\s ]*/g):null,staticLinking:!opts.dynamic});if(target.preMake){yield target.preMake(pkgs);}var buildCtx=new BuildCtx(target,logger,{forceRebuild:!!opts.a,buildTests:!!opts._testing});yield Promise.all(pkgs.map(function(pkg){return buildCtx.buildPkg(pkg);}));if(target.postMake){yield target.postMake(pkgs);}return pkgs;})},{usage:{get:function get(){var usage='[options] [<package>...]\n{{prog}} [options] <srcfile>...\n\nOptions:\n{{options}}\n\n<package>\n  If the arguments are a list of source files, build treats them as a list of\n  source files specifying a single package.\n\n  When the command line specifies a single main package, build writes the\n  resulting executable to -o=<file>. Otherwise build compiles the packages but\n  discards the results, serving only as a check that the packages can be built.\n\n  If no arguments are provided, the current working directory is assumed to be\n  a package.\n\n-o <file>\n  The -o flag specifies the output file name. If not specified, the output\n  file name depends on the arguments and derives from the name of the package,\n  such as p.pkg.js for package p, unless p is \'main\'. If the package is main\n  and file names are provided, the file name derives from the first file name\n  mentioned, such as f1 for \'{{prog}} f1.js f2.js\'; with no files provided\n  (\'{{prog}}\'), the output file name is the base name of the containing\n  directory. If "-" is specified as the output file, output is written to stdout.\n\n-target <target>\n  Specify product target, where <target> can be one of:\n{{targets}}\n';var targets='';for(var targetID in Targets) {var target=Targets[targetID];targets += '    ' + targetID + (targetID === defaultTarget?' (default)':'') + '\n';}var params={targets:targets,defaultTarget:defaultTarget};usage = usage.replace(/\{\{([^\}]+)\}\}/g,function(verbatim,k){return params[k]?params[k]:verbatim;});return usage;},configurable:true,enumerable:true}});function lazyInitUsage(){var targets='';for(var targetID in Targets) {var target=Targets[targetID];targets += '    ' + targetID + (targetID === defaultTarget?' (default)':'') + '\n';}var params={targets:targets,defaultTarget:defaultTarget};BuildCmd.usage = BuildCmd.usage.replace(/\{\{([^\}]+)\}\}/g,function(verbatim,k){return params[k]?params[k]:verbatim;});}
var TestCmd={argdesc:'[input]',desc:'Tests programs and packages',usage:'[build and test flags] [<package>...] [flags for test binary]\n\n\'jo test\' automates testing the packages named by the import paths.\nIt prints a summary of the test results in the format:\n\n  ok   jo/util         0.011s\n  FAIL jo/remotectrl   0.022s\n  ok   jo/transformers 0.033s\n  ...\n\nfollowed by detailed output for each failed package.\n\n\'jo test\' recompiles each package along with any files with names matching\nthe file pattern "*_test.js".\nFiles whose names begin with "_" (including "_test.js") or "." are ignored.\n\nIn addition to the build flags, the flags handled by \'go test\' itself are:\n\n  -timeout <duration>\n      Sets an aggregate time limit for all tests.\n\n  <duration>\n      A positive number with suffix "ms" or "s".\n\nFor more about build flags, see \'jo help build\'.\n',options:Object.assign({timeout:'<duration>  Sets an aggregate time limit for all tests'},BuildCmd.options),main:_$rt.asyncToGenerator(function*(opts,args,usage,cb){opts = Object.assign({_testing:true},opts);var pkgs=yield BuildCmd.main(opts,args,usage,cb);var programs=pkgs.map(function(pkg){return {filename:pkg.testModule.program.filename,workdir:pkg.dir};});if(opts.v || opts.D){args.push('test.v');}if(opts.timeout){opts.timeout = _cmd_test_js$Duration.parse(opts.timeout);}var ok=yield TestRunner(programs,args,opts);if(!ok){process.exit(1);}})};
function lastPathComponent(name){var v=name.split('/'),i=v.length,s;while(s = v[--i]) {if(s !== '')return s;}throw new Error('empty pathname');}var staticallyLinkedModuleCode='  , __$gm = function(q, r, w) {\n      var f, m = __$m[r];\n      if (m === undefined) {\n        throw new Error(\'unknown package module "\'+r+\'"\');\n      }\n      if (!m.exports) {\n        f = m;\n        __$m[r] = m = {exports:{}, id:r};\n        f(q, m, m.exports);\n      }\n      return m.exports;\n    }\n  , __$i = function(m){ return m && m.__esModule ? (m["default"] || m) : m; }\n  , __$iw = function(m){ return m && m.__esModule ? m : {"default":m}; }\n  , __$im = function(q,r){ return __$i(__$gm(q,r)); }\n  , __$imw = function(q,r){ return __$iw(__$gm(q,r)); }';var dynamicModuleCode='  , __$dlm = function(q, ref){\n      for(var i = 0, L = __$JOPATH.length; i !== L; ++i){\n        try {\n          return q(__$JOPATH[i] + ref + "/index.js");\n        } catch (e) {\n          if (i === L-1) throw e;\n        }\n      }\n    }\n  , __$i = global.__$i = function(m){ return m && m.__esModule ? (m["default"] || m) : m; }\n  , __$iw = global.__$iw = function(m){ return m && m.__esModule ? m : {"default":m}; }\n  , __$im = global.__$im = function(q,r){ return __$i(__$dlm(q,r)); }\n  , __$imw = global.__$imw = function(q,r){ return __$iw(__$dlm(q,r)); }';var NodeJSProgram=(function(){function NodeJSProgram(pkg,module,srcfiles,target){_$rt.classCallCheck(this,NodeJSProgram);this.pkg = pkg;this.module = module;this.srcfiles = srcfiles;this.target = target;if(this.target.options.output){this.filename = this.target.options.output;}else {this.filename = this.filenameDir() + '/' + this.programName();}}_$rt.createClass(NodeJSProgram,[{key:'filenameDir',value:function filenameDir(){if(this.pkg.jopath){return this.pkg.jopath + '/bin';}else {return '.';}}},{key:'programName',value:function programName(){return lastPathComponent(this.pkg.ref || this.pkg.dir) + (this.target.isDevMode?'-g':'');}},{key:'execProgramName',value:function execProgramName(){return 'iojs';}},{key:'shebang',value:function shebang(){var args=' --harmony --es_staging';if(this.target.isDevMode){args += ' --stack-trace-limit=25';}return '#!/usr/bin/env ' + this.execProgramName() + args + '\n';}},{key:'JOROOTCode',value:function JOROOTCode(){var code=undefined;var dstDirAbs=_nodejs_program_js$path.dirname(_nodejs_program_js$path.resolve(this.filename));var optRelocateable=true;if(dstDirAbs.indexOf(Env.JOROOT) === 0){if(this.pkg.ref === 'jo/jo'){optRelocateable = false;}var relpath=_nodejs_program_js$path.relative(dstDirAbs,Env.JOROOT);if(relpath === '..'){code = 'require("path").dirname(__dirname)';}else {code = 'require("path").resolve(__dirname+' + JSON.stringify(relpath).replace(/^"/,'"/') + ')';}}else {code = JSON.stringify(Env.JOROOT);}if(optRelocateable){code = 'process.env.JOROOT||' + code;}return code;}},{key:'addEntryCode',value:function addEntryCode(codebuf){codebuf.append('main(process.argv);\n');}},{key:'resolveDependencies',value:function resolveDependencies(){var _this=this;var babelHelpers=null;var joHelpers=null;var deps={};var addHelpers=function addHelpers(module){if(!(module instanceof PrecompiledModule)){{_nodejs_program_js$assert(module.info);}if(module.info.rt){module.info.rt.forEach(function(ref){if(ref.startsWith('jo.')){if(!joHelpers){joHelpers = new Set();}joHelpers.add(_this.target.joHelper(ref.substr(3)));}else {if(!babelHelpers){babelHelpers = {};}babelHelpers[ref] = true;}});}}};var visit=function visit(pkg,depth){var dep=deps[pkg.id];if(dep){dep.score += depth;}else {deps[pkg.id] = dep = {pkg:pkg,score:depth};if(!(module instanceof PrecompiledModule) && !(pkg instanceof NPMPkg)){if(!pkg.module){console.log('visit:',pkg);}{_nodejs_program_js$assert(pkg.module);}addHelpers(pkg.module);}}visitDeps(pkg,depth + 1);};var visitDeps=function visitDeps(pkg,depth){pkg.deps.forEach(function(pkg){if(!(pkg instanceof BuiltInPkg)){visit(pkg,depth);}});};addHelpers(this.pkg.module);if(this.module !== this.pkg.module){addHelpers(this.module);}visitDeps(this.pkg,1);deps = Object.keys(deps).map(function(k){return deps[k];});deps.sort(function(a,b){return b.score === a.score?b.pkg.id < a.pkg.id?-1:1:b.score - a.score;});if(!(this.module instanceof TestModule)){deps = deps.filter(function(d){if(d.pkg.module === _this.module){{_nodejs_program_js$assert(d.score === 1);}return false;}else {return true;}});}return {babelHelpers:babelHelpers?Object.keys(babelHelpers):null,joHelpers:joHelpers,pkgs:deps.map(function(dep){return dep.pkg;})};}},{key:'addModuleCode',value:function addModuleCode(module,codebuf){var code=module.code.replace(/\n\/\/#sourceMappingURL=.+\n/gm,'\n\n');if(module.map){codebuf.appendMapped(code,module.map);}else {codebuf.append(code);}}},{key:'addHeaderCode',value:function addHeaderCode(codebuf){}},{key:'write',value:_$rt.asyncToGenerator(function*(){var _this2=this;var deps=this.resolveDependencies();var codebuf=new CodeBuffer2();var staticLinking=this.target.options.staticLinking;codebuf.append(this.shebang() + '"use strict";\n');if(this.target.isDevMode){codebuf.append('process.env.JO_PROGRAM_START_TIME = Date.now();\n');}codebuf.append('var _$JOROOT=' + this.JOROOTCode() + ';\n');var fn='/node_modules/source-map-support/source-map-support.js';codebuf.append('try{require(_$JOROOT+' + JSON.stringify(fn) + ').install();}catch(_){}\n');var corejsPath='/node_modules/core-js';if(staticLinking){var _ref=yield Promise.all([_nodejs_program_js$fs.readFile(Env.JOROOT + corejsPath + '/client/core.min.js',{encoding:'utf8'}),_nodejs_program_js$fs.readFile(Env.JOROOT + corejsPath + '/client/core.min.js.map',{encoding:'utf8'})]);var _ref2=_$rt.slicedToArray(_ref,2);var corejsCode=_ref2[0];var corejsMap=_ref2[1];corejsCode = corejsCode.replace(/\n\/\/#[ \s]*sourceMappingURL=.+\n?/gm,'\n');corejsMap = JSON.parse(corejsMap);codebuf.appendMapped(corejsCode,corejsMap);}else {codebuf.append('require(_$JOROOT+' + JSON.stringify(corejsPath + '/client/core.js') + ');\n');}if(staticLinking){codebuf.append('var __$m = {}\n');}else {var pkgDirName='/pkg/' + this.target.pkgDirName + '/';codebuf.append('var __$JOPATH = Array.prototype.concat.apply([' + '_$JOROOT+' + JSON.stringify(pkgDirName) + ',__dirname+' + JSON.stringify("/.." + pkgDirName) + '],process.env.JOPATH ? process.env.JOPATH.split(":") : [])\n');}if(staticLinking){codebuf.append(staticallyLinkedModuleCode + ';\n');}else {codebuf.append(dynamicModuleCode + ';\n');}if(deps.babelHelpers){var helpersCode=_nodejs_program_js$babel.buildExternalHelpers(deps.babelHelpers,'var') + '\n';helpersCode = helpersCode.replace(/babelHelpers(\.|\[| \=)/g,'_$rt$1');helpersCode = helpersCode.replace('var _$rt =','var _$rt = global._$rt =');codebuf.append(helpersCode);}else if(deps.joHelpers){codebuf.append('var _$rt = global._$rt = {};\n');}if(deps.joHelpers){this.target.genJoHelpers(deps.joHelpers,codebuf);}this.addHeaderCode(codebuf);if(staticLinking){yield Promise.all(deps.pkgs.map(function(pkg){return pkg.module.load();}));deps.pkgs.forEach(function(pkg){if(pkg.module && pkg.module.code){codebuf.append('__$m["' + pkg.ref + '"] = function(require,module,exports){\n');_this2.addModuleCode(pkg.module,codebuf);codebuf.append('\n};\n');}});}if(this.module !== this.pkg.module){{_nodejs_program_js$assert(this.module !== this.pkg.module);_nodejs_program_js$assert(this.pkg.module.code !== null);}this.addModuleCode(this.pkg.module,codebuf);}this.addModuleCode(this.module,codebuf);this.addEntryCode(codebuf);if(this.target.log.level >= Logger.DEBUG){var style=this.target.log.style;var dst='';if(this.filename === '-'){dst = 'to stdout';}else {dst = style.boldMagenta(this.filename);}this.target.log.debug('write program',dst,'of package',style.boldGreen(this.pkg.id));}yield writeCode({code:codebuf.code,map:codebuf.sourceMapAsJSON(),stream:this.filename === '-'?process.stdout:null,filename:this.filename === '-'?null:this.filename,filemode:511,inlineMap:true});})}]);return NodeJSProgram;})();
var NodeJSTestProgram=(function(_NodeJSProgram){_$rt.inherits(NodeJSTestProgram,_NodeJSProgram);function NodeJSTestProgram(){_$rt.classCallCheck(this,NodeJSTestProgram);_$rt.get(Object.getPrototypeOf(NodeJSTestProgram.prototype),'constructor',this).apply(this,arguments);}_$rt.createClass(NodeJSTestProgram,[{key:'filenameDir',value:function filenameDir(){if(this.pkg.jopath){return WorkDir.path + '/testpkg';}else {return WorkDir.path + '/testdir';}}},{key:'programName',value:function programName(){return (this.pkg.ref || this.pkg.dir.replace(/^\/+|\/$/g,'').replace(/\//g,'.')) + (this.target.isDevMode?'-g':'');}},{key:'addHeaderCode',value:function addHeaderCode(codebuf){codebuf.append('var __$jotests = new Map;\n');}},{key:'addEntryCode',value:function addEntryCode(codebuf){codebuf.append('__$im(require,"testing").MainStart("' + this.pkg.id + '",__$jotests,process.argv);\n');}}]);return NodeJSTestProgram;})(NodeJSProgram);
function _$record(name,prototype){Object.defineProperties(prototype,{__name:{value:name},toString:{value:function toString(){return "<record " + this.__name + " " + JSON.stringify(this) + ">";}}});{Object.freeze(prototype);}var record=function record(properties){var k,v,props={};for(k in properties) {v = properties[k];if(v !== undefined){props[k] = {value:v,enumerable:true};}{if(!(k in prototype)){throw new Error('unexpected property ' + JSON.stringify(k) + ' assigned to record ' + name);}}}return Object.create(prototype,props);};record["default"] = prototype;return record;}
var TARGET_MODE_DEV='dev';var TARGET_MODE_RELEASE='release';var Targets={};var TargetOptions=_$record("TargetOptions",{logger:undefined,output:null,globals:null,warningsAsErrors:false,staticLinking:false});var runtimeHelpersIDName="_$rt";var runtimeHelpersID=Object.freeze(_target_js$t.identifier(runtimeHelpersIDName));var GLOBAL_STD=1;var GLOBAL_DEPRECATED=2;var GLOBAL_UNSAFE=4;var GLOBAL_EXPERIMENTAL=8;var GLOBAL_USER=16;var globalJSNames=_$rt.defineProperty({'Infinity':GLOBAL_STD,'NaN':GLOBAL_STD,'null':GLOBAL_STD,'undefined':GLOBAL_STD,'eval':GLOBAL_STD,'uneval':GLOBAL_UNSAFE,'isFinite':GLOBAL_STD,'isNaN':GLOBAL_STD,'parseFloat':GLOBAL_STD,'parseInt':GLOBAL_STD,'decodeURI':GLOBAL_STD,'decodeURIComponent':GLOBAL_STD,'encodeURI':GLOBAL_STD,'encodeURIComponent':GLOBAL_STD,'escape':GLOBAL_DEPRECATED,'unescape':GLOBAL_DEPRECATED,'Object':GLOBAL_STD,'Function':GLOBAL_STD,'Boolean':GLOBAL_STD,'Symbol':GLOBAL_STD,'Error':GLOBAL_STD,'EvalError':GLOBAL_STD,'InternalError':GLOBAL_STD,'RangeError':GLOBAL_STD,'ReferenceError':GLOBAL_STD,'SyntaxError':GLOBAL_STD,'TypeError':GLOBAL_STD,'URIError':GLOBAL_STD,'Number':GLOBAL_STD,'Math':GLOBAL_STD,'Date':GLOBAL_STD,'String':GLOBAL_STD,'RegExp':GLOBAL_STD,'Array':GLOBAL_STD,'Int8Array':GLOBAL_STD,'Uint8Array':GLOBAL_STD,'Uint8ClampedArray':GLOBAL_STD,'Int16Array':GLOBAL_STD,'Uint16Array':GLOBAL_STD,'Int32Array':GLOBAL_STD,'Uint32Array':GLOBAL_STD,'Float32Array':GLOBAL_STD,'Float64Array':GLOBAL_STD,'Map':GLOBAL_STD,'Set':GLOBAL_STD,'WeakMap':GLOBAL_STD,'WeakSet':GLOBAL_STD,'SIMD':GLOBAL_EXPERIMENTAL,'ArrayBuffer':GLOBAL_STD,'DataView':GLOBAL_STD,'JSON':GLOBAL_STD,'Promise':GLOBAL_STD,'Generator':GLOBAL_EXPERIMENTAL,'GeneratorFunction':GLOBAL_EXPERIMENTAL,'Reflect':GLOBAL_EXPERIMENTAL,'Proxy':GLOBAL_EXPERIMENTAL,'Intl':GLOBAL_EXPERIMENTAL,'arguments':GLOBAL_STD},runtimeHelpersIDName,GLOBAL_STD);var Target=(function(){_$rt.createClass(Target,null,[{key:'create',value:function create(id,mode){var options=arguments.length <= 2 || arguments[2] === undefined?TargetOptions['default']:arguments[2];switch(mode){case undefined:case null:mode = TARGET_MODE_RELEASE;break;case TARGET_MODE_RELEASE:case TARGET_MODE_DEV:break;default:throw new Error('unknown target mode "' + String(mode) + '"');}var TargetType=Targets[id.toLowerCase()];if(!TargetType){throw new Error('unknown target identifier "' + String(id) + '" (available targets: ' + String(Object.keys(Targets)) + ')');}return new TargetType(id,mode,TargetOptions(options));}}]);function Target(id,mode,options){_$rt.classCallCheck(this,Target);this.id = id;this.mode = mode;this.options = options;this.globals = {__proto__:globalJSNames};this.builtInModuleRefs = {};this._joHelpers = {};if(options.globals){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=options.globals[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var globalName=_step.value;this.globals[globalName] = GLOBAL_USER;}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}}}_$rt.createClass(Target,[{key:'registerGlobals',value:function registerGlobals(globals){globals.__proto__ = this.globals;this.globals = globals;}},{key:'registerBuiltInModules',value:function registerBuiltInModules(refs){var _this=this;refs.forEach(function(ref){_this.builtInModuleRefs[ref] = true;});}},{key:'moduleForPackage',value:function moduleForPackage(pkg,depLevel){return new Module({filename:this.moduleFilename(pkg,depLevel)});}},{key:'testModuleForPackage',value:function testModuleForPackage(pkg){throw new Error('target "' + this.id + '" does not support testing');}},{key:'moduleFilename',value:function moduleFilename(pkg,depLevel){if(pkg.jopath && pkg.ref){return pkg.jopath + '/pkg/' + this.pkgDirName + '/' + pkg.ref + '/index.js';}return WorkDir.path + '/' + (pkg.ref?'pkg/' + this.pkgDirName + '/' + pkg.ref:'pkgdir/' + this.pkgDirName + pkg.dir) + '.js';}},{key:'precompiledModuleFilename',value:function precompiledModuleFilename(pkg,depLevel){return this.moduleFilename(pkg,depLevel);}},{key:'transforms',value:function transforms(_transforms){if(this.mode === TARGET_MODE_RELEASE){_transforms = _transforms.concat(['minification.removeDebugger']);}return _transforms;}},{key:'disabledTransforms',value:function disabledTransforms(_disabledTransforms){return _disabledTransforms;}},{key:'resolveRequiredRuntimeModules',value:function resolveRequiredRuntimeModules(pkg){var runtimeModules=[];var visited={};var visit=function visit(pkg){if(pkg.dir in visited)return;visited[pkg.dir] = true;var runtimeMods=pkg.module.info?pkg.module.info['importsrt']:null;if(runtimeMods){runtimeModules = runtimeModules.concat(runtimeMods);}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=pkg.deps[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var depPkg=_step2.value;visit(depPkg);}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}};visit(pkg);return _target_js$Unique(runtimeModules);}},{key:'helpersObjectASTForFile',value:function helpersObjectASTForFile(srcfile){return runtimeHelpersID;}},{key:'runtimeHelperSourceFilename',value:function runtimeHelperSourceFilename(ref){var basedir=Env.JOROOT + '/node_modules/babel-runtime/';if(ref === 'regenerator'){return basedir + 'regenerator/runtime.js';}else {return basedir + ref + '.js';}}},{key:'preCompileModule',value:function preCompileModule(pkg,module,srcfiles,depLevel){}},{key:'postCompileModule',value:_$rt.asyncToGenerator(function*(pkg,module,srcfiles,depLevel){var log=this.log;if(log.level >= Logger.DEBUG){log.debug('write',module.typeName,log.style.boldMagenta(module.filename),'of package',log.style.boldGreen(pkg.id));}yield module.write();})},{key:'joHelper',value:function joHelper(name){var helper=this._joHelpers[name];if(!helper){helper = _target_js$helpers['Helper_' + name];if(!helper){throw new Error('unknown jo helper "' + name + '"');}this._joHelpers[name] = helper = new helper(name);helper.idNode = _target_js$t.identifier('jo$' + name);}return helper;}},{key:'joHelperAccessNode',value:function joHelperAccessNode(helper){return _target_js$t.memberExpression(runtimeHelpersID,helper.idNode);}},{key:'genJoHelpers',value:function genJoHelpers(helpers,codebuf){helpers.forEach(function(helper){var _helper$gen=helper.gen();var _helper$gen2=_$rt.slicedToArray(_helper$gen,2);var code=_helper$gen2[0];var map=_helper$gen2[1];if(code){codebuf.append(runtimeHelpersIDName + '.' + helper.idNode.name + ' = ');if(map){codebuf.appendMapped(code,map);}else {codebuf.append(code);}}});}},{key:'log',get:function get(){return this.options.logger;}},{key:'isDevMode',get:function get(){return this.mode === TARGET_MODE_DEV;}},{key:'targetForDependency',get:function get(){return this;}},{key:'moduleType',get:function get(){return 'ignore';}},{key:'pkgDirName',get:function get(){return this.id + '.' + this.mode;}}]);return Target;})();
var BrowserTarget=(function(_Target){_$rt.inherits(BrowserTarget,_Target);function BrowserTarget(id,mode,options){_$rt.classCallCheck(this,BrowserTarget);_$rt.get(Object.getPrototypeOf(BrowserTarget.prototype),'constructor',this).call(this,id,mode,options);this.registerGlobals({'window':GLOBAL_STD,'WSH':GLOBAL_STD,'Image':GLOBAL_STD,'XMLHttpRequest':GLOBAL_STD,'Notification':GLOBAL_STD,'Storage':GLOBAL_STD,'Option':GLOBAL_STD,'FormData':GLOBAL_STD,'require':GLOBAL_STD,'exports':GLOBAL_STD,'alert':GLOBAL_STD,'confirm':GLOBAL_STD,'console':GLOBAL_STD,'Debug':GLOBAL_STD,'opera':GLOBAL_STD,'prompt':GLOBAL_STD,'setInterval':GLOBAL_STD,'setTimeout':GLOBAL_STD,'clearInterval':GLOBAL_STD,'clearTimeout':GLOBAL_STD,'document':GLOBAL_STD,'event':GLOBAL_STD,'frames':GLOBAL_STD,'history':GLOBAL_STD,'localStorage':GLOBAL_STD,'location':GLOBAL_STD,'name':GLOBAL_STD,'navigator':GLOBAL_STD,'parent':GLOBAL_STD,'screen':GLOBAL_STD,'sessionStorage':GLOBAL_STD});this.modules = [];}_$rt.createClass(BrowserTarget,[{key:'transforms',value:function transforms(_transforms){return _$rt.get(Object.getPrototypeOf(BrowserTarget.prototype),'transforms',this).call(this,_transforms).concat(['regenerator']);}},{key:'moduleFilename',value:function moduleFilename(pkg,depLevel){var filename;if(pkg.ref){filename = pkg.ref.replace(/\//g,'.');}else {_target_browser_js$path.basename(pkg.dir);}filename = '.jopkg.' + filename + '.js';this.modules.push({filename:filename,pkg:pkg});return this.outputDir + '/' + filename;}},{key:'loadHTMLTemplate',value:_$rt.asyncToGenerator(function*(pkg){var filename=pkg.dir + '/index.template.html';try{return {code:yield _target_browser_js$fs.readFile(filename,{encoding:'utf8'}),filename:filename};}catch(e) {return null;}})},{key:'preMake',value:_$rt.asyncToGenerator(function*(pkgs){if(pkgs.length !== 1){throw new Error('-target=browser only supports a single top-level package');}this.outputDir = pkgs[0].dir;})},{key:'postMake',value:_$rt.asyncToGenerator(function*(pkgs){var pkg=pkgs[0];if(!pkg.hasMainFunc){throw 'No main() function found in package ' + pkg.id;}var htmlTemplate=yield this.loadHTMLTemplate(pkg);if(!htmlTemplate){throw new Error('unable to find HTML template index.template.html in "' + pkg.dir + '"');}var insertOffs=htmlTemplate.code.indexOf('</head>');if(insertOffs === -1){if((insertOffs = htmlTemplate.code.indexOf('<body>')) !== -1){insertOffs += '<body>'.length;}else {throw new Error("can't find </head> or <body> in HTML template");}}var additionalModuleURLs=[];var runtimeModules=this.resolveRequiredRuntimeModules(pkg);if(runtimeModules.length !== 0){var runtimeFilename='.jopkg.babel-runtime.js';var version=yield this.genRuntime(runtimeModules,pkg.dir + '/' + runtimeFilename);additionalModuleURLs.push(runtimeFilename + '?' + version);}var bootCode=this.genBootCode(pkg,additionalModuleURLs);var code='<!--' + JSON.stringify(this.genPkgInfo(pkg)) + '-->\n' + htmlTemplate.code.substr(0,insertOffs) + bootCode + htmlTemplate.code.substr(insertOffs);var productFilename=pkg.dir + '/index.html';yield _target_browser_js$fs.writeFile(productFilename,code,{encoding:'utf8'});})},{key:'genPkgInfo',value:function genPkgInfo(mainPkg){var files=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this.modules[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var m=_step.value;if(m.pkg.module instanceof PrecompiledModule){files.push(_target_browser_js$path.relative(mainPkg.dir,m.pkg.module.filename));}else {var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=m.pkg.module.info.files[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var file=_step2.value;files.push(_target_browser_js$path.relative(mainPkg.dir,m.pkg.dir + '/' + file));}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2['return']){_iterator2['return']();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}}}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}return {files:files};}},{key:'genRuntime',value:_$rt.asyncToGenerator(function*(refs,outFilename){var _this=this;var code='';refs = refs.slice();refs.sort(function(a,b){return a === 'core-js'?-1:b === 'core-js'?1:0;});var filenames=refs.map(function(ref){return _this.runtimeHelperSourceFilename(ref);});var outs=_target_browser_js$fs.createWriteStream(outFilename,{encoding:'utf8'});var mtimes=yield Promise.all(filenames.map(function(srcFilename,i){return _this._writeRuntimeModule(refs[i],outs,srcFilename);}));yield new Promise(function(resolve,reject){outs.end(function(err){if(err)reject(err);else resolve();});});return mtimes.reduce(function(m,v){return Math.max(m,v);},0).toString(36);})},{key:'_writeRuntimeModule',value:_$rt.asyncToGenerator(function*(ref,outs,srcFilename){var st=yield _target_browser_js$fs.stat(srcFilename);var code=yield _target_browser_js$fs.readFile(srcFilename,{encoding:'utf8'});outs.write(this._moduleHeader('babel-runtime/' + ref,false));outs.write(code);outs.write(this._moduleFooter(false));return st.mtime.getTime();})},{key:'filterPrecompiledModuleCode',value:function filterPrecompiledModuleCode(pkg,code){return this.pkgModuleHeader(pkg) + code + this.pkgModuleFooter(pkg);}},{key:'pkgModuleHeader',value:function pkgModuleHeader(pkg,module,depLevel){return this._moduleHeader(pkg.ref,module.hasMainFunc);}},{key:'pkgModuleFooter',value:function pkgModuleFooter(pkg,module,depLevel){return this._moduleFooter(module.hasMainFunc);}},{key:'_moduleHeader',value:function _moduleHeader(ref,isMain){var code;if(!ref || isMain){code = '_$jomain';}else {code = '_$jomodules[' + JSON.stringify(ref) + ']';}return code + ' = function(module,exports,require){';}},{key:'_moduleFooter',value:function _moduleFooter(isMain){return isMain?'main();};':'};';}},{key:'genBootCode',value:function genBootCode(pkg,additionalModuleURLs){var t=Date.now().toString(36);var code='<script type="text/javascript">\n    _$jomodules = {};\n    (function(){\n      var waitcount = ' + String(this.modules.length + additionalModuleURLs.length) + ';\n      var onload = function() {\n        var ref, onmessage, joboot;\n        if (--waitcount === 0) {\n          joboot = function() {\n            var modules = {}, require = function(ref) {\n              var m = modules[ref];\n              if (!m) {\n                modules[ref] = m = {exports:{}};\n                var f = _$jomodules[ref];\n                if (!f) {\n                  throw new Error(\'module not found "\'+ref+\'"\');\n                }\n                f(m, m.exports, require);\n              }\n              return m.exports;\n            };\n            _$jomain({}, {}, require);\n            _$jomodules = null;\n          };\n          if (window.postMessage !== undefined) {\n            onmessage = function (ev) {\n              if ((ev.source === window || ev.source === null) && ev.data === \'joboot\') {\n                ev.stopPropagation();\n                window.removeEventListener(\'message\', onmessage, true);\n                joboot();\n              }\n            };\n            window.addEventListener(\'message\', onmessage, true);\n            window.postMessage(\'joboot\', \'*\');\n          } else {\n            setTimeout(joboot, 0);\n          }\n        }\n      };\n      var h = document.head || document.body || document.documentElement;\n      var lm = function(url) {\n        var s = document.createElement(\'script\');\n        s.defer  = true;\n        s.async  = true;\n        s.onload = onload;\n        s.type   = \'text/javascript\';\n        s.src    = url;\n        h.appendChild(s);\n      };';var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=this.modules[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);_iteratorNormalCompletion3 = true) {var m=_step3.value;var version='';if(m.pkg.module.stat){version = '?' + m.pkg.module.stat.mtime.getTime().toString(36);}else if(m.pkg.module.info && m.pkg.module.info.version){version = '?' + m.pkg.pkgInfo.version;}code += '\n      lm(' + JSON.stringify(m.filename + version) + ');';}}catch(err) {_didIteratorError3 = true;_iteratorError3 = err;}finally {try{if(!_iteratorNormalCompletion3 && _iterator3['return']){_iterator3['return']();}}finally {if(_didIteratorError3){throw _iteratorError3;}}}var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=additionalModuleURLs[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);_iteratorNormalCompletion4 = true) {var url=_step4.value;code += '\n      lm(' + JSON.stringify(url) + ');';}}catch(err) {_didIteratorError4 = true;_iteratorError4 = err;}finally {try{if(!_iteratorNormalCompletion4 && _iterator4['return']){_iterator4['return']();}}finally {if(_didIteratorError4){throw _iteratorError4;}}}code += '\n    })();\n</script>';return code;}},{key:'moduleType',get:function get(){return 'common';}}]);return BrowserTarget;})(Target);function _target_browser_js$init(){Targets['browser'] = BrowserTarget;}
var NodeJSTarget=(function(_Target){_$rt.inherits(NodeJSTarget,_Target);function NodeJSTarget(id,mode,options){_$rt.classCallCheck(this,NodeJSTarget);_$rt.get(Object.getPrototypeOf(NodeJSTarget.prototype),'constructor',this).call(this,id,mode,options);this.registerGlobals({'setImmediate':GLOBAL_STD,'setInterval':GLOBAL_STD,'setTimeout':GLOBAL_STD,'clearImmediate':GLOBAL_STD,'clearInterval':GLOBAL_STD,'clearTimeout':GLOBAL_STD,'Buffer':GLOBAL_STD,'console':GLOBAL_STD,'exports':GLOBAL_STD,'global':GLOBAL_STD,'module':GLOBAL_STD,'process':GLOBAL_STD,'require':GLOBAL_STD,'__dirname':GLOBAL_STD,'__filename':GLOBAL_STD});this.registerBuiltInModules(['assert','buffer','child_process','cluster','console','constants','crypto','dgram','dns','domain','events','freelist','fs','http','https','module','net','os','path','punycode','querystring','readline','repl','smalloc','stream','string_decoder','sys','timers','tls','tty','url','util','vm','zlib']);}_$rt.createClass(NodeJSTarget,[{key:'preMake',value:_$rt.asyncToGenerator(function*(pkgs){if(!pkgs[0].jopath){var pkgdir=_target_nodejs_js$path.resolve(pkgs[0].dir);this.localNodeModulesDir = pkgdir?pkgdir + '/node_modules':null;}})},{key:'testModuleForPackage',value:function testModuleForPackage(pkg){return new TestModule();}},{key:'moduleForPackage',value:function moduleForPackage(pkg,depLevel){var filename=null;if(!pkg.jopath){if(depLevel !== 0 && this.localNodeModulesDir){filename = this.localNodeModulesDir + '/' + (pkg.ref?pkg.ref:_target_nodejs_js$path.resolve(pkg.dir).pop()) + '.js';}}else {filename = _$rt.get(Object.getPrototypeOf(NodeJSTarget.prototype),'moduleFilename',this).call(this,pkg,depLevel);}return new Module({filename:filename});}},{key:'transforms',value:function transforms(_transforms){return _$rt.get(Object.getPrototypeOf(NodeJSTarget.prototype),'transforms',this).call(this,_transforms).concat(['asyncToGenerator']);}},{key:'disabledTransforms',value:function disabledTransforms(_disabledTransforms){return _$rt.get(Object.getPrototypeOf(NodeJSTarget.prototype),'disabledTransforms',this).call(this,_disabledTransforms).concat(['spec.protoToAssign','es6.spec.blockScoping','es6.spec.symbols','regenerator']);}},{key:'preBuildModule',value:function preBuildModule(pkg,module,srcfiles,depLevel){console.log('preBuildModule: module.info:',module.info);}},{key:'preCompileModule',value:function preCompileModule(pkg,module,srcfiles,depLevel){if(depLevel === 0){if(!pkg.testModule && module.hasMainFunc){module.program = new NodeJSProgram(pkg,module,srcfiles,this);}else if(pkg.testModule && module === pkg.testModule){module.program = new NodeJSTestProgram(pkg,module,srcfiles,this);}}}},{key:'postCompileModule',value:_$rt.asyncToGenerator(function*(pkg,module,srcfiles,depLevel){if(module.program){pkg.programs.push(module.program);}else {return _$rt.get(Object.getPrototypeOf(NodeJSTarget.prototype),'postCompileModule',this).call(this,pkg,module,srcfiles,depLevel);}})},{key:'postMake',value:_$rt.asyncToGenerator(function*(pkgs){var programs=pkgs.reduce(function(v,pkg){return v?v.concat(pkg.programs):pkg.programs;},null);if(programs.length !== 0){return Promise.all(programs.map(function(program){return program.write();}));}})},{key:'moduleType',get:function get(){return 'common';}}]);return NodeJSTarget;})(Target);function _target_nodejs_js$init(){Targets['nodejs'] = NodeJSTarget;}
_jo_js$init();
_target_browser_js$init();
_target_nodejs_js$init();
exports.Module=Module;
exports.TestModule=TestModule;
exports.NPMModule=NPMModule;
exports.PrecompiledModule=PrecompiledModule;
exports.Logger=Logger;
exports.ModuleCompiler=ModuleCompiler;
exports.Pkg=Pkg;
exports.BuiltInPkg=BuiltInPkg;
exports.NPMPkg=NPMPkg;
exports.CodeBuffer=CodeBuffer;
exports.CodeBuffer2=CodeBuffer2;
exports.BuildCtx=BuildCtx;
exports.DupIDRefError=DupIDRefError;
exports.CompileContext=CompileContext;
exports.Env=Env;
exports.IDBinding=IDBinding;
exports.Commands=Commands;
exports.Mainv=Mainv;
exports.EnvCmd=EnvCmd;
exports.RemoteControlCmd=RemoteControlCmd;
exports.SrcFile=SrcFile;
exports.TestRunner=TestRunner;
exports.WorkDir=WorkDir;
exports.BuildCmd=BuildCmd;
exports.TestCmd=TestCmd;
exports.NodeJSProgram=NodeJSProgram;
exports.NodeJSTestProgram=NodeJSTestProgram;
exports.TARGET_MODE_DEV=TARGET_MODE_DEV;
exports.TARGET_MODE_RELEASE=TARGET_MODE_RELEASE;
exports.Targets=Targets;
exports.TargetOptions=TargetOptions;
exports.GLOBAL_STD=GLOBAL_STD;
exports.GLOBAL_DEPRECATED=GLOBAL_DEPRECATED;
exports.GLOBAL_UNSAFE=GLOBAL_UNSAFE;
exports.GLOBAL_EXPERIMENTAL=GLOBAL_EXPERIMENTAL;
exports.GLOBAL_USER=GLOBAL_USER;
exports.Target=Target;
exports.BrowserTarget=BrowserTarget;
exports.NodeJSTarget=NodeJSTarget;


};
//#jopkg{"files":["main.js"],"rt":["sliced-to-array"],"imports":["jo","jo/util"],"exports":[],"implv":"id5z50g3","apiv":"id5z50g3","main":true}
var _main_js$Mainv = __$im(require,"jo").Mainv
  , _$$0 = __$im(require,"jo/util")
  , _main_js$SrcError = _$$0.SrcError
  , _main_js$ParseOpt = _$$0.ParseOpt;
function main(argv){if(process.env.JO_PROGRAM_START_TIME){console.log('Startup time:',Date.now() - process.env.JO_PROGRAM_START_TIME + 'ms');}_main_js$Mainv(argv)['catch'](function(err){if(_main_js$SrcError.canFormat(err)){try{var msg=_main_js$SrcError.format(err);if(msg){console.error(msg);return process.exit(1);}}catch(ie) {console.error('internal error');err = ie;}}var _ParseOpt$prog=_main_js$ParseOpt.prog(process.argv);var _ParseOpt$prog2=_$rt.slicedToArray(_ParseOpt$prog,2);var prog=_ParseOpt$prog2[0];var _=_ParseOpt$prog2[1];console.error(prog + ':',err.stack || err);process.exit(2);});}

main(process.argv);
//#sourceMappingURL=data:application/json;charset:utf-8;base64,
