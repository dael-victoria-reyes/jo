{"version":3,"sources":["/Users/rasmus/src2/jo/src/jo/remotectrl/msgparse.js","/Users/rasmus/src2/jo/src/jo/remotectrl/remotectrl.js"],"names":[],"mappings":"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","file":"out","sourcesContent":["function SentinelFramedMessageParser(sentinel, onFrame) {\n  var buf = '';\n\n  var fn = function(chunk) {\n    var i = 0, p;\n    if (chunk) {\n      while ((p = chunk.indexOf(sentinel, i)) !== -1) {\n        if (buf.length) {\n          buf += chunk.substr(i, p);\n          onFrame(buf);\n          buf = '';\n        } else {\n          onFrame(chunk.substr(i, p));\n        }\n        i = p + sentinel.length;\n      }\n      if (i < chunk.length) {\n        buf += chunk.substr(i);\n      }\n    }\n  }\n\n  fn.start = function(readable) {\n    if (fn.readable) throw new Error('already started');\n    fn.readable = readable;\n    fn.readable.setEncoding('utf8')\n    // fn.readable.on('readable', () => { fn(fn.readable.read()); })\n    fn.readable.on('data', fn)\n  }\n\n  fn.stop = function () {\n    fn.readable.removeListener('data', fn)\n    fn.readable = null\n  }\n\n  return fn\n}\n","// Enables IPC remote control, invoking oncommand to perform commands.\n//\n// Messages are passed over stdout (sending) and stdin (receiving) as JSON data.\n//\n// - Keeps the process from exiting, but:\n//   - calls process.exit(0) when stdin closes\n//   - calls process.exit(1) when SIGCHLD heartbeats fail (only when spcifying `parentPID`)\n//\n// - Enables `process.send(message:any)` for sending messages to another process.\n//\n// - If `oncommand` is not provided:\n//   - Enables `process.on('message', message:any)` for receiving messages from another process.\n//\n// - Redirects `console` to `process.send({type:\"log\", level:string, message:string})`\n//   where `level` is either \"i\" (console.log), \"w\" (console.warn) or \"e\" (console.error).\n//   where `message` is any log arguments JSON-formatted and space separated, meaning\n//      `console.log(\"a\", {b:[1, 2, 3]}, [\"c\"])`\n//      is equivalent to:\n//      `process.send({type:\"log\", level:\"i\", message:\"a {b:[1,2,3]} [c]\"})`\n//\n// If `parentPID` is provided as a positive integer (or positive integer in a string),\n// SIGCHLD heartbeats are sent to that pid at regular intervals. If signal delivery\n// fails, process.exit is called to immediately terminate the program.\n//\n\n\nvar origConsole = {log:console.log, warn:console.warn, error:console.error};\nvar origProcess = {send:process.send};\n\nexport function RemoteControl(parentPID, oncommand) { return new Promise((_resolve, _reject) => {\n  if (RemoteControl.enabled) {\n    return _reject(new Error('remote control is aldready enabled'));\n  }\n\n  let pendingMessageHandlers = 0, stdinDidClose = false;\n  let onStdinEnd = () => {\n    if (pendingMessageHandlers !== 0) {\n      stdinDidClose = true;\n    } else {\n      resolve();\n    }\n  }\n\n  var heartbeatTimer;\n  var disable = function() {\n    clearInterval(heartbeatTimer);\n    process.stdin.removeListener('end', onStdinEnd);\n    for (let k in origConsole) { console[k] = origConsole[k]; }\n    process.send = origProcess.send;\n    if (streamReader) { streamReader.stop(); }\n    RemoteControl.enabled = false;\n  }\n  var resolve = function() { disable(); _resolve(); }\n  var reject = function(err) { disable(); _reject(err); }\n  var streamReader;\n\n  // If there's no oncommand function, emit \"message\" event on process when we receive messages\n  if (!oncommand) {\n    oncommand = (msg, cb) => { process.emit('message', msg); cb(); }\n  }\n\n  // Enable process.send\n  process.send = function send(message) {\n    process.stdout.write(JSON.stringify(message) + '\\n');\n  };\n\n  // Read JSON messages on stdin\n  streamReader = SentinelFramedMessageParser('\\n', function (buf) {\n    // process.stderr.write('frame '+buf+'\\n');\n    try {\n      let msg = JSON.parse(buf);\n      if (!msg || typeof msg !== \"object\" || msg.type === undefined) {\n        reject(new Error('received invalid message'))\n      } else {\n        ++pendingMessageHandlers;\n        oncommand(msg, () => {\n          if (--pendingMessageHandlers === 0 && stdinDidClose) {\n            resolve();\n          }\n        });\n      }\n    } catch (err) {\n      reject(err)\n    }\n  })\n  streamReader.start(process.stdin)\n\n  // resolve promise when stdin closes\n  process.stdin.once('end', onStdinEnd)\n\n  if (parentPID && !isNaN(parentPID = parseInt(parentPID)) && parentPID > 0) {\n    // Send a heartbeat every second, and kill ourselves if we have no parent.\n    // This helps avoid zombie processes when a parent process crashes.\n    heartbeatTimer = setInterval(function(){\n      try {\n        process.kill(parentPID, 'SIGCHLD');\n      } catch (e) {\n        reject(new Error('parent process not responding'));\n      }\n    }, 1000);\n  }\n\n  // redirect console\n  var send_log = function (level, message) {\n    message = message.map(function (v) {\n      return (typeof v === 'string') ? v : JSON.stringify(v);\n    }).join(' ');\n    process.send({type:'log', level:level, message:message});\n  }\n  var slice = function (v, n) { return Array.prototype.slice.call(v, n); }\n  console.log   = function() { send_log('i', slice(arguments)); };\n  console.warn  = function() { send_log('w', slice(arguments)); };\n  console.error = function() { send_log('e', slice(arguments)); };\n\n  RemoteControl.enabled = true;\n})}\n"]}