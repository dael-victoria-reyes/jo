{"version":3,"sources":["/Users/rasmus/src2/jo/src/jo/remotectrl/msgparse.js","/Users/rasmus/src2/jo/src/jo/remotectrl/remotectrl.js"],"names":[],"mappings":"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","file":"out","sourcesContent":["function SentinelFramedMessageParser(sentinel, onFrame) {\n  var buf = '';\n\n  var fn = function(chunk) {\n    var i = 0, p;\n    if (chunk) {\n      while ((p = chunk.indexOf(sentinel, i)) !== -1) {\n        if (buf.length) {\n          buf += chunk.substr(i, p);\n          onFrame(buf);\n          buf = '';\n        } else {\n          onFrame(chunk.substr(i, p));\n        }\n        i = p + sentinel.length;\n      }\n      if (i < chunk.length) {\n        buf += chunk.substr(i);\n      }\n    }\n  }\n\n  fn.start = function(readable) {\n    if (fn.readable) throw new Error('already started');\n    fn.readable = readable;\n    fn.readable.setEncoding('utf8')\n    // fn.readable.on('readable', () => { fn(fn.readable.read()); })\n    fn.readable.on('data', fn)\n  }\n\n  fn.stop = function () {\n    fn.readable.removeListener('data', fn)\n    fn.readable = null\n  }\n\n  return fn\n}\n","// Enables IPC remote control, invoking oncommand to perform commands.\n//\n// Messages are passed over stdout (sending) and stdin (receiving) as JSON data.\n//\n// - Keeps the process from exiting, but:\n//   - calls process.exit(0) when stdin closes\n//   - calls process.exit(1) when SIGCHLD heartbeats fail (only when spcifying `parentPID`)\n//\n// - Enables `process.send(message:any)` for sending messages to another process.\n//\n// - If `oncommand` is not provided:\n//   - Enables `process.on('message', message:any)` for receiving messages from another process.\n//\n// - Redirects `console` to `process.send({type:\"log\", level:string, message:string})`\n//   where `level` is either \"i\" (console.log), \"w\" (console.warn) or \"e\" (console.error).\n//   where `message` is any log arguments JSON-formatted and space separated, meaning\n//      `console.log(\"a\", {b:[1, 2, 3]}, [\"c\"])`\n//      is equivalent to:\n//      `process.send({type:\"log\", level:\"i\", message:\"a {b:[1,2,3]} [c]\"})`\n//\n// If `parentPID` is provided as a positive integer (or positive integer in a string),\n// SIGCHLD heartbeats are sent to that pid at regular intervals. If signal delivery\n// fails, process.exit is called to immediately terminate the program.\n//\n\n\nvar origConsole = {log:console.log, warn:console.warn, error:console.error};\nvar origProcess = {send:process.send};\n\nfunction RemoteControl(parentPID, oncommand) { return new Promise((_resolve, _reject) => {\n  if (RemoteControl.enabled) {\n    return _reject(new Error('remote control is aldready enabled'));\n  }\n\n  let pendingMessageHandlers = 0, stdinDidClose = false;\n  let onStdinEnd = () => {\n    if (pendingMessageHandlers !== 0) {\n      stdinDidClose = true;\n    } else {\n      resolve();\n    }\n  }\n\n  var heartbeatTimer;\n  var disable = function() {\n    clearInterval(heartbeatTimer);\n    process.stdin.removeListener('end', onStdinEnd);\n    for (let k in origConsole) { console[k] = origConsole[k]; }\n    process.send = origProcess.send;\n    if (streamReader) { streamReader.stop(); }\n    RemoteControl.enabled = false;\n  }\n  var resolve = function() { disable(); _resolve(); }\n  var reject = function(err) { disable(); _reject(err); }\n  var streamReader;\n\n  // If there's no oncommand function, emit \"message\" event on process when we receive messages\n  if (!oncommand) {\n    oncommand = (msg, cb) => { process.emit('message', msg); cb(); }\n  }\n\n  // Enable process.send\n  process.send = function send(message) {\n    process.stdout.write(JSON.stringify(message) + '\\n');\n  };\n\n  // Read JSON messages on stdin\n  streamReader = SentinelFramedMessageParser('\\n', function (buf) {\n    // process.stderr.write('frame '+buf+'\\n');\n    try {\n      let msg = JSON.parse(buf);\n      if (!msg || typeof msg !== \"object\" || msg.type === undefined) {\n        reject(new Error('received invalid message'))\n      } else {\n        ++pendingMessageHandlers;\n        oncommand(msg, () => {\n          if (--pendingMessageHandlers === 0 && stdinDidClose) {\n            resolve();\n          }\n        });\n      }\n    } catch (err) {\n      reject(err)\n    }\n  })\n  streamReader.start(process.stdin)\n\n  // resolve promise when stdin closes\n  process.stdin.once('end', onStdinEnd)\n\n  if (parentPID && !isNaN(parentPID = parseInt(parentPID)) && parentPID > 0) {\n    // Send a heartbeat every second, and kill ourselves if we have no parent.\n    // This helps avoid zombie processes when a parent process crashes.\n    heartbeatTimer = setInterval(function(){\n      try {\n        process.kill(parentPID, 'SIGCHLD');\n      } catch (e) {\n        reject(new Error('parent process not responding'));\n      }\n    }, 1000);\n  }\n\n  // redirect console\n  var send_log = function (level, message) {\n    message = message.map(function (v) {\n      return (typeof v === 'string') ? v : JSON.stringify(v);\n    }).join(' ');\n    process.send({type:'log', level:level, message:message});\n  }\n  var slice = function (v, n) { return Array.prototype.slice.call(v, n); }\n  console.log   = function() { send_log('i', slice(arguments)); };\n  console.warn  = function() { send_log('w', slice(arguments)); };\n  console.error = function() { send_log('e', slice(arguments)); };\n\n  RemoteControl.enabled = true;\n})}\n"]}